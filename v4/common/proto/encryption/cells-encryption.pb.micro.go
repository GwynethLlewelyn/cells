// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: cells-encryption.proto

package encryption

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/micro/micro/v3/service/api"
	client "github.com/micro/micro/v3/service/client"
	server "github.com/micro/micro/v3/service/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for UserKeyStore service

func NewUserKeyStoreEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for UserKeyStore service

type UserKeyStoreService interface {
	AddKey(ctx context.Context, in *AddKeyRequest, opts ...client.CallOption) (*AddKeyResponse, error)
	GetKey(ctx context.Context, in *GetKeyRequest, opts ...client.CallOption) (*GetKeyResponse, error)
	AdminListKeys(ctx context.Context, in *AdminListKeysRequest, opts ...client.CallOption) (*AdminListKeysResponse, error)
	AdminCreateKey(ctx context.Context, in *AdminCreateKeyRequest, opts ...client.CallOption) (*AdminCreateKeyResponse, error)
	AdminDeleteKey(ctx context.Context, in *AdminDeleteKeyRequest, opts ...client.CallOption) (*AdminDeleteKeyResponse, error)
	AdminExportKey(ctx context.Context, in *AdminExportKeyRequest, opts ...client.CallOption) (*AdminExportKeyResponse, error)
	AdminImportKey(ctx context.Context, in *AdminImportKeyRequest, opts ...client.CallOption) (*AdminImportKeyResponse, error)
}

type userKeyStoreService struct {
	c    client.Client
	name string
}

func NewUserKeyStoreService(name string, c client.Client) UserKeyStoreService {
	return &userKeyStoreService{
		c:    c,
		name: name,
	}
}

func (c *userKeyStoreService) AddKey(ctx context.Context, in *AddKeyRequest, opts ...client.CallOption) (*AddKeyResponse, error) {
	req := c.c.NewRequest(c.name, "UserKeyStore.AddKey", in)
	out := new(AddKeyResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userKeyStoreService) GetKey(ctx context.Context, in *GetKeyRequest, opts ...client.CallOption) (*GetKeyResponse, error) {
	req := c.c.NewRequest(c.name, "UserKeyStore.GetKey", in)
	out := new(GetKeyResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userKeyStoreService) AdminListKeys(ctx context.Context, in *AdminListKeysRequest, opts ...client.CallOption) (*AdminListKeysResponse, error) {
	req := c.c.NewRequest(c.name, "UserKeyStore.AdminListKeys", in)
	out := new(AdminListKeysResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userKeyStoreService) AdminCreateKey(ctx context.Context, in *AdminCreateKeyRequest, opts ...client.CallOption) (*AdminCreateKeyResponse, error) {
	req := c.c.NewRequest(c.name, "UserKeyStore.AdminCreateKey", in)
	out := new(AdminCreateKeyResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userKeyStoreService) AdminDeleteKey(ctx context.Context, in *AdminDeleteKeyRequest, opts ...client.CallOption) (*AdminDeleteKeyResponse, error) {
	req := c.c.NewRequest(c.name, "UserKeyStore.AdminDeleteKey", in)
	out := new(AdminDeleteKeyResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userKeyStoreService) AdminExportKey(ctx context.Context, in *AdminExportKeyRequest, opts ...client.CallOption) (*AdminExportKeyResponse, error) {
	req := c.c.NewRequest(c.name, "UserKeyStore.AdminExportKey", in)
	out := new(AdminExportKeyResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userKeyStoreService) AdminImportKey(ctx context.Context, in *AdminImportKeyRequest, opts ...client.CallOption) (*AdminImportKeyResponse, error) {
	req := c.c.NewRequest(c.name, "UserKeyStore.AdminImportKey", in)
	out := new(AdminImportKeyResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for UserKeyStore service

type UserKeyStoreHandler interface {
	AddKey(context.Context, *AddKeyRequest, *AddKeyResponse) error
	GetKey(context.Context, *GetKeyRequest, *GetKeyResponse) error
	AdminListKeys(context.Context, *AdminListKeysRequest, *AdminListKeysResponse) error
	AdminCreateKey(context.Context, *AdminCreateKeyRequest, *AdminCreateKeyResponse) error
	AdminDeleteKey(context.Context, *AdminDeleteKeyRequest, *AdminDeleteKeyResponse) error
	AdminExportKey(context.Context, *AdminExportKeyRequest, *AdminExportKeyResponse) error
	AdminImportKey(context.Context, *AdminImportKeyRequest, *AdminImportKeyResponse) error
}

func RegisterUserKeyStoreHandler(s server.Server, hdlr UserKeyStoreHandler, opts ...server.HandlerOption) error {
	type userKeyStore interface {
		AddKey(ctx context.Context, in *AddKeyRequest, out *AddKeyResponse) error
		GetKey(ctx context.Context, in *GetKeyRequest, out *GetKeyResponse) error
		AdminListKeys(ctx context.Context, in *AdminListKeysRequest, out *AdminListKeysResponse) error
		AdminCreateKey(ctx context.Context, in *AdminCreateKeyRequest, out *AdminCreateKeyResponse) error
		AdminDeleteKey(ctx context.Context, in *AdminDeleteKeyRequest, out *AdminDeleteKeyResponse) error
		AdminExportKey(ctx context.Context, in *AdminExportKeyRequest, out *AdminExportKeyResponse) error
		AdminImportKey(ctx context.Context, in *AdminImportKeyRequest, out *AdminImportKeyResponse) error
	}
	type UserKeyStore struct {
		userKeyStore
	}
	h := &userKeyStoreHandler{hdlr}
	return s.Handle(s.NewHandler(&UserKeyStore{h}, opts...))
}

type userKeyStoreHandler struct {
	UserKeyStoreHandler
}

func (h *userKeyStoreHandler) AddKey(ctx context.Context, in *AddKeyRequest, out *AddKeyResponse) error {
	return h.UserKeyStoreHandler.AddKey(ctx, in, out)
}

func (h *userKeyStoreHandler) GetKey(ctx context.Context, in *GetKeyRequest, out *GetKeyResponse) error {
	return h.UserKeyStoreHandler.GetKey(ctx, in, out)
}

func (h *userKeyStoreHandler) AdminListKeys(ctx context.Context, in *AdminListKeysRequest, out *AdminListKeysResponse) error {
	return h.UserKeyStoreHandler.AdminListKeys(ctx, in, out)
}

func (h *userKeyStoreHandler) AdminCreateKey(ctx context.Context, in *AdminCreateKeyRequest, out *AdminCreateKeyResponse) error {
	return h.UserKeyStoreHandler.AdminCreateKey(ctx, in, out)
}

func (h *userKeyStoreHandler) AdminDeleteKey(ctx context.Context, in *AdminDeleteKeyRequest, out *AdminDeleteKeyResponse) error {
	return h.UserKeyStoreHandler.AdminDeleteKey(ctx, in, out)
}

func (h *userKeyStoreHandler) AdminExportKey(ctx context.Context, in *AdminExportKeyRequest, out *AdminExportKeyResponse) error {
	return h.UserKeyStoreHandler.AdminExportKey(ctx, in, out)
}

func (h *userKeyStoreHandler) AdminImportKey(ctx context.Context, in *AdminImportKeyRequest, out *AdminImportKeyResponse) error {
	return h.UserKeyStoreHandler.AdminImportKey(ctx, in, out)
}

// Api Endpoints for NodeKeyManager service

func NewNodeKeyManagerEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for NodeKeyManager service

type NodeKeyManagerService interface {
	GetNodeInfo(ctx context.Context, in *GetNodeInfoRequest, opts ...client.CallOption) (*GetNodeInfoResponse, error)
	GetNodePlainSize(ctx context.Context, in *GetNodePlainSizeRequest, opts ...client.CallOption) (*GetNodePlainSizeResponse, error)
	SetNodeInfo(ctx context.Context, opts ...client.CallOption) (NodeKeyManager_SetNodeInfoService, error)
	CopyNodeInfo(ctx context.Context, in *CopyNodeInfoRequest, opts ...client.CallOption) (*CopyNodeInfoResponse, error)
	DeleteNode(ctx context.Context, in *DeleteNodeRequest, opts ...client.CallOption) (*DeleteNodeResponse, error)
	DeleteNodeKey(ctx context.Context, in *DeleteNodeKeyRequest, opts ...client.CallOption) (*DeleteNodeKeyResponse, error)
	DeleteNodeSharedKey(ctx context.Context, in *DeleteNodeSharedKeyRequest, opts ...client.CallOption) (*DeleteNodeSharedKeyResponse, error)
}

type nodeKeyManagerService struct {
	c    client.Client
	name string
}

func NewNodeKeyManagerService(name string, c client.Client) NodeKeyManagerService {
	return &nodeKeyManagerService{
		c:    c,
		name: name,
	}
}

func (c *nodeKeyManagerService) GetNodeInfo(ctx context.Context, in *GetNodeInfoRequest, opts ...client.CallOption) (*GetNodeInfoResponse, error) {
	req := c.c.NewRequest(c.name, "NodeKeyManager.GetNodeInfo", in)
	out := new(GetNodeInfoResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeKeyManagerService) GetNodePlainSize(ctx context.Context, in *GetNodePlainSizeRequest, opts ...client.CallOption) (*GetNodePlainSizeResponse, error) {
	req := c.c.NewRequest(c.name, "NodeKeyManager.GetNodePlainSize", in)
	out := new(GetNodePlainSizeResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeKeyManagerService) SetNodeInfo(ctx context.Context, opts ...client.CallOption) (NodeKeyManager_SetNodeInfoService, error) {
	req := c.c.NewRequest(c.name, "NodeKeyManager.SetNodeInfo", &SetNodeInfoRequest{})
	stream, err := c.c.Stream(ctx, req, opts...)
	if err != nil {
		return nil, err
	}
	return &nodeKeyManagerServiceSetNodeInfo{stream}, nil
}

type NodeKeyManager_SetNodeInfoService interface {
	Context() context.Context
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	CloseAndRecv() (*SetNodeInfoResponse, error)
	Send(*SetNodeInfoRequest) error
}

type nodeKeyManagerServiceSetNodeInfo struct {
	stream client.Stream
}

func (x *nodeKeyManagerServiceSetNodeInfo) CloseAndRecv() (*SetNodeInfoResponse, error) {
	if err := x.stream.Close(); err != nil {
		return nil, err
	}
	r := new(SetNodeInfoResponse)
	err := x.RecvMsg(r)
	return r, err
}

func (x *nodeKeyManagerServiceSetNodeInfo) Context() context.Context {
	return x.stream.Context()
}

func (x *nodeKeyManagerServiceSetNodeInfo) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *nodeKeyManagerServiceSetNodeInfo) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *nodeKeyManagerServiceSetNodeInfo) Send(m *SetNodeInfoRequest) error {
	return x.stream.Send(m)
}

func (c *nodeKeyManagerService) CopyNodeInfo(ctx context.Context, in *CopyNodeInfoRequest, opts ...client.CallOption) (*CopyNodeInfoResponse, error) {
	req := c.c.NewRequest(c.name, "NodeKeyManager.CopyNodeInfo", in)
	out := new(CopyNodeInfoResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeKeyManagerService) DeleteNode(ctx context.Context, in *DeleteNodeRequest, opts ...client.CallOption) (*DeleteNodeResponse, error) {
	req := c.c.NewRequest(c.name, "NodeKeyManager.DeleteNode", in)
	out := new(DeleteNodeResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeKeyManagerService) DeleteNodeKey(ctx context.Context, in *DeleteNodeKeyRequest, opts ...client.CallOption) (*DeleteNodeKeyResponse, error) {
	req := c.c.NewRequest(c.name, "NodeKeyManager.DeleteNodeKey", in)
	out := new(DeleteNodeKeyResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeKeyManagerService) DeleteNodeSharedKey(ctx context.Context, in *DeleteNodeSharedKeyRequest, opts ...client.CallOption) (*DeleteNodeSharedKeyResponse, error) {
	req := c.c.NewRequest(c.name, "NodeKeyManager.DeleteNodeSharedKey", in)
	out := new(DeleteNodeSharedKeyResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for NodeKeyManager service

type NodeKeyManagerHandler interface {
	GetNodeInfo(context.Context, *GetNodeInfoRequest, *GetNodeInfoResponse) error
	GetNodePlainSize(context.Context, *GetNodePlainSizeRequest, *GetNodePlainSizeResponse) error
	SetNodeInfo(context.Context, NodeKeyManager_SetNodeInfoStream) error
	CopyNodeInfo(context.Context, *CopyNodeInfoRequest, *CopyNodeInfoResponse) error
	DeleteNode(context.Context, *DeleteNodeRequest, *DeleteNodeResponse) error
	DeleteNodeKey(context.Context, *DeleteNodeKeyRequest, *DeleteNodeKeyResponse) error
	DeleteNodeSharedKey(context.Context, *DeleteNodeSharedKeyRequest, *DeleteNodeSharedKeyResponse) error
}

func RegisterNodeKeyManagerHandler(s server.Server, hdlr NodeKeyManagerHandler, opts ...server.HandlerOption) error {
	type nodeKeyManager interface {
		GetNodeInfo(ctx context.Context, in *GetNodeInfoRequest, out *GetNodeInfoResponse) error
		GetNodePlainSize(ctx context.Context, in *GetNodePlainSizeRequest, out *GetNodePlainSizeResponse) error
		SetNodeInfo(ctx context.Context, stream server.Stream) error
		CopyNodeInfo(ctx context.Context, in *CopyNodeInfoRequest, out *CopyNodeInfoResponse) error
		DeleteNode(ctx context.Context, in *DeleteNodeRequest, out *DeleteNodeResponse) error
		DeleteNodeKey(ctx context.Context, in *DeleteNodeKeyRequest, out *DeleteNodeKeyResponse) error
		DeleteNodeSharedKey(ctx context.Context, in *DeleteNodeSharedKeyRequest, out *DeleteNodeSharedKeyResponse) error
	}
	type NodeKeyManager struct {
		nodeKeyManager
	}
	h := &nodeKeyManagerHandler{hdlr}
	return s.Handle(s.NewHandler(&NodeKeyManager{h}, opts...))
}

type nodeKeyManagerHandler struct {
	NodeKeyManagerHandler
}

func (h *nodeKeyManagerHandler) GetNodeInfo(ctx context.Context, in *GetNodeInfoRequest, out *GetNodeInfoResponse) error {
	return h.NodeKeyManagerHandler.GetNodeInfo(ctx, in, out)
}

func (h *nodeKeyManagerHandler) GetNodePlainSize(ctx context.Context, in *GetNodePlainSizeRequest, out *GetNodePlainSizeResponse) error {
	return h.NodeKeyManagerHandler.GetNodePlainSize(ctx, in, out)
}

func (h *nodeKeyManagerHandler) SetNodeInfo(ctx context.Context, stream server.Stream) error {
	return h.NodeKeyManagerHandler.SetNodeInfo(ctx, &nodeKeyManagerSetNodeInfoStream{stream})
}

type NodeKeyManager_SetNodeInfoStream interface {
	Context() context.Context
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	SendAndClose(*SetNodeInfoResponse) error
	Recv() (*SetNodeInfoRequest, error)
}

type nodeKeyManagerSetNodeInfoStream struct {
	stream server.Stream
}

func (x *nodeKeyManagerSetNodeInfoStream) SendAndClose(in *SetNodeInfoResponse) error {
	if err := x.SendMsg(in); err != nil {
		return err
	}
	return x.stream.Close()
}

func (x *nodeKeyManagerSetNodeInfoStream) Context() context.Context {
	return x.stream.Context()
}

func (x *nodeKeyManagerSetNodeInfoStream) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *nodeKeyManagerSetNodeInfoStream) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *nodeKeyManagerSetNodeInfoStream) Recv() (*SetNodeInfoRequest, error) {
	m := new(SetNodeInfoRequest)
	if err := x.stream.Recv(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (h *nodeKeyManagerHandler) CopyNodeInfo(ctx context.Context, in *CopyNodeInfoRequest, out *CopyNodeInfoResponse) error {
	return h.NodeKeyManagerHandler.CopyNodeInfo(ctx, in, out)
}

func (h *nodeKeyManagerHandler) DeleteNode(ctx context.Context, in *DeleteNodeRequest, out *DeleteNodeResponse) error {
	return h.NodeKeyManagerHandler.DeleteNode(ctx, in, out)
}

func (h *nodeKeyManagerHandler) DeleteNodeKey(ctx context.Context, in *DeleteNodeKeyRequest, out *DeleteNodeKeyResponse) error {
	return h.NodeKeyManagerHandler.DeleteNodeKey(ctx, in, out)
}

func (h *nodeKeyManagerHandler) DeleteNodeSharedKey(ctx context.Context, in *DeleteNodeSharedKeyRequest, out *DeleteNodeSharedKeyResponse) error {
	return h.NodeKeyManagerHandler.DeleteNodeSharedKey(ctx, in, out)
}
