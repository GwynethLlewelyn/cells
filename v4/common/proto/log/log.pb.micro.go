// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: log.proto

package log

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/micro/micro/v3/service/api"
	client "github.com/micro/micro/v3/service/client"
	server "github.com/micro/micro/v3/service/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for LogRecorder service

func NewLogRecorderEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for LogRecorder service

type LogRecorderService interface {
	// PutLog adds received log messages to the corresponding log repository.
	PutLog(ctx context.Context, opts ...client.CallOption) (LogRecorder_PutLogService, error)
	// ListLogs performs a paginated search query in the log repository.
	ListLogs(ctx context.Context, in *ListLogRequest, opts ...client.CallOption) (LogRecorder_ListLogsService, error)
	// DeleteLogs deletes logs based on a request (cannot be empty)
	DeleteLogs(ctx context.Context, in *ListLogRequest, opts ...client.CallOption) (*DeleteLogsResponse, error)
	// AggregatedLogs performs a query to retrieve log events of the given type, faceted by time range.
	AggregatedLogs(ctx context.Context, in *TimeRangeRequest, opts ...client.CallOption) (LogRecorder_AggregatedLogsService, error)
}

type logRecorderService struct {
	c    client.Client
	name string
}

func NewLogRecorderService(name string, c client.Client) LogRecorderService {
	return &logRecorderService{
		c:    c,
		name: name,
	}
}

func (c *logRecorderService) PutLog(ctx context.Context, opts ...client.CallOption) (LogRecorder_PutLogService, error) {
	req := c.c.NewRequest(c.name, "LogRecorder.PutLog", &Log{})
	stream, err := c.c.Stream(ctx, req, opts...)
	if err != nil {
		return nil, err
	}
	return &logRecorderServicePutLog{stream}, nil
}

type LogRecorder_PutLogService interface {
	Context() context.Context
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	CloseAndRecv() (*RecorderPutResponse, error)
	Send(*Log) error
}

type logRecorderServicePutLog struct {
	stream client.Stream
}

func (x *logRecorderServicePutLog) CloseAndRecv() (*RecorderPutResponse, error) {
	if err := x.stream.Close(); err != nil {
		return nil, err
	}
	r := new(RecorderPutResponse)
	err := x.RecvMsg(r)
	return r, err
}

func (x *logRecorderServicePutLog) Context() context.Context {
	return x.stream.Context()
}

func (x *logRecorderServicePutLog) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *logRecorderServicePutLog) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *logRecorderServicePutLog) Send(m *Log) error {
	return x.stream.Send(m)
}

func (c *logRecorderService) ListLogs(ctx context.Context, in *ListLogRequest, opts ...client.CallOption) (LogRecorder_ListLogsService, error) {
	req := c.c.NewRequest(c.name, "LogRecorder.ListLogs", &ListLogRequest{})
	stream, err := c.c.Stream(ctx, req, opts...)
	if err != nil {
		return nil, err
	}
	if err := stream.Send(in); err != nil {
		return nil, err
	}
	return &logRecorderServiceListLogs{stream}, nil
}

type LogRecorder_ListLogsService interface {
	Context() context.Context
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Recv() (*ListLogResponse, error)
}

type logRecorderServiceListLogs struct {
	stream client.Stream
}

func (x *logRecorderServiceListLogs) Close() error {
	return x.stream.Close()
}

func (x *logRecorderServiceListLogs) Context() context.Context {
	return x.stream.Context()
}

func (x *logRecorderServiceListLogs) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *logRecorderServiceListLogs) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *logRecorderServiceListLogs) Recv() (*ListLogResponse, error) {
	m := new(ListLogResponse)
	err := x.stream.Recv(m)
	if err != nil {
		return nil, err
	}
	return m, nil
}

func (c *logRecorderService) DeleteLogs(ctx context.Context, in *ListLogRequest, opts ...client.CallOption) (*DeleteLogsResponse, error) {
	req := c.c.NewRequest(c.name, "LogRecorder.DeleteLogs", in)
	out := new(DeleteLogsResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *logRecorderService) AggregatedLogs(ctx context.Context, in *TimeRangeRequest, opts ...client.CallOption) (LogRecorder_AggregatedLogsService, error) {
	req := c.c.NewRequest(c.name, "LogRecorder.AggregatedLogs", &TimeRangeRequest{})
	stream, err := c.c.Stream(ctx, req, opts...)
	if err != nil {
		return nil, err
	}
	if err := stream.Send(in); err != nil {
		return nil, err
	}
	return &logRecorderServiceAggregatedLogs{stream}, nil
}

type LogRecorder_AggregatedLogsService interface {
	Context() context.Context
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Recv() (*TimeRangeResponse, error)
}

type logRecorderServiceAggregatedLogs struct {
	stream client.Stream
}

func (x *logRecorderServiceAggregatedLogs) Close() error {
	return x.stream.Close()
}

func (x *logRecorderServiceAggregatedLogs) Context() context.Context {
	return x.stream.Context()
}

func (x *logRecorderServiceAggregatedLogs) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *logRecorderServiceAggregatedLogs) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *logRecorderServiceAggregatedLogs) Recv() (*TimeRangeResponse, error) {
	m := new(TimeRangeResponse)
	err := x.stream.Recv(m)
	if err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for LogRecorder service

type LogRecorderHandler interface {
	// PutLog adds received log messages to the corresponding log repository.
	PutLog(context.Context, LogRecorder_PutLogStream) error
	// ListLogs performs a paginated search query in the log repository.
	ListLogs(context.Context, *ListLogRequest, LogRecorder_ListLogsStream) error
	// DeleteLogs deletes logs based on a request (cannot be empty)
	DeleteLogs(context.Context, *ListLogRequest, *DeleteLogsResponse) error
	// AggregatedLogs performs a query to retrieve log events of the given type, faceted by time range.
	AggregatedLogs(context.Context, *TimeRangeRequest, LogRecorder_AggregatedLogsStream) error
}

func RegisterLogRecorderHandler(s server.Server, hdlr LogRecorderHandler, opts ...server.HandlerOption) error {
	type logRecorder interface {
		PutLog(ctx context.Context, stream server.Stream) error
		ListLogs(ctx context.Context, stream server.Stream) error
		DeleteLogs(ctx context.Context, in *ListLogRequest, out *DeleteLogsResponse) error
		AggregatedLogs(ctx context.Context, stream server.Stream) error
	}
	type LogRecorder struct {
		logRecorder
	}
	h := &logRecorderHandler{hdlr}
	return s.Handle(s.NewHandler(&LogRecorder{h}, opts...))
}

type logRecorderHandler struct {
	LogRecorderHandler
}

func (h *logRecorderHandler) PutLog(ctx context.Context, stream server.Stream) error {
	return h.LogRecorderHandler.PutLog(ctx, &logRecorderPutLogStream{stream})
}

type LogRecorder_PutLogStream interface {
	Context() context.Context
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	SendAndClose(*RecorderPutResponse) error
	Recv() (*Log, error)
}

type logRecorderPutLogStream struct {
	stream server.Stream
}

func (x *logRecorderPutLogStream) SendAndClose(in *RecorderPutResponse) error {
	if err := x.SendMsg(in); err != nil {
		return err
	}
	return x.stream.Close()
}

func (x *logRecorderPutLogStream) Context() context.Context {
	return x.stream.Context()
}

func (x *logRecorderPutLogStream) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *logRecorderPutLogStream) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *logRecorderPutLogStream) Recv() (*Log, error) {
	m := new(Log)
	if err := x.stream.Recv(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (h *logRecorderHandler) ListLogs(ctx context.Context, stream server.Stream) error {
	m := new(ListLogRequest)
	if err := stream.Recv(m); err != nil {
		return err
	}
	return h.LogRecorderHandler.ListLogs(ctx, m, &logRecorderListLogsStream{stream})
}

type LogRecorder_ListLogsStream interface {
	Context() context.Context
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Send(*ListLogResponse) error
}

type logRecorderListLogsStream struct {
	stream server.Stream
}

func (x *logRecorderListLogsStream) Close() error {
	return x.stream.Close()
}

func (x *logRecorderListLogsStream) Context() context.Context {
	return x.stream.Context()
}

func (x *logRecorderListLogsStream) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *logRecorderListLogsStream) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *logRecorderListLogsStream) Send(m *ListLogResponse) error {
	return x.stream.Send(m)
}

func (h *logRecorderHandler) DeleteLogs(ctx context.Context, in *ListLogRequest, out *DeleteLogsResponse) error {
	return h.LogRecorderHandler.DeleteLogs(ctx, in, out)
}

func (h *logRecorderHandler) AggregatedLogs(ctx context.Context, stream server.Stream) error {
	m := new(TimeRangeRequest)
	if err := stream.Recv(m); err != nil {
		return err
	}
	return h.LogRecorderHandler.AggregatedLogs(ctx, m, &logRecorderAggregatedLogsStream{stream})
}

type LogRecorder_AggregatedLogsStream interface {
	Context() context.Context
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Send(*TimeRangeResponse) error
}

type logRecorderAggregatedLogsStream struct {
	stream server.Stream
}

func (x *logRecorderAggregatedLogsStream) Close() error {
	return x.stream.Close()
}

func (x *logRecorderAggregatedLogsStream) Context() context.Context {
	return x.stream.Context()
}

func (x *logRecorderAggregatedLogsStream) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *logRecorderAggregatedLogsStream) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *logRecorderAggregatedLogsStream) Send(m *TimeRangeResponse) error {
	return x.stream.Send(m)
}
