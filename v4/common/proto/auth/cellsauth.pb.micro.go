// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: cellsauth.proto

package auth

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/micro/micro/v3/service/api"
	client "github.com/micro/micro/v3/service/client"
	server "github.com/micro/micro/v3/service/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for AuthTokenRevoker service

func NewAuthTokenRevokerEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for AuthTokenRevoker service

type AuthTokenRevokerService interface {
	// Revoker invalidates the current token and specifies if the invalidation is due to a refresh or a revokation
	Revoke(ctx context.Context, in *RevokeTokenRequest, opts ...client.CallOption) (*RevokeTokenResponse, error)
}

type authTokenRevokerService struct {
	c    client.Client
	name string
}

func NewAuthTokenRevokerService(name string, c client.Client) AuthTokenRevokerService {
	return &authTokenRevokerService{
		c:    c,
		name: name,
	}
}

func (c *authTokenRevokerService) Revoke(ctx context.Context, in *RevokeTokenRequest, opts ...client.CallOption) (*RevokeTokenResponse, error) {
	req := c.c.NewRequest(c.name, "AuthTokenRevoker.Revoke", in)
	out := new(RevokeTokenResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for AuthTokenRevoker service

type AuthTokenRevokerHandler interface {
	// Revoker invalidates the current token and specifies if the invalidation is due to a refresh or a revokation
	Revoke(context.Context, *RevokeTokenRequest, *RevokeTokenResponse) error
}

func RegisterAuthTokenRevokerHandler(s server.Server, hdlr AuthTokenRevokerHandler, opts ...server.HandlerOption) error {
	type authTokenRevoker interface {
		Revoke(ctx context.Context, in *RevokeTokenRequest, out *RevokeTokenResponse) error
	}
	type AuthTokenRevoker struct {
		authTokenRevoker
	}
	h := &authTokenRevokerHandler{hdlr}
	return s.Handle(s.NewHandler(&AuthTokenRevoker{h}, opts...))
}

type authTokenRevokerHandler struct {
	AuthTokenRevokerHandler
}

func (h *authTokenRevokerHandler) Revoke(ctx context.Context, in *RevokeTokenRequest, out *RevokeTokenResponse) error {
	return h.AuthTokenRevokerHandler.Revoke(ctx, in, out)
}

// Api Endpoints for AuthTokenPruner service

func NewAuthTokenPrunerEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for AuthTokenPruner service

type AuthTokenPrunerService interface {
	// PruneTokens clear revoked tokens
	PruneTokens(ctx context.Context, in *PruneTokensRequest, opts ...client.CallOption) (*PruneTokensResponse, error)
}

type authTokenPrunerService struct {
	c    client.Client
	name string
}

func NewAuthTokenPrunerService(name string, c client.Client) AuthTokenPrunerService {
	return &authTokenPrunerService{
		c:    c,
		name: name,
	}
}

func (c *authTokenPrunerService) PruneTokens(ctx context.Context, in *PruneTokensRequest, opts ...client.CallOption) (*PruneTokensResponse, error) {
	req := c.c.NewRequest(c.name, "AuthTokenPruner.PruneTokens", in)
	out := new(PruneTokensResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for AuthTokenPruner service

type AuthTokenPrunerHandler interface {
	// PruneTokens clear revoked tokens
	PruneTokens(context.Context, *PruneTokensRequest, *PruneTokensResponse) error
}

func RegisterAuthTokenPrunerHandler(s server.Server, hdlr AuthTokenPrunerHandler, opts ...server.HandlerOption) error {
	type authTokenPruner interface {
		PruneTokens(ctx context.Context, in *PruneTokensRequest, out *PruneTokensResponse) error
	}
	type AuthTokenPruner struct {
		authTokenPruner
	}
	h := &authTokenPrunerHandler{hdlr}
	return s.Handle(s.NewHandler(&AuthTokenPruner{h}, opts...))
}

type authTokenPrunerHandler struct {
	AuthTokenPrunerHandler
}

func (h *authTokenPrunerHandler) PruneTokens(ctx context.Context, in *PruneTokensRequest, out *PruneTokensResponse) error {
	return h.AuthTokenPrunerHandler.PruneTokens(ctx, in, out)
}

// Api Endpoints for LoginProvider service

func NewLoginProviderEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for LoginProvider service

type LoginProviderService interface {
	GetLogin(ctx context.Context, in *GetLoginRequest, opts ...client.CallOption) (*GetLoginResponse, error)
	CreateLogin(ctx context.Context, in *CreateLoginRequest, opts ...client.CallOption) (*CreateLoginResponse, error)
	AcceptLogin(ctx context.Context, in *AcceptLoginRequest, opts ...client.CallOption) (*AcceptLoginResponse, error)
}

type loginProviderService struct {
	c    client.Client
	name string
}

func NewLoginProviderService(name string, c client.Client) LoginProviderService {
	return &loginProviderService{
		c:    c,
		name: name,
	}
}

func (c *loginProviderService) GetLogin(ctx context.Context, in *GetLoginRequest, opts ...client.CallOption) (*GetLoginResponse, error) {
	req := c.c.NewRequest(c.name, "LoginProvider.GetLogin", in)
	out := new(GetLoginResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *loginProviderService) CreateLogin(ctx context.Context, in *CreateLoginRequest, opts ...client.CallOption) (*CreateLoginResponse, error) {
	req := c.c.NewRequest(c.name, "LoginProvider.CreateLogin", in)
	out := new(CreateLoginResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *loginProviderService) AcceptLogin(ctx context.Context, in *AcceptLoginRequest, opts ...client.CallOption) (*AcceptLoginResponse, error) {
	req := c.c.NewRequest(c.name, "LoginProvider.AcceptLogin", in)
	out := new(AcceptLoginResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for LoginProvider service

type LoginProviderHandler interface {
	GetLogin(context.Context, *GetLoginRequest, *GetLoginResponse) error
	CreateLogin(context.Context, *CreateLoginRequest, *CreateLoginResponse) error
	AcceptLogin(context.Context, *AcceptLoginRequest, *AcceptLoginResponse) error
}

func RegisterLoginProviderHandler(s server.Server, hdlr LoginProviderHandler, opts ...server.HandlerOption) error {
	type loginProvider interface {
		GetLogin(ctx context.Context, in *GetLoginRequest, out *GetLoginResponse) error
		CreateLogin(ctx context.Context, in *CreateLoginRequest, out *CreateLoginResponse) error
		AcceptLogin(ctx context.Context, in *AcceptLoginRequest, out *AcceptLoginResponse) error
	}
	type LoginProvider struct {
		loginProvider
	}
	h := &loginProviderHandler{hdlr}
	return s.Handle(s.NewHandler(&LoginProvider{h}, opts...))
}

type loginProviderHandler struct {
	LoginProviderHandler
}

func (h *loginProviderHandler) GetLogin(ctx context.Context, in *GetLoginRequest, out *GetLoginResponse) error {
	return h.LoginProviderHandler.GetLogin(ctx, in, out)
}

func (h *loginProviderHandler) CreateLogin(ctx context.Context, in *CreateLoginRequest, out *CreateLoginResponse) error {
	return h.LoginProviderHandler.CreateLogin(ctx, in, out)
}

func (h *loginProviderHandler) AcceptLogin(ctx context.Context, in *AcceptLoginRequest, out *AcceptLoginResponse) error {
	return h.LoginProviderHandler.AcceptLogin(ctx, in, out)
}

// Api Endpoints for ConsentProvider service

func NewConsentProviderEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for ConsentProvider service

type ConsentProviderService interface {
	GetConsent(ctx context.Context, in *GetConsentRequest, opts ...client.CallOption) (*GetConsentResponse, error)
	CreateConsent(ctx context.Context, in *CreateConsentRequest, opts ...client.CallOption) (*CreateConsentResponse, error)
	AcceptConsent(ctx context.Context, in *AcceptConsentRequest, opts ...client.CallOption) (*AcceptConsentResponse, error)
}

type consentProviderService struct {
	c    client.Client
	name string
}

func NewConsentProviderService(name string, c client.Client) ConsentProviderService {
	return &consentProviderService{
		c:    c,
		name: name,
	}
}

func (c *consentProviderService) GetConsent(ctx context.Context, in *GetConsentRequest, opts ...client.CallOption) (*GetConsentResponse, error) {
	req := c.c.NewRequest(c.name, "ConsentProvider.GetConsent", in)
	out := new(GetConsentResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *consentProviderService) CreateConsent(ctx context.Context, in *CreateConsentRequest, opts ...client.CallOption) (*CreateConsentResponse, error) {
	req := c.c.NewRequest(c.name, "ConsentProvider.CreateConsent", in)
	out := new(CreateConsentResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *consentProviderService) AcceptConsent(ctx context.Context, in *AcceptConsentRequest, opts ...client.CallOption) (*AcceptConsentResponse, error) {
	req := c.c.NewRequest(c.name, "ConsentProvider.AcceptConsent", in)
	out := new(AcceptConsentResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for ConsentProvider service

type ConsentProviderHandler interface {
	GetConsent(context.Context, *GetConsentRequest, *GetConsentResponse) error
	CreateConsent(context.Context, *CreateConsentRequest, *CreateConsentResponse) error
	AcceptConsent(context.Context, *AcceptConsentRequest, *AcceptConsentResponse) error
}

func RegisterConsentProviderHandler(s server.Server, hdlr ConsentProviderHandler, opts ...server.HandlerOption) error {
	type consentProvider interface {
		GetConsent(ctx context.Context, in *GetConsentRequest, out *GetConsentResponse) error
		CreateConsent(ctx context.Context, in *CreateConsentRequest, out *CreateConsentResponse) error
		AcceptConsent(ctx context.Context, in *AcceptConsentRequest, out *AcceptConsentResponse) error
	}
	type ConsentProvider struct {
		consentProvider
	}
	h := &consentProviderHandler{hdlr}
	return s.Handle(s.NewHandler(&ConsentProvider{h}, opts...))
}

type consentProviderHandler struct {
	ConsentProviderHandler
}

func (h *consentProviderHandler) GetConsent(ctx context.Context, in *GetConsentRequest, out *GetConsentResponse) error {
	return h.ConsentProviderHandler.GetConsent(ctx, in, out)
}

func (h *consentProviderHandler) CreateConsent(ctx context.Context, in *CreateConsentRequest, out *CreateConsentResponse) error {
	return h.ConsentProviderHandler.CreateConsent(ctx, in, out)
}

func (h *consentProviderHandler) AcceptConsent(ctx context.Context, in *AcceptConsentRequest, out *AcceptConsentResponse) error {
	return h.ConsentProviderHandler.AcceptConsent(ctx, in, out)
}

// Api Endpoints for LogoutProvider service

func NewLogoutProviderEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for LogoutProvider service

type LogoutProviderService interface {
	CreateLogout(ctx context.Context, in *CreateLogoutRequest, opts ...client.CallOption) (*CreateLogoutResponse, error)
	AcceptLogout(ctx context.Context, in *AcceptLogoutRequest, opts ...client.CallOption) (*AcceptLogoutResponse, error)
}

type logoutProviderService struct {
	c    client.Client
	name string
}

func NewLogoutProviderService(name string, c client.Client) LogoutProviderService {
	return &logoutProviderService{
		c:    c,
		name: name,
	}
}

func (c *logoutProviderService) CreateLogout(ctx context.Context, in *CreateLogoutRequest, opts ...client.CallOption) (*CreateLogoutResponse, error) {
	req := c.c.NewRequest(c.name, "LogoutProvider.CreateLogout", in)
	out := new(CreateLogoutResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *logoutProviderService) AcceptLogout(ctx context.Context, in *AcceptLogoutRequest, opts ...client.CallOption) (*AcceptLogoutResponse, error) {
	req := c.c.NewRequest(c.name, "LogoutProvider.AcceptLogout", in)
	out := new(AcceptLogoutResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for LogoutProvider service

type LogoutProviderHandler interface {
	CreateLogout(context.Context, *CreateLogoutRequest, *CreateLogoutResponse) error
	AcceptLogout(context.Context, *AcceptLogoutRequest, *AcceptLogoutResponse) error
}

func RegisterLogoutProviderHandler(s server.Server, hdlr LogoutProviderHandler, opts ...server.HandlerOption) error {
	type logoutProvider interface {
		CreateLogout(ctx context.Context, in *CreateLogoutRequest, out *CreateLogoutResponse) error
		AcceptLogout(ctx context.Context, in *AcceptLogoutRequest, out *AcceptLogoutResponse) error
	}
	type LogoutProvider struct {
		logoutProvider
	}
	h := &logoutProviderHandler{hdlr}
	return s.Handle(s.NewHandler(&LogoutProvider{h}, opts...))
}

type logoutProviderHandler struct {
	LogoutProviderHandler
}

func (h *logoutProviderHandler) CreateLogout(ctx context.Context, in *CreateLogoutRequest, out *CreateLogoutResponse) error {
	return h.LogoutProviderHandler.CreateLogout(ctx, in, out)
}

func (h *logoutProviderHandler) AcceptLogout(ctx context.Context, in *AcceptLogoutRequest, out *AcceptLogoutResponse) error {
	return h.LogoutProviderHandler.AcceptLogout(ctx, in, out)
}

// Api Endpoints for AuthCodeProvider service

func NewAuthCodeProviderEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for AuthCodeProvider service

type AuthCodeProviderService interface {
	CreateAuthCode(ctx context.Context, in *CreateAuthCodeRequest, opts ...client.CallOption) (*CreateAuthCodeResponse, error)
}

type authCodeProviderService struct {
	c    client.Client
	name string
}

func NewAuthCodeProviderService(name string, c client.Client) AuthCodeProviderService {
	return &authCodeProviderService{
		c:    c,
		name: name,
	}
}

func (c *authCodeProviderService) CreateAuthCode(ctx context.Context, in *CreateAuthCodeRequest, opts ...client.CallOption) (*CreateAuthCodeResponse, error) {
	req := c.c.NewRequest(c.name, "AuthCodeProvider.CreateAuthCode", in)
	out := new(CreateAuthCodeResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for AuthCodeProvider service

type AuthCodeProviderHandler interface {
	CreateAuthCode(context.Context, *CreateAuthCodeRequest, *CreateAuthCodeResponse) error
}

func RegisterAuthCodeProviderHandler(s server.Server, hdlr AuthCodeProviderHandler, opts ...server.HandlerOption) error {
	type authCodeProvider interface {
		CreateAuthCode(ctx context.Context, in *CreateAuthCodeRequest, out *CreateAuthCodeResponse) error
	}
	type AuthCodeProvider struct {
		authCodeProvider
	}
	h := &authCodeProviderHandler{hdlr}
	return s.Handle(s.NewHandler(&AuthCodeProvider{h}, opts...))
}

type authCodeProviderHandler struct {
	AuthCodeProviderHandler
}

func (h *authCodeProviderHandler) CreateAuthCode(ctx context.Context, in *CreateAuthCodeRequest, out *CreateAuthCodeResponse) error {
	return h.AuthCodeProviderHandler.CreateAuthCode(ctx, in, out)
}

// Api Endpoints for AuthTokenVerifier service

func NewAuthTokenVerifierEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for AuthTokenVerifier service

type AuthTokenVerifierService interface {
	// Verifies a token and returns claims
	Verify(ctx context.Context, in *VerifyTokenRequest, opts ...client.CallOption) (*VerifyTokenResponse, error)
}

type authTokenVerifierService struct {
	c    client.Client
	name string
}

func NewAuthTokenVerifierService(name string, c client.Client) AuthTokenVerifierService {
	return &authTokenVerifierService{
		c:    c,
		name: name,
	}
}

func (c *authTokenVerifierService) Verify(ctx context.Context, in *VerifyTokenRequest, opts ...client.CallOption) (*VerifyTokenResponse, error) {
	req := c.c.NewRequest(c.name, "AuthTokenVerifier.Verify", in)
	out := new(VerifyTokenResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for AuthTokenVerifier service

type AuthTokenVerifierHandler interface {
	// Verifies a token and returns claims
	Verify(context.Context, *VerifyTokenRequest, *VerifyTokenResponse) error
}

func RegisterAuthTokenVerifierHandler(s server.Server, hdlr AuthTokenVerifierHandler, opts ...server.HandlerOption) error {
	type authTokenVerifier interface {
		Verify(ctx context.Context, in *VerifyTokenRequest, out *VerifyTokenResponse) error
	}
	type AuthTokenVerifier struct {
		authTokenVerifier
	}
	h := &authTokenVerifierHandler{hdlr}
	return s.Handle(s.NewHandler(&AuthTokenVerifier{h}, opts...))
}

type authTokenVerifierHandler struct {
	AuthTokenVerifierHandler
}

func (h *authTokenVerifierHandler) Verify(ctx context.Context, in *VerifyTokenRequest, out *VerifyTokenResponse) error {
	return h.AuthTokenVerifierHandler.Verify(ctx, in, out)
}

// Api Endpoints for AuthCodeExchanger service

func NewAuthCodeExchangerEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for AuthCodeExchanger service

type AuthCodeExchangerService interface {
	Exchange(ctx context.Context, in *ExchangeRequest, opts ...client.CallOption) (*ExchangeResponse, error)
}

type authCodeExchangerService struct {
	c    client.Client
	name string
}

func NewAuthCodeExchangerService(name string, c client.Client) AuthCodeExchangerService {
	return &authCodeExchangerService{
		c:    c,
		name: name,
	}
}

func (c *authCodeExchangerService) Exchange(ctx context.Context, in *ExchangeRequest, opts ...client.CallOption) (*ExchangeResponse, error) {
	req := c.c.NewRequest(c.name, "AuthCodeExchanger.Exchange", in)
	out := new(ExchangeResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for AuthCodeExchanger service

type AuthCodeExchangerHandler interface {
	Exchange(context.Context, *ExchangeRequest, *ExchangeResponse) error
}

func RegisterAuthCodeExchangerHandler(s server.Server, hdlr AuthCodeExchangerHandler, opts ...server.HandlerOption) error {
	type authCodeExchanger interface {
		Exchange(ctx context.Context, in *ExchangeRequest, out *ExchangeResponse) error
	}
	type AuthCodeExchanger struct {
		authCodeExchanger
	}
	h := &authCodeExchangerHandler{hdlr}
	return s.Handle(s.NewHandler(&AuthCodeExchanger{h}, opts...))
}

type authCodeExchangerHandler struct {
	AuthCodeExchangerHandler
}

func (h *authCodeExchangerHandler) Exchange(ctx context.Context, in *ExchangeRequest, out *ExchangeResponse) error {
	return h.AuthCodeExchangerHandler.Exchange(ctx, in, out)
}

// Api Endpoints for PasswordCredentialsToken service

func NewPasswordCredentialsTokenEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for PasswordCredentialsToken service

type PasswordCredentialsTokenService interface {
	PasswordCredentialsToken(ctx context.Context, in *PasswordCredentialsTokenRequest, opts ...client.CallOption) (*PasswordCredentialsTokenResponse, error)
}

type passwordCredentialsTokenService struct {
	c    client.Client
	name string
}

func NewPasswordCredentialsTokenService(name string, c client.Client) PasswordCredentialsTokenService {
	return &passwordCredentialsTokenService{
		c:    c,
		name: name,
	}
}

func (c *passwordCredentialsTokenService) PasswordCredentialsToken(ctx context.Context, in *PasswordCredentialsTokenRequest, opts ...client.CallOption) (*PasswordCredentialsTokenResponse, error) {
	req := c.c.NewRequest(c.name, "PasswordCredentialsToken.PasswordCredentialsToken", in)
	out := new(PasswordCredentialsTokenResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for PasswordCredentialsToken service

type PasswordCredentialsTokenHandler interface {
	PasswordCredentialsToken(context.Context, *PasswordCredentialsTokenRequest, *PasswordCredentialsTokenResponse) error
}

func RegisterPasswordCredentialsTokenHandler(s server.Server, hdlr PasswordCredentialsTokenHandler, opts ...server.HandlerOption) error {
	type passwordCredentialsToken interface {
		PasswordCredentialsToken(ctx context.Context, in *PasswordCredentialsTokenRequest, out *PasswordCredentialsTokenResponse) error
	}
	type PasswordCredentialsToken struct {
		passwordCredentialsToken
	}
	h := &passwordCredentialsTokenHandler{hdlr}
	return s.Handle(s.NewHandler(&PasswordCredentialsToken{h}, opts...))
}

type passwordCredentialsTokenHandler struct {
	PasswordCredentialsTokenHandler
}

func (h *passwordCredentialsTokenHandler) PasswordCredentialsToken(ctx context.Context, in *PasswordCredentialsTokenRequest, out *PasswordCredentialsTokenResponse) error {
	return h.PasswordCredentialsTokenHandler.PasswordCredentialsToken(ctx, in, out)
}

// Api Endpoints for AuthTokenRefresher service

func NewAuthTokenRefresherEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for AuthTokenRefresher service

type AuthTokenRefresherService interface {
	Refresh(ctx context.Context, in *RefreshTokenRequest, opts ...client.CallOption) (*RefreshTokenResponse, error)
}

type authTokenRefresherService struct {
	c    client.Client
	name string
}

func NewAuthTokenRefresherService(name string, c client.Client) AuthTokenRefresherService {
	return &authTokenRefresherService{
		c:    c,
		name: name,
	}
}

func (c *authTokenRefresherService) Refresh(ctx context.Context, in *RefreshTokenRequest, opts ...client.CallOption) (*RefreshTokenResponse, error) {
	req := c.c.NewRequest(c.name, "AuthTokenRefresher.Refresh", in)
	out := new(RefreshTokenResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for AuthTokenRefresher service

type AuthTokenRefresherHandler interface {
	Refresh(context.Context, *RefreshTokenRequest, *RefreshTokenResponse) error
}

func RegisterAuthTokenRefresherHandler(s server.Server, hdlr AuthTokenRefresherHandler, opts ...server.HandlerOption) error {
	type authTokenRefresher interface {
		Refresh(ctx context.Context, in *RefreshTokenRequest, out *RefreshTokenResponse) error
	}
	type AuthTokenRefresher struct {
		authTokenRefresher
	}
	h := &authTokenRefresherHandler{hdlr}
	return s.Handle(s.NewHandler(&AuthTokenRefresher{h}, opts...))
}

type authTokenRefresherHandler struct {
	AuthTokenRefresherHandler
}

func (h *authTokenRefresherHandler) Refresh(ctx context.Context, in *RefreshTokenRequest, out *RefreshTokenResponse) error {
	return h.AuthTokenRefresherHandler.Refresh(ctx, in, out)
}

// Api Endpoints for PersonalAccessTokenService service

func NewPersonalAccessTokenServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for PersonalAccessTokenService service

type PersonalAccessTokenService interface {
	Generate(ctx context.Context, in *PatGenerateRequest, opts ...client.CallOption) (*PatGenerateResponse, error)
	Revoke(ctx context.Context, in *PatRevokeRequest, opts ...client.CallOption) (*PatRevokeResponse, error)
	List(ctx context.Context, in *PatListRequest, opts ...client.CallOption) (*PatListResponse, error)
}

type personalAccessTokenService struct {
	c    client.Client
	name string
}

func NewPersonalAccessTokenService(name string, c client.Client) PersonalAccessTokenService {
	return &personalAccessTokenService{
		c:    c,
		name: name,
	}
}

func (c *personalAccessTokenService) Generate(ctx context.Context, in *PatGenerateRequest, opts ...client.CallOption) (*PatGenerateResponse, error) {
	req := c.c.NewRequest(c.name, "PersonalAccessTokenService.Generate", in)
	out := new(PatGenerateResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *personalAccessTokenService) Revoke(ctx context.Context, in *PatRevokeRequest, opts ...client.CallOption) (*PatRevokeResponse, error) {
	req := c.c.NewRequest(c.name, "PersonalAccessTokenService.Revoke", in)
	out := new(PatRevokeResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *personalAccessTokenService) List(ctx context.Context, in *PatListRequest, opts ...client.CallOption) (*PatListResponse, error) {
	req := c.c.NewRequest(c.name, "PersonalAccessTokenService.List", in)
	out := new(PatListResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for PersonalAccessTokenService service

type PersonalAccessTokenServiceHandler interface {
	Generate(context.Context, *PatGenerateRequest, *PatGenerateResponse) error
	Revoke(context.Context, *PatRevokeRequest, *PatRevokeResponse) error
	List(context.Context, *PatListRequest, *PatListResponse) error
}

func RegisterPersonalAccessTokenServiceHandler(s server.Server, hdlr PersonalAccessTokenServiceHandler, opts ...server.HandlerOption) error {
	type personalAccessTokenService interface {
		Generate(ctx context.Context, in *PatGenerateRequest, out *PatGenerateResponse) error
		Revoke(ctx context.Context, in *PatRevokeRequest, out *PatRevokeResponse) error
		List(ctx context.Context, in *PatListRequest, out *PatListResponse) error
	}
	type PersonalAccessTokenService struct {
		personalAccessTokenService
	}
	h := &personalAccessTokenServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&PersonalAccessTokenService{h}, opts...))
}

type personalAccessTokenServiceHandler struct {
	PersonalAccessTokenServiceHandler
}

func (h *personalAccessTokenServiceHandler) Generate(ctx context.Context, in *PatGenerateRequest, out *PatGenerateResponse) error {
	return h.PersonalAccessTokenServiceHandler.Generate(ctx, in, out)
}

func (h *personalAccessTokenServiceHandler) Revoke(ctx context.Context, in *PatRevokeRequest, out *PatRevokeResponse) error {
	return h.PersonalAccessTokenServiceHandler.Revoke(ctx, in, out)
}

func (h *personalAccessTokenServiceHandler) List(ctx context.Context, in *PatListRequest, out *PatListResponse) error {
	return h.PersonalAccessTokenServiceHandler.List(ctx, in, out)
}
