// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.1.0
// - protoc             v3.19.1
// source: cells-config.proto

package config

import (
	context "context"
	fmt "fmt"
	context1 "github.com/pydio/cells/v4/common/service/context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

var (
	multiConfigServers = make(map[string]MultiConfigServer)
)

type NamedConfigServer interface {
	ConfigServer
	Id() string
	Name() string
}
type MultiConfigServer map[string]NamedConfigServer

func (m MultiConfigServer) Get(ctx context.Context, r *GetRequest) (*GetResponse, error) {
	for _, mm := range m {
		if mm.Name() == context1.GetServiceName(ctx) {
			return mm.Get(ctx, r)
		}
	}
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}

func (m MultiConfigServer) Set(ctx context.Context, r *SetRequest) (*SetResponse, error) {
	for _, mm := range m {
		if mm.Name() == context1.GetServiceName(ctx) {
			return mm.Set(ctx, r)
		}
	}
	return nil, status.Errorf(codes.Unimplemented, "method Set not implemented")
}

func (m MultiConfigServer) Delete(ctx context.Context, r *DeleteRequest) (*DeleteResponse, error) {
	for _, mm := range m {
		if mm.Name() == context1.GetServiceName(ctx) {
			return mm.Delete(ctx, r)
		}
	}
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}

func (m MultiConfigServer) Watch(r *WatchRequest, s Config_WatchServer) error {
	for _, mm := range m {
		if mm.Name() == context1.GetServiceName(s.Context()) {
			return mm.Watch(r, s)
		}
	}
	return status.Errorf(codes.Unimplemented, "method Watch not implemented")
}
func (m MultiConfigServer) mustEmbedUnimplementedConfigServer() {}
func RegisterMultiConfigServer(s grpc.ServiceRegistrar, srv NamedConfigServer) {
	addr := fmt.Sprintf("%p", s)
	m, ok := multiConfigServers[addr]
	if !ok {
		m = MultiConfigServer{}
		multiConfigServers[addr] = m
		RegisterConfigServer(s, m)
	}
	m[srv.Name()] = srv
}

func DeregisterMultiConfigServer(s grpc.ServiceRegistrar, name string) {
	addr := fmt.Sprintf("%p", s)
	m, ok := multiConfigServers[addr]
	if !ok {
		return
	}

	delete(m, name)
}