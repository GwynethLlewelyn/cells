// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: tree.proto

package tree

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/micro/micro/v3/service/api"
	client "github.com/micro/micro/v3/service/client"
	server "github.com/micro/micro/v3/service/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for NodeProvider service

func NewNodeProviderEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for NodeProvider service

type NodeProviderService interface {
	ReadNode(ctx context.Context, in *ReadNodeRequest, opts ...client.CallOption) (*ReadNodeResponse, error)
	ListNodes(ctx context.Context, in *ListNodesRequest, opts ...client.CallOption) (NodeProvider_ListNodesService, error)
}

type nodeProviderService struct {
	c    client.Client
	name string
}

func NewNodeProviderService(name string, c client.Client) NodeProviderService {
	return &nodeProviderService{
		c:    c,
		name: name,
	}
}

func (c *nodeProviderService) ReadNode(ctx context.Context, in *ReadNodeRequest, opts ...client.CallOption) (*ReadNodeResponse, error) {
	req := c.c.NewRequest(c.name, "NodeProvider.ReadNode", in)
	out := new(ReadNodeResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeProviderService) ListNodes(ctx context.Context, in *ListNodesRequest, opts ...client.CallOption) (NodeProvider_ListNodesService, error) {
	req := c.c.NewRequest(c.name, "NodeProvider.ListNodes", &ListNodesRequest{})
	stream, err := c.c.Stream(ctx, req, opts...)
	if err != nil {
		return nil, err
	}
	if err := stream.Send(in); err != nil {
		return nil, err
	}
	return &nodeProviderServiceListNodes{stream}, nil
}

type NodeProvider_ListNodesService interface {
	Context() context.Context
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Recv() (*ListNodesResponse, error)
}

type nodeProviderServiceListNodes struct {
	stream client.Stream
}

func (x *nodeProviderServiceListNodes) Close() error {
	return x.stream.Close()
}

func (x *nodeProviderServiceListNodes) Context() context.Context {
	return x.stream.Context()
}

func (x *nodeProviderServiceListNodes) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *nodeProviderServiceListNodes) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *nodeProviderServiceListNodes) Recv() (*ListNodesResponse, error) {
	m := new(ListNodesResponse)
	err := x.stream.Recv(m)
	if err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for NodeProvider service

type NodeProviderHandler interface {
	ReadNode(context.Context, *ReadNodeRequest, *ReadNodeResponse) error
	ListNodes(context.Context, *ListNodesRequest, NodeProvider_ListNodesStream) error
}

func RegisterNodeProviderHandler(s server.Server, hdlr NodeProviderHandler, opts ...server.HandlerOption) error {
	type nodeProvider interface {
		ReadNode(ctx context.Context, in *ReadNodeRequest, out *ReadNodeResponse) error
		ListNodes(ctx context.Context, stream server.Stream) error
	}
	type NodeProvider struct {
		nodeProvider
	}
	h := &nodeProviderHandler{hdlr}
	return s.Handle(s.NewHandler(&NodeProvider{h}, opts...))
}

type nodeProviderHandler struct {
	NodeProviderHandler
}

func (h *nodeProviderHandler) ReadNode(ctx context.Context, in *ReadNodeRequest, out *ReadNodeResponse) error {
	return h.NodeProviderHandler.ReadNode(ctx, in, out)
}

func (h *nodeProviderHandler) ListNodes(ctx context.Context, stream server.Stream) error {
	m := new(ListNodesRequest)
	if err := stream.Recv(m); err != nil {
		return err
	}
	return h.NodeProviderHandler.ListNodes(ctx, m, &nodeProviderListNodesStream{stream})
}

type NodeProvider_ListNodesStream interface {
	Context() context.Context
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Send(*ListNodesResponse) error
}

type nodeProviderListNodesStream struct {
	stream server.Stream
}

func (x *nodeProviderListNodesStream) Close() error {
	return x.stream.Close()
}

func (x *nodeProviderListNodesStream) Context() context.Context {
	return x.stream.Context()
}

func (x *nodeProviderListNodesStream) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *nodeProviderListNodesStream) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *nodeProviderListNodesStream) Send(m *ListNodesResponse) error {
	return x.stream.Send(m)
}

// Api Endpoints for NodeProviderStreamer service

func NewNodeProviderStreamerEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for NodeProviderStreamer service

type NodeProviderStreamerService interface {
	ReadNodeStream(ctx context.Context, opts ...client.CallOption) (NodeProviderStreamer_ReadNodeStreamService, error)
}

type nodeProviderStreamerService struct {
	c    client.Client
	name string
}

func NewNodeProviderStreamerService(name string, c client.Client) NodeProviderStreamerService {
	return &nodeProviderStreamerService{
		c:    c,
		name: name,
	}
}

func (c *nodeProviderStreamerService) ReadNodeStream(ctx context.Context, opts ...client.CallOption) (NodeProviderStreamer_ReadNodeStreamService, error) {
	req := c.c.NewRequest(c.name, "NodeProviderStreamer.ReadNodeStream", &ReadNodeRequest{})
	stream, err := c.c.Stream(ctx, req, opts...)
	if err != nil {
		return nil, err
	}
	return &nodeProviderStreamerServiceReadNodeStream{stream}, nil
}

type NodeProviderStreamer_ReadNodeStreamService interface {
	Context() context.Context
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Send(*ReadNodeRequest) error
	Recv() (*ReadNodeResponse, error)
}

type nodeProviderStreamerServiceReadNodeStream struct {
	stream client.Stream
}

func (x *nodeProviderStreamerServiceReadNodeStream) Close() error {
	return x.stream.Close()
}

func (x *nodeProviderStreamerServiceReadNodeStream) Context() context.Context {
	return x.stream.Context()
}

func (x *nodeProviderStreamerServiceReadNodeStream) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *nodeProviderStreamerServiceReadNodeStream) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *nodeProviderStreamerServiceReadNodeStream) Send(m *ReadNodeRequest) error {
	return x.stream.Send(m)
}

func (x *nodeProviderStreamerServiceReadNodeStream) Recv() (*ReadNodeResponse, error) {
	m := new(ReadNodeResponse)
	err := x.stream.Recv(m)
	if err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for NodeProviderStreamer service

type NodeProviderStreamerHandler interface {
	ReadNodeStream(context.Context, NodeProviderStreamer_ReadNodeStreamStream) error
}

func RegisterNodeProviderStreamerHandler(s server.Server, hdlr NodeProviderStreamerHandler, opts ...server.HandlerOption) error {
	type nodeProviderStreamer interface {
		ReadNodeStream(ctx context.Context, stream server.Stream) error
	}
	type NodeProviderStreamer struct {
		nodeProviderStreamer
	}
	h := &nodeProviderStreamerHandler{hdlr}
	return s.Handle(s.NewHandler(&NodeProviderStreamer{h}, opts...))
}

type nodeProviderStreamerHandler struct {
	NodeProviderStreamerHandler
}

func (h *nodeProviderStreamerHandler) ReadNodeStream(ctx context.Context, stream server.Stream) error {
	return h.NodeProviderStreamerHandler.ReadNodeStream(ctx, &nodeProviderStreamerReadNodeStreamStream{stream})
}

type NodeProviderStreamer_ReadNodeStreamStream interface {
	Context() context.Context
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Send(*ReadNodeResponse) error
	Recv() (*ReadNodeRequest, error)
}

type nodeProviderStreamerReadNodeStreamStream struct {
	stream server.Stream
}

func (x *nodeProviderStreamerReadNodeStreamStream) Close() error {
	return x.stream.Close()
}

func (x *nodeProviderStreamerReadNodeStreamStream) Context() context.Context {
	return x.stream.Context()
}

func (x *nodeProviderStreamerReadNodeStreamStream) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *nodeProviderStreamerReadNodeStreamStream) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *nodeProviderStreamerReadNodeStreamStream) Send(m *ReadNodeResponse) error {
	return x.stream.Send(m)
}

func (x *nodeProviderStreamerReadNodeStreamStream) Recv() (*ReadNodeRequest, error) {
	m := new(ReadNodeRequest)
	if err := x.stream.Recv(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Api Endpoints for NodeChangesStreamer service

func NewNodeChangesStreamerEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for NodeChangesStreamer service

type NodeChangesStreamerService interface {
	StreamChanges(ctx context.Context, in *StreamChangesRequest, opts ...client.CallOption) (NodeChangesStreamer_StreamChangesService, error)
}

type nodeChangesStreamerService struct {
	c    client.Client
	name string
}

func NewNodeChangesStreamerService(name string, c client.Client) NodeChangesStreamerService {
	return &nodeChangesStreamerService{
		c:    c,
		name: name,
	}
}

func (c *nodeChangesStreamerService) StreamChanges(ctx context.Context, in *StreamChangesRequest, opts ...client.CallOption) (NodeChangesStreamer_StreamChangesService, error) {
	req := c.c.NewRequest(c.name, "NodeChangesStreamer.StreamChanges", &StreamChangesRequest{})
	stream, err := c.c.Stream(ctx, req, opts...)
	if err != nil {
		return nil, err
	}
	if err := stream.Send(in); err != nil {
		return nil, err
	}
	return &nodeChangesStreamerServiceStreamChanges{stream}, nil
}

type NodeChangesStreamer_StreamChangesService interface {
	Context() context.Context
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Recv() (*NodeChangeEvent, error)
}

type nodeChangesStreamerServiceStreamChanges struct {
	stream client.Stream
}

func (x *nodeChangesStreamerServiceStreamChanges) Close() error {
	return x.stream.Close()
}

func (x *nodeChangesStreamerServiceStreamChanges) Context() context.Context {
	return x.stream.Context()
}

func (x *nodeChangesStreamerServiceStreamChanges) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *nodeChangesStreamerServiceStreamChanges) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *nodeChangesStreamerServiceStreamChanges) Recv() (*NodeChangeEvent, error) {
	m := new(NodeChangeEvent)
	err := x.stream.Recv(m)
	if err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for NodeChangesStreamer service

type NodeChangesStreamerHandler interface {
	StreamChanges(context.Context, *StreamChangesRequest, NodeChangesStreamer_StreamChangesStream) error
}

func RegisterNodeChangesStreamerHandler(s server.Server, hdlr NodeChangesStreamerHandler, opts ...server.HandlerOption) error {
	type nodeChangesStreamer interface {
		StreamChanges(ctx context.Context, stream server.Stream) error
	}
	type NodeChangesStreamer struct {
		nodeChangesStreamer
	}
	h := &nodeChangesStreamerHandler{hdlr}
	return s.Handle(s.NewHandler(&NodeChangesStreamer{h}, opts...))
}

type nodeChangesStreamerHandler struct {
	NodeChangesStreamerHandler
}

func (h *nodeChangesStreamerHandler) StreamChanges(ctx context.Context, stream server.Stream) error {
	m := new(StreamChangesRequest)
	if err := stream.Recv(m); err != nil {
		return err
	}
	return h.NodeChangesStreamerHandler.StreamChanges(ctx, m, &nodeChangesStreamerStreamChangesStream{stream})
}

type NodeChangesStreamer_StreamChangesStream interface {
	Context() context.Context
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Send(*NodeChangeEvent) error
}

type nodeChangesStreamerStreamChangesStream struct {
	stream server.Stream
}

func (x *nodeChangesStreamerStreamChangesStream) Close() error {
	return x.stream.Close()
}

func (x *nodeChangesStreamerStreamChangesStream) Context() context.Context {
	return x.stream.Context()
}

func (x *nodeChangesStreamerStreamChangesStream) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *nodeChangesStreamerStreamChangesStream) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *nodeChangesStreamerStreamChangesStream) Send(m *NodeChangeEvent) error {
	return x.stream.Send(m)
}

// Api Endpoints for NodeReceiver service

func NewNodeReceiverEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for NodeReceiver service

type NodeReceiverService interface {
	CreateNode(ctx context.Context, in *CreateNodeRequest, opts ...client.CallOption) (*CreateNodeResponse, error)
	UpdateNode(ctx context.Context, in *UpdateNodeRequest, opts ...client.CallOption) (*UpdateNodeResponse, error)
	DeleteNode(ctx context.Context, in *DeleteNodeRequest, opts ...client.CallOption) (*DeleteNodeResponse, error)
}

type nodeReceiverService struct {
	c    client.Client
	name string
}

func NewNodeReceiverService(name string, c client.Client) NodeReceiverService {
	return &nodeReceiverService{
		c:    c,
		name: name,
	}
}

func (c *nodeReceiverService) CreateNode(ctx context.Context, in *CreateNodeRequest, opts ...client.CallOption) (*CreateNodeResponse, error) {
	req := c.c.NewRequest(c.name, "NodeReceiver.CreateNode", in)
	out := new(CreateNodeResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeReceiverService) UpdateNode(ctx context.Context, in *UpdateNodeRequest, opts ...client.CallOption) (*UpdateNodeResponse, error) {
	req := c.c.NewRequest(c.name, "NodeReceiver.UpdateNode", in)
	out := new(UpdateNodeResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeReceiverService) DeleteNode(ctx context.Context, in *DeleteNodeRequest, opts ...client.CallOption) (*DeleteNodeResponse, error) {
	req := c.c.NewRequest(c.name, "NodeReceiver.DeleteNode", in)
	out := new(DeleteNodeResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for NodeReceiver service

type NodeReceiverHandler interface {
	CreateNode(context.Context, *CreateNodeRequest, *CreateNodeResponse) error
	UpdateNode(context.Context, *UpdateNodeRequest, *UpdateNodeResponse) error
	DeleteNode(context.Context, *DeleteNodeRequest, *DeleteNodeResponse) error
}

func RegisterNodeReceiverHandler(s server.Server, hdlr NodeReceiverHandler, opts ...server.HandlerOption) error {
	type nodeReceiver interface {
		CreateNode(ctx context.Context, in *CreateNodeRequest, out *CreateNodeResponse) error
		UpdateNode(ctx context.Context, in *UpdateNodeRequest, out *UpdateNodeResponse) error
		DeleteNode(ctx context.Context, in *DeleteNodeRequest, out *DeleteNodeResponse) error
	}
	type NodeReceiver struct {
		nodeReceiver
	}
	h := &nodeReceiverHandler{hdlr}
	return s.Handle(s.NewHandler(&NodeReceiver{h}, opts...))
}

type nodeReceiverHandler struct {
	NodeReceiverHandler
}

func (h *nodeReceiverHandler) CreateNode(ctx context.Context, in *CreateNodeRequest, out *CreateNodeResponse) error {
	return h.NodeReceiverHandler.CreateNode(ctx, in, out)
}

func (h *nodeReceiverHandler) UpdateNode(ctx context.Context, in *UpdateNodeRequest, out *UpdateNodeResponse) error {
	return h.NodeReceiverHandler.UpdateNode(ctx, in, out)
}

func (h *nodeReceiverHandler) DeleteNode(ctx context.Context, in *DeleteNodeRequest, out *DeleteNodeResponse) error {
	return h.NodeReceiverHandler.DeleteNode(ctx, in, out)
}

// Api Endpoints for NodeReceiverStream service

func NewNodeReceiverStreamEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for NodeReceiverStream service

type NodeReceiverStreamService interface {
	CreateNodeStream(ctx context.Context, opts ...client.CallOption) (NodeReceiverStream_CreateNodeStreamService, error)
	UpdateNodeStream(ctx context.Context, opts ...client.CallOption) (NodeReceiverStream_UpdateNodeStreamService, error)
	DeleteNodeStream(ctx context.Context, opts ...client.CallOption) (NodeReceiverStream_DeleteNodeStreamService, error)
}

type nodeReceiverStreamService struct {
	c    client.Client
	name string
}

func NewNodeReceiverStreamService(name string, c client.Client) NodeReceiverStreamService {
	return &nodeReceiverStreamService{
		c:    c,
		name: name,
	}
}

func (c *nodeReceiverStreamService) CreateNodeStream(ctx context.Context, opts ...client.CallOption) (NodeReceiverStream_CreateNodeStreamService, error) {
	req := c.c.NewRequest(c.name, "NodeReceiverStream.CreateNodeStream", &CreateNodeRequest{})
	stream, err := c.c.Stream(ctx, req, opts...)
	if err != nil {
		return nil, err
	}
	return &nodeReceiverStreamServiceCreateNodeStream{stream}, nil
}

type NodeReceiverStream_CreateNodeStreamService interface {
	Context() context.Context
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Send(*CreateNodeRequest) error
	Recv() (*CreateNodeResponse, error)
}

type nodeReceiverStreamServiceCreateNodeStream struct {
	stream client.Stream
}

func (x *nodeReceiverStreamServiceCreateNodeStream) Close() error {
	return x.stream.Close()
}

func (x *nodeReceiverStreamServiceCreateNodeStream) Context() context.Context {
	return x.stream.Context()
}

func (x *nodeReceiverStreamServiceCreateNodeStream) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *nodeReceiverStreamServiceCreateNodeStream) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *nodeReceiverStreamServiceCreateNodeStream) Send(m *CreateNodeRequest) error {
	return x.stream.Send(m)
}

func (x *nodeReceiverStreamServiceCreateNodeStream) Recv() (*CreateNodeResponse, error) {
	m := new(CreateNodeResponse)
	err := x.stream.Recv(m)
	if err != nil {
		return nil, err
	}
	return m, nil
}

func (c *nodeReceiverStreamService) UpdateNodeStream(ctx context.Context, opts ...client.CallOption) (NodeReceiverStream_UpdateNodeStreamService, error) {
	req := c.c.NewRequest(c.name, "NodeReceiverStream.UpdateNodeStream", &UpdateNodeRequest{})
	stream, err := c.c.Stream(ctx, req, opts...)
	if err != nil {
		return nil, err
	}
	return &nodeReceiverStreamServiceUpdateNodeStream{stream}, nil
}

type NodeReceiverStream_UpdateNodeStreamService interface {
	Context() context.Context
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Send(*UpdateNodeRequest) error
	Recv() (*UpdateNodeResponse, error)
}

type nodeReceiverStreamServiceUpdateNodeStream struct {
	stream client.Stream
}

func (x *nodeReceiverStreamServiceUpdateNodeStream) Close() error {
	return x.stream.Close()
}

func (x *nodeReceiverStreamServiceUpdateNodeStream) Context() context.Context {
	return x.stream.Context()
}

func (x *nodeReceiverStreamServiceUpdateNodeStream) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *nodeReceiverStreamServiceUpdateNodeStream) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *nodeReceiverStreamServiceUpdateNodeStream) Send(m *UpdateNodeRequest) error {
	return x.stream.Send(m)
}

func (x *nodeReceiverStreamServiceUpdateNodeStream) Recv() (*UpdateNodeResponse, error) {
	m := new(UpdateNodeResponse)
	err := x.stream.Recv(m)
	if err != nil {
		return nil, err
	}
	return m, nil
}

func (c *nodeReceiverStreamService) DeleteNodeStream(ctx context.Context, opts ...client.CallOption) (NodeReceiverStream_DeleteNodeStreamService, error) {
	req := c.c.NewRequest(c.name, "NodeReceiverStream.DeleteNodeStream", &DeleteNodeRequest{})
	stream, err := c.c.Stream(ctx, req, opts...)
	if err != nil {
		return nil, err
	}
	return &nodeReceiverStreamServiceDeleteNodeStream{stream}, nil
}

type NodeReceiverStream_DeleteNodeStreamService interface {
	Context() context.Context
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Send(*DeleteNodeRequest) error
	Recv() (*DeleteNodeResponse, error)
}

type nodeReceiverStreamServiceDeleteNodeStream struct {
	stream client.Stream
}

func (x *nodeReceiverStreamServiceDeleteNodeStream) Close() error {
	return x.stream.Close()
}

func (x *nodeReceiverStreamServiceDeleteNodeStream) Context() context.Context {
	return x.stream.Context()
}

func (x *nodeReceiverStreamServiceDeleteNodeStream) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *nodeReceiverStreamServiceDeleteNodeStream) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *nodeReceiverStreamServiceDeleteNodeStream) Send(m *DeleteNodeRequest) error {
	return x.stream.Send(m)
}

func (x *nodeReceiverStreamServiceDeleteNodeStream) Recv() (*DeleteNodeResponse, error) {
	m := new(DeleteNodeResponse)
	err := x.stream.Recv(m)
	if err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for NodeReceiverStream service

type NodeReceiverStreamHandler interface {
	CreateNodeStream(context.Context, NodeReceiverStream_CreateNodeStreamStream) error
	UpdateNodeStream(context.Context, NodeReceiverStream_UpdateNodeStreamStream) error
	DeleteNodeStream(context.Context, NodeReceiverStream_DeleteNodeStreamStream) error
}

func RegisterNodeReceiverStreamHandler(s server.Server, hdlr NodeReceiverStreamHandler, opts ...server.HandlerOption) error {
	type nodeReceiverStream interface {
		CreateNodeStream(ctx context.Context, stream server.Stream) error
		UpdateNodeStream(ctx context.Context, stream server.Stream) error
		DeleteNodeStream(ctx context.Context, stream server.Stream) error
	}
	type NodeReceiverStream struct {
		nodeReceiverStream
	}
	h := &nodeReceiverStreamHandler{hdlr}
	return s.Handle(s.NewHandler(&NodeReceiverStream{h}, opts...))
}

type nodeReceiverStreamHandler struct {
	NodeReceiverStreamHandler
}

func (h *nodeReceiverStreamHandler) CreateNodeStream(ctx context.Context, stream server.Stream) error {
	return h.NodeReceiverStreamHandler.CreateNodeStream(ctx, &nodeReceiverStreamCreateNodeStreamStream{stream})
}

type NodeReceiverStream_CreateNodeStreamStream interface {
	Context() context.Context
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Send(*CreateNodeResponse) error
	Recv() (*CreateNodeRequest, error)
}

type nodeReceiverStreamCreateNodeStreamStream struct {
	stream server.Stream
}

func (x *nodeReceiverStreamCreateNodeStreamStream) Close() error {
	return x.stream.Close()
}

func (x *nodeReceiverStreamCreateNodeStreamStream) Context() context.Context {
	return x.stream.Context()
}

func (x *nodeReceiverStreamCreateNodeStreamStream) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *nodeReceiverStreamCreateNodeStreamStream) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *nodeReceiverStreamCreateNodeStreamStream) Send(m *CreateNodeResponse) error {
	return x.stream.Send(m)
}

func (x *nodeReceiverStreamCreateNodeStreamStream) Recv() (*CreateNodeRequest, error) {
	m := new(CreateNodeRequest)
	if err := x.stream.Recv(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (h *nodeReceiverStreamHandler) UpdateNodeStream(ctx context.Context, stream server.Stream) error {
	return h.NodeReceiverStreamHandler.UpdateNodeStream(ctx, &nodeReceiverStreamUpdateNodeStreamStream{stream})
}

type NodeReceiverStream_UpdateNodeStreamStream interface {
	Context() context.Context
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Send(*UpdateNodeResponse) error
	Recv() (*UpdateNodeRequest, error)
}

type nodeReceiverStreamUpdateNodeStreamStream struct {
	stream server.Stream
}

func (x *nodeReceiverStreamUpdateNodeStreamStream) Close() error {
	return x.stream.Close()
}

func (x *nodeReceiverStreamUpdateNodeStreamStream) Context() context.Context {
	return x.stream.Context()
}

func (x *nodeReceiverStreamUpdateNodeStreamStream) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *nodeReceiverStreamUpdateNodeStreamStream) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *nodeReceiverStreamUpdateNodeStreamStream) Send(m *UpdateNodeResponse) error {
	return x.stream.Send(m)
}

func (x *nodeReceiverStreamUpdateNodeStreamStream) Recv() (*UpdateNodeRequest, error) {
	m := new(UpdateNodeRequest)
	if err := x.stream.Recv(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (h *nodeReceiverStreamHandler) DeleteNodeStream(ctx context.Context, stream server.Stream) error {
	return h.NodeReceiverStreamHandler.DeleteNodeStream(ctx, &nodeReceiverStreamDeleteNodeStreamStream{stream})
}

type NodeReceiverStream_DeleteNodeStreamStream interface {
	Context() context.Context
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Send(*DeleteNodeResponse) error
	Recv() (*DeleteNodeRequest, error)
}

type nodeReceiverStreamDeleteNodeStreamStream struct {
	stream server.Stream
}

func (x *nodeReceiverStreamDeleteNodeStreamStream) Close() error {
	return x.stream.Close()
}

func (x *nodeReceiverStreamDeleteNodeStreamStream) Context() context.Context {
	return x.stream.Context()
}

func (x *nodeReceiverStreamDeleteNodeStreamStream) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *nodeReceiverStreamDeleteNodeStreamStream) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *nodeReceiverStreamDeleteNodeStreamStream) Send(m *DeleteNodeResponse) error {
	return x.stream.Send(m)
}

func (x *nodeReceiverStreamDeleteNodeStreamStream) Recv() (*DeleteNodeRequest, error) {
	m := new(DeleteNodeRequest)
	if err := x.stream.Recv(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Api Endpoints for SessionIndexer service

func NewSessionIndexerEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for SessionIndexer service

type SessionIndexerService interface {
	OpenSession(ctx context.Context, in *OpenSessionRequest, opts ...client.CallOption) (*OpenSessionResponse, error)
	FlushSession(ctx context.Context, in *FlushSessionRequest, opts ...client.CallOption) (*FlushSessionResponse, error)
	CloseSession(ctx context.Context, in *CloseSessionRequest, opts ...client.CallOption) (*CloseSessionResponse, error)
}

type sessionIndexerService struct {
	c    client.Client
	name string
}

func NewSessionIndexerService(name string, c client.Client) SessionIndexerService {
	return &sessionIndexerService{
		c:    c,
		name: name,
	}
}

func (c *sessionIndexerService) OpenSession(ctx context.Context, in *OpenSessionRequest, opts ...client.CallOption) (*OpenSessionResponse, error) {
	req := c.c.NewRequest(c.name, "SessionIndexer.OpenSession", in)
	out := new(OpenSessionResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sessionIndexerService) FlushSession(ctx context.Context, in *FlushSessionRequest, opts ...client.CallOption) (*FlushSessionResponse, error) {
	req := c.c.NewRequest(c.name, "SessionIndexer.FlushSession", in)
	out := new(FlushSessionResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sessionIndexerService) CloseSession(ctx context.Context, in *CloseSessionRequest, opts ...client.CallOption) (*CloseSessionResponse, error) {
	req := c.c.NewRequest(c.name, "SessionIndexer.CloseSession", in)
	out := new(CloseSessionResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for SessionIndexer service

type SessionIndexerHandler interface {
	OpenSession(context.Context, *OpenSessionRequest, *OpenSessionResponse) error
	FlushSession(context.Context, *FlushSessionRequest, *FlushSessionResponse) error
	CloseSession(context.Context, *CloseSessionRequest, *CloseSessionResponse) error
}

func RegisterSessionIndexerHandler(s server.Server, hdlr SessionIndexerHandler, opts ...server.HandlerOption) error {
	type sessionIndexer interface {
		OpenSession(ctx context.Context, in *OpenSessionRequest, out *OpenSessionResponse) error
		FlushSession(ctx context.Context, in *FlushSessionRequest, out *FlushSessionResponse) error
		CloseSession(ctx context.Context, in *CloseSessionRequest, out *CloseSessionResponse) error
	}
	type SessionIndexer struct {
		sessionIndexer
	}
	h := &sessionIndexerHandler{hdlr}
	return s.Handle(s.NewHandler(&SessionIndexer{h}, opts...))
}

type sessionIndexerHandler struct {
	SessionIndexerHandler
}

func (h *sessionIndexerHandler) OpenSession(ctx context.Context, in *OpenSessionRequest, out *OpenSessionResponse) error {
	return h.SessionIndexerHandler.OpenSession(ctx, in, out)
}

func (h *sessionIndexerHandler) FlushSession(ctx context.Context, in *FlushSessionRequest, out *FlushSessionResponse) error {
	return h.SessionIndexerHandler.FlushSession(ctx, in, out)
}

func (h *sessionIndexerHandler) CloseSession(ctx context.Context, in *CloseSessionRequest, out *CloseSessionResponse) error {
	return h.SessionIndexerHandler.CloseSession(ctx, in, out)
}

// Api Endpoints for NodeEventsProvider service

func NewNodeEventsProviderEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for NodeEventsProvider service

type NodeEventsProviderService interface {
	WatchNode(ctx context.Context, in *WatchNodeRequest, opts ...client.CallOption) (NodeEventsProvider_WatchNodeService, error)
}

type nodeEventsProviderService struct {
	c    client.Client
	name string
}

func NewNodeEventsProviderService(name string, c client.Client) NodeEventsProviderService {
	return &nodeEventsProviderService{
		c:    c,
		name: name,
	}
}

func (c *nodeEventsProviderService) WatchNode(ctx context.Context, in *WatchNodeRequest, opts ...client.CallOption) (NodeEventsProvider_WatchNodeService, error) {
	req := c.c.NewRequest(c.name, "NodeEventsProvider.WatchNode", &WatchNodeRequest{})
	stream, err := c.c.Stream(ctx, req, opts...)
	if err != nil {
		return nil, err
	}
	if err := stream.Send(in); err != nil {
		return nil, err
	}
	return &nodeEventsProviderServiceWatchNode{stream}, nil
}

type NodeEventsProvider_WatchNodeService interface {
	Context() context.Context
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Recv() (*WatchNodeResponse, error)
}

type nodeEventsProviderServiceWatchNode struct {
	stream client.Stream
}

func (x *nodeEventsProviderServiceWatchNode) Close() error {
	return x.stream.Close()
}

func (x *nodeEventsProviderServiceWatchNode) Context() context.Context {
	return x.stream.Context()
}

func (x *nodeEventsProviderServiceWatchNode) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *nodeEventsProviderServiceWatchNode) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *nodeEventsProviderServiceWatchNode) Recv() (*WatchNodeResponse, error) {
	m := new(WatchNodeResponse)
	err := x.stream.Recv(m)
	if err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for NodeEventsProvider service

type NodeEventsProviderHandler interface {
	WatchNode(context.Context, *WatchNodeRequest, NodeEventsProvider_WatchNodeStream) error
}

func RegisterNodeEventsProviderHandler(s server.Server, hdlr NodeEventsProviderHandler, opts ...server.HandlerOption) error {
	type nodeEventsProvider interface {
		WatchNode(ctx context.Context, stream server.Stream) error
	}
	type NodeEventsProvider struct {
		nodeEventsProvider
	}
	h := &nodeEventsProviderHandler{hdlr}
	return s.Handle(s.NewHandler(&NodeEventsProvider{h}, opts...))
}

type nodeEventsProviderHandler struct {
	NodeEventsProviderHandler
}

func (h *nodeEventsProviderHandler) WatchNode(ctx context.Context, stream server.Stream) error {
	m := new(WatchNodeRequest)
	if err := stream.Recv(m); err != nil {
		return err
	}
	return h.NodeEventsProviderHandler.WatchNode(ctx, m, &nodeEventsProviderWatchNodeStream{stream})
}

type NodeEventsProvider_WatchNodeStream interface {
	Context() context.Context
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Send(*WatchNodeResponse) error
}

type nodeEventsProviderWatchNodeStream struct {
	stream server.Stream
}

func (x *nodeEventsProviderWatchNodeStream) Close() error {
	return x.stream.Close()
}

func (x *nodeEventsProviderWatchNodeStream) Context() context.Context {
	return x.stream.Context()
}

func (x *nodeEventsProviderWatchNodeStream) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *nodeEventsProviderWatchNodeStream) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *nodeEventsProviderWatchNodeStream) Send(m *WatchNodeResponse) error {
	return x.stream.Send(m)
}

// Api Endpoints for Searcher service

func NewSearcherEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for Searcher service

type SearcherService interface {
	Search(ctx context.Context, in *SearchRequest, opts ...client.CallOption) (Searcher_SearchService, error)
}

type searcherService struct {
	c    client.Client
	name string
}

func NewSearcherService(name string, c client.Client) SearcherService {
	return &searcherService{
		c:    c,
		name: name,
	}
}

func (c *searcherService) Search(ctx context.Context, in *SearchRequest, opts ...client.CallOption) (Searcher_SearchService, error) {
	req := c.c.NewRequest(c.name, "Searcher.Search", &SearchRequest{})
	stream, err := c.c.Stream(ctx, req, opts...)
	if err != nil {
		return nil, err
	}
	if err := stream.Send(in); err != nil {
		return nil, err
	}
	return &searcherServiceSearch{stream}, nil
}

type Searcher_SearchService interface {
	Context() context.Context
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Recv() (*SearchResponse, error)
}

type searcherServiceSearch struct {
	stream client.Stream
}

func (x *searcherServiceSearch) Close() error {
	return x.stream.Close()
}

func (x *searcherServiceSearch) Context() context.Context {
	return x.stream.Context()
}

func (x *searcherServiceSearch) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *searcherServiceSearch) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *searcherServiceSearch) Recv() (*SearchResponse, error) {
	m := new(SearchResponse)
	err := x.stream.Recv(m)
	if err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for Searcher service

type SearcherHandler interface {
	Search(context.Context, *SearchRequest, Searcher_SearchStream) error
}

func RegisterSearcherHandler(s server.Server, hdlr SearcherHandler, opts ...server.HandlerOption) error {
	type searcher interface {
		Search(ctx context.Context, stream server.Stream) error
	}
	type Searcher struct {
		searcher
	}
	h := &searcherHandler{hdlr}
	return s.Handle(s.NewHandler(&Searcher{h}, opts...))
}

type searcherHandler struct {
	SearcherHandler
}

func (h *searcherHandler) Search(ctx context.Context, stream server.Stream) error {
	m := new(SearchRequest)
	if err := stream.Recv(m); err != nil {
		return err
	}
	return h.SearcherHandler.Search(ctx, m, &searcherSearchStream{stream})
}

type Searcher_SearchStream interface {
	Context() context.Context
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Send(*SearchResponse) error
}

type searcherSearchStream struct {
	stream server.Stream
}

func (x *searcherSearchStream) Close() error {
	return x.stream.Close()
}

func (x *searcherSearchStream) Context() context.Context {
	return x.stream.Context()
}

func (x *searcherSearchStream) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *searcherSearchStream) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *searcherSearchStream) Send(m *SearchResponse) error {
	return x.stream.Send(m)
}

// Api Endpoints for NodeContentReader service

func NewNodeContentReaderEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for NodeContentReader service

type NodeContentReaderService interface {
}

type nodeContentReaderService struct {
	c    client.Client
	name string
}

func NewNodeContentReaderService(name string, c client.Client) NodeContentReaderService {
	return &nodeContentReaderService{
		c:    c,
		name: name,
	}
}

// Server API for NodeContentReader service

type NodeContentReaderHandler interface {
}

func RegisterNodeContentReaderHandler(s server.Server, hdlr NodeContentReaderHandler, opts ...server.HandlerOption) error {
	type nodeContentReader interface {
	}
	type NodeContentReader struct {
		nodeContentReader
	}
	h := &nodeContentReaderHandler{hdlr}
	return s.Handle(s.NewHandler(&NodeContentReader{h}, opts...))
}

type nodeContentReaderHandler struct {
	NodeContentReaderHandler
}

// Api Endpoints for NodeContentWriter service

func NewNodeContentWriterEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for NodeContentWriter service

type NodeContentWriterService interface {
}

type nodeContentWriterService struct {
	c    client.Client
	name string
}

func NewNodeContentWriterService(name string, c client.Client) NodeContentWriterService {
	return &nodeContentWriterService{
		c:    c,
		name: name,
	}
}

// Server API for NodeContentWriter service

type NodeContentWriterHandler interface {
}

func RegisterNodeContentWriterHandler(s server.Server, hdlr NodeContentWriterHandler, opts ...server.HandlerOption) error {
	type nodeContentWriter interface {
	}
	type NodeContentWriter struct {
		nodeContentWriter
	}
	h := &nodeContentWriterHandler{hdlr}
	return s.Handle(s.NewHandler(&NodeContentWriter{h}, opts...))
}

type nodeContentWriterHandler struct {
	NodeContentWriterHandler
}

// Api Endpoints for NodeVersioner service

func NewNodeVersionerEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for NodeVersioner service

type NodeVersionerService interface {
	CreateVersion(ctx context.Context, in *CreateVersionRequest, opts ...client.CallOption) (*CreateVersionResponse, error)
	StoreVersion(ctx context.Context, in *StoreVersionRequest, opts ...client.CallOption) (*StoreVersionResponse, error)
	ListVersions(ctx context.Context, in *ListVersionsRequest, opts ...client.CallOption) (NodeVersioner_ListVersionsService, error)
	HeadVersion(ctx context.Context, in *HeadVersionRequest, opts ...client.CallOption) (*HeadVersionResponse, error)
	PruneVersions(ctx context.Context, in *PruneVersionsRequest, opts ...client.CallOption) (*PruneVersionsResponse, error)
}

type nodeVersionerService struct {
	c    client.Client
	name string
}

func NewNodeVersionerService(name string, c client.Client) NodeVersionerService {
	return &nodeVersionerService{
		c:    c,
		name: name,
	}
}

func (c *nodeVersionerService) CreateVersion(ctx context.Context, in *CreateVersionRequest, opts ...client.CallOption) (*CreateVersionResponse, error) {
	req := c.c.NewRequest(c.name, "NodeVersioner.CreateVersion", in)
	out := new(CreateVersionResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeVersionerService) StoreVersion(ctx context.Context, in *StoreVersionRequest, opts ...client.CallOption) (*StoreVersionResponse, error) {
	req := c.c.NewRequest(c.name, "NodeVersioner.StoreVersion", in)
	out := new(StoreVersionResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeVersionerService) ListVersions(ctx context.Context, in *ListVersionsRequest, opts ...client.CallOption) (NodeVersioner_ListVersionsService, error) {
	req := c.c.NewRequest(c.name, "NodeVersioner.ListVersions", &ListVersionsRequest{})
	stream, err := c.c.Stream(ctx, req, opts...)
	if err != nil {
		return nil, err
	}
	if err := stream.Send(in); err != nil {
		return nil, err
	}
	return &nodeVersionerServiceListVersions{stream}, nil
}

type NodeVersioner_ListVersionsService interface {
	Context() context.Context
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Recv() (*ListVersionsResponse, error)
}

type nodeVersionerServiceListVersions struct {
	stream client.Stream
}

func (x *nodeVersionerServiceListVersions) Close() error {
	return x.stream.Close()
}

func (x *nodeVersionerServiceListVersions) Context() context.Context {
	return x.stream.Context()
}

func (x *nodeVersionerServiceListVersions) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *nodeVersionerServiceListVersions) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *nodeVersionerServiceListVersions) Recv() (*ListVersionsResponse, error) {
	m := new(ListVersionsResponse)
	err := x.stream.Recv(m)
	if err != nil {
		return nil, err
	}
	return m, nil
}

func (c *nodeVersionerService) HeadVersion(ctx context.Context, in *HeadVersionRequest, opts ...client.CallOption) (*HeadVersionResponse, error) {
	req := c.c.NewRequest(c.name, "NodeVersioner.HeadVersion", in)
	out := new(HeadVersionResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeVersionerService) PruneVersions(ctx context.Context, in *PruneVersionsRequest, opts ...client.CallOption) (*PruneVersionsResponse, error) {
	req := c.c.NewRequest(c.name, "NodeVersioner.PruneVersions", in)
	out := new(PruneVersionsResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for NodeVersioner service

type NodeVersionerHandler interface {
	CreateVersion(context.Context, *CreateVersionRequest, *CreateVersionResponse) error
	StoreVersion(context.Context, *StoreVersionRequest, *StoreVersionResponse) error
	ListVersions(context.Context, *ListVersionsRequest, NodeVersioner_ListVersionsStream) error
	HeadVersion(context.Context, *HeadVersionRequest, *HeadVersionResponse) error
	PruneVersions(context.Context, *PruneVersionsRequest, *PruneVersionsResponse) error
}

func RegisterNodeVersionerHandler(s server.Server, hdlr NodeVersionerHandler, opts ...server.HandlerOption) error {
	type nodeVersioner interface {
		CreateVersion(ctx context.Context, in *CreateVersionRequest, out *CreateVersionResponse) error
		StoreVersion(ctx context.Context, in *StoreVersionRequest, out *StoreVersionResponse) error
		ListVersions(ctx context.Context, stream server.Stream) error
		HeadVersion(ctx context.Context, in *HeadVersionRequest, out *HeadVersionResponse) error
		PruneVersions(ctx context.Context, in *PruneVersionsRequest, out *PruneVersionsResponse) error
	}
	type NodeVersioner struct {
		nodeVersioner
	}
	h := &nodeVersionerHandler{hdlr}
	return s.Handle(s.NewHandler(&NodeVersioner{h}, opts...))
}

type nodeVersionerHandler struct {
	NodeVersionerHandler
}

func (h *nodeVersionerHandler) CreateVersion(ctx context.Context, in *CreateVersionRequest, out *CreateVersionResponse) error {
	return h.NodeVersionerHandler.CreateVersion(ctx, in, out)
}

func (h *nodeVersionerHandler) StoreVersion(ctx context.Context, in *StoreVersionRequest, out *StoreVersionResponse) error {
	return h.NodeVersionerHandler.StoreVersion(ctx, in, out)
}

func (h *nodeVersionerHandler) ListVersions(ctx context.Context, stream server.Stream) error {
	m := new(ListVersionsRequest)
	if err := stream.Recv(m); err != nil {
		return err
	}
	return h.NodeVersionerHandler.ListVersions(ctx, m, &nodeVersionerListVersionsStream{stream})
}

type NodeVersioner_ListVersionsStream interface {
	Context() context.Context
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Send(*ListVersionsResponse) error
}

type nodeVersionerListVersionsStream struct {
	stream server.Stream
}

func (x *nodeVersionerListVersionsStream) Close() error {
	return x.stream.Close()
}

func (x *nodeVersionerListVersionsStream) Context() context.Context {
	return x.stream.Context()
}

func (x *nodeVersionerListVersionsStream) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *nodeVersionerListVersionsStream) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *nodeVersionerListVersionsStream) Send(m *ListVersionsResponse) error {
	return x.stream.Send(m)
}

func (h *nodeVersionerHandler) HeadVersion(ctx context.Context, in *HeadVersionRequest, out *HeadVersionResponse) error {
	return h.NodeVersionerHandler.HeadVersion(ctx, in, out)
}

func (h *nodeVersionerHandler) PruneVersions(ctx context.Context, in *PruneVersionsRequest, out *PruneVersionsResponse) error {
	return h.NodeVersionerHandler.PruneVersions(ctx, in, out)
}

// Api Endpoints for FileKeyManager service

func NewFileKeyManagerEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for FileKeyManager service

type FileKeyManagerService interface {
	GetEncryptionKey(ctx context.Context, in *GetEncryptionKeyRequest, opts ...client.CallOption) (*GetEncryptionKeyResponse, error)
}

type fileKeyManagerService struct {
	c    client.Client
	name string
}

func NewFileKeyManagerService(name string, c client.Client) FileKeyManagerService {
	return &fileKeyManagerService{
		c:    c,
		name: name,
	}
}

func (c *fileKeyManagerService) GetEncryptionKey(ctx context.Context, in *GetEncryptionKeyRequest, opts ...client.CallOption) (*GetEncryptionKeyResponse, error) {
	req := c.c.NewRequest(c.name, "FileKeyManager.GetEncryptionKey", in)
	out := new(GetEncryptionKeyResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for FileKeyManager service

type FileKeyManagerHandler interface {
	GetEncryptionKey(context.Context, *GetEncryptionKeyRequest, *GetEncryptionKeyResponse) error
}

func RegisterFileKeyManagerHandler(s server.Server, hdlr FileKeyManagerHandler, opts ...server.HandlerOption) error {
	type fileKeyManager interface {
		GetEncryptionKey(ctx context.Context, in *GetEncryptionKeyRequest, out *GetEncryptionKeyResponse) error
	}
	type FileKeyManager struct {
		fileKeyManager
	}
	h := &fileKeyManagerHandler{hdlr}
	return s.Handle(s.NewHandler(&FileKeyManager{h}, opts...))
}

type fileKeyManagerHandler struct {
	FileKeyManagerHandler
}

func (h *fileKeyManagerHandler) GetEncryptionKey(ctx context.Context, in *GetEncryptionKeyRequest, out *GetEncryptionKeyResponse) error {
	return h.FileKeyManagerHandler.GetEncryptionKey(ctx, in, out)
}

// Api Endpoints for SyncChanges service

func NewSyncChangesEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for SyncChanges service

type SyncChangesService interface {
	Put(ctx context.Context, opts ...client.CallOption) (SyncChanges_PutService, error)
	Search(ctx context.Context, in *SearchSyncChangeRequest, opts ...client.CallOption) (SyncChanges_SearchService, error)
}

type syncChangesService struct {
	c    client.Client
	name string
}

func NewSyncChangesService(name string, c client.Client) SyncChangesService {
	return &syncChangesService{
		c:    c,
		name: name,
	}
}

func (c *syncChangesService) Put(ctx context.Context, opts ...client.CallOption) (SyncChanges_PutService, error) {
	req := c.c.NewRequest(c.name, "SyncChanges.Put", &SyncChange{})
	stream, err := c.c.Stream(ctx, req, opts...)
	if err != nil {
		return nil, err
	}
	return &syncChangesServicePut{stream}, nil
}

type SyncChanges_PutService interface {
	Context() context.Context
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	CloseAndRecv() (*PutSyncChangeResponse, error)
	Send(*SyncChange) error
}

type syncChangesServicePut struct {
	stream client.Stream
}

func (x *syncChangesServicePut) CloseAndRecv() (*PutSyncChangeResponse, error) {
	if err := x.stream.Close(); err != nil {
		return nil, err
	}
	r := new(PutSyncChangeResponse)
	err := x.RecvMsg(r)
	return r, err
}

func (x *syncChangesServicePut) Context() context.Context {
	return x.stream.Context()
}

func (x *syncChangesServicePut) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *syncChangesServicePut) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *syncChangesServicePut) Send(m *SyncChange) error {
	return x.stream.Send(m)
}

func (c *syncChangesService) Search(ctx context.Context, in *SearchSyncChangeRequest, opts ...client.CallOption) (SyncChanges_SearchService, error) {
	req := c.c.NewRequest(c.name, "SyncChanges.Search", &SearchSyncChangeRequest{})
	stream, err := c.c.Stream(ctx, req, opts...)
	if err != nil {
		return nil, err
	}
	if err := stream.Send(in); err != nil {
		return nil, err
	}
	return &syncChangesServiceSearch{stream}, nil
}

type SyncChanges_SearchService interface {
	Context() context.Context
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Recv() (*SyncChange, error)
}

type syncChangesServiceSearch struct {
	stream client.Stream
}

func (x *syncChangesServiceSearch) Close() error {
	return x.stream.Close()
}

func (x *syncChangesServiceSearch) Context() context.Context {
	return x.stream.Context()
}

func (x *syncChangesServiceSearch) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *syncChangesServiceSearch) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *syncChangesServiceSearch) Recv() (*SyncChange, error) {
	m := new(SyncChange)
	err := x.stream.Recv(m)
	if err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for SyncChanges service

type SyncChangesHandler interface {
	Put(context.Context, SyncChanges_PutStream) error
	Search(context.Context, *SearchSyncChangeRequest, SyncChanges_SearchStream) error
}

func RegisterSyncChangesHandler(s server.Server, hdlr SyncChangesHandler, opts ...server.HandlerOption) error {
	type syncChanges interface {
		Put(ctx context.Context, stream server.Stream) error
		Search(ctx context.Context, stream server.Stream) error
	}
	type SyncChanges struct {
		syncChanges
	}
	h := &syncChangesHandler{hdlr}
	return s.Handle(s.NewHandler(&SyncChanges{h}, opts...))
}

type syncChangesHandler struct {
	SyncChangesHandler
}

func (h *syncChangesHandler) Put(ctx context.Context, stream server.Stream) error {
	return h.SyncChangesHandler.Put(ctx, &syncChangesPutStream{stream})
}

type SyncChanges_PutStream interface {
	Context() context.Context
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	SendAndClose(*PutSyncChangeResponse) error
	Recv() (*SyncChange, error)
}

type syncChangesPutStream struct {
	stream server.Stream
}

func (x *syncChangesPutStream) SendAndClose(in *PutSyncChangeResponse) error {
	if err := x.SendMsg(in); err != nil {
		return err
	}
	return x.stream.Close()
}

func (x *syncChangesPutStream) Context() context.Context {
	return x.stream.Context()
}

func (x *syncChangesPutStream) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *syncChangesPutStream) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *syncChangesPutStream) Recv() (*SyncChange, error) {
	m := new(SyncChange)
	if err := x.stream.Recv(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (h *syncChangesHandler) Search(ctx context.Context, stream server.Stream) error {
	m := new(SearchSyncChangeRequest)
	if err := stream.Recv(m); err != nil {
		return err
	}
	return h.SyncChangesHandler.Search(ctx, m, &syncChangesSearchStream{stream})
}

type SyncChanges_SearchStream interface {
	Context() context.Context
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Send(*SyncChange) error
}

type syncChangesSearchStream struct {
	stream server.Stream
}

func (x *syncChangesSearchStream) Close() error {
	return x.stream.Close()
}

func (x *syncChangesSearchStream) Context() context.Context {
	return x.stream.Context()
}

func (x *syncChangesSearchStream) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *syncChangesSearchStream) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *syncChangesSearchStream) Send(m *SyncChange) error {
	return x.stream.Send(m)
}
