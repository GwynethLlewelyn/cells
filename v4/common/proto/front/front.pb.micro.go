// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: front.proto

package front

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/micro/micro/v3/service/api"
	client "github.com/micro/micro/v3/service/client"
	server "github.com/micro/micro/v3/service/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for ManifestService service

func NewManifestServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for ManifestService service

type ManifestService interface {
	ExposedParameters(ctx context.Context, in *ExposedParametersRequest, opts ...client.CallOption) (*ExposedParametersResponse, error)
}

type manifestService struct {
	c    client.Client
	name string
}

func NewManifestService(name string, c client.Client) ManifestService {
	return &manifestService{
		c:    c,
		name: name,
	}
}

func (c *manifestService) ExposedParameters(ctx context.Context, in *ExposedParametersRequest, opts ...client.CallOption) (*ExposedParametersResponse, error) {
	req := c.c.NewRequest(c.name, "ManifestService.ExposedParameters", in)
	out := new(ExposedParametersResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for ManifestService service

type ManifestServiceHandler interface {
	ExposedParameters(context.Context, *ExposedParametersRequest, *ExposedParametersResponse) error
}

func RegisterManifestServiceHandler(s server.Server, hdlr ManifestServiceHandler, opts ...server.HandlerOption) error {
	type manifestService interface {
		ExposedParameters(ctx context.Context, in *ExposedParametersRequest, out *ExposedParametersResponse) error
	}
	type ManifestService struct {
		manifestService
	}
	h := &manifestServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&ManifestService{h}, opts...))
}

type manifestServiceHandler struct {
	ManifestServiceHandler
}

func (h *manifestServiceHandler) ExposedParameters(ctx context.Context, in *ExposedParametersRequest, out *ExposedParametersResponse) error {
	return h.ManifestServiceHandler.ExposedParameters(ctx, in, out)
}
