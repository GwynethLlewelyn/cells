// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: cells-update.proto

package update

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	_ "github.com/pydio/cells/v4/common/proto/tree"
	math "math"
)

import (
	context "context"
	api "github.com/micro/micro/v3/service/api"
	client "github.com/micro/micro/v3/service/client"
	server "github.com/micro/micro/v3/service/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for UpdateService service

func NewUpdateServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for UpdateService service

type UpdateService interface {
	UpdateRequired(ctx context.Context, in *UpdateRequest, opts ...client.CallOption) (*UpdateResponse, error)
	ApplyUpdate(ctx context.Context, in *ApplyUpdateRequest, opts ...client.CallOption) (*ApplyUpdateResponse, error)
}

type updateService struct {
	c    client.Client
	name string
}

func NewUpdateService(name string, c client.Client) UpdateService {
	return &updateService{
		c:    c,
		name: name,
	}
}

func (c *updateService) UpdateRequired(ctx context.Context, in *UpdateRequest, opts ...client.CallOption) (*UpdateResponse, error) {
	req := c.c.NewRequest(c.name, "UpdateService.UpdateRequired", in)
	out := new(UpdateResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *updateService) ApplyUpdate(ctx context.Context, in *ApplyUpdateRequest, opts ...client.CallOption) (*ApplyUpdateResponse, error) {
	req := c.c.NewRequest(c.name, "UpdateService.ApplyUpdate", in)
	out := new(ApplyUpdateResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for UpdateService service

type UpdateServiceHandler interface {
	UpdateRequired(context.Context, *UpdateRequest, *UpdateResponse) error
	ApplyUpdate(context.Context, *ApplyUpdateRequest, *ApplyUpdateResponse) error
}

func RegisterUpdateServiceHandler(s server.Server, hdlr UpdateServiceHandler, opts ...server.HandlerOption) error {
	type updateService interface {
		UpdateRequired(ctx context.Context, in *UpdateRequest, out *UpdateResponse) error
		ApplyUpdate(ctx context.Context, in *ApplyUpdateRequest, out *ApplyUpdateResponse) error
	}
	type UpdateService struct {
		updateService
	}
	h := &updateServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&UpdateService{h}, opts...))
}

type updateServiceHandler struct {
	UpdateServiceHandler
}

func (h *updateServiceHandler) UpdateRequired(ctx context.Context, in *UpdateRequest, out *UpdateResponse) error {
	return h.UpdateServiceHandler.UpdateRequired(ctx, in, out)
}

func (h *updateServiceHandler) ApplyUpdate(ctx context.Context, in *ApplyUpdateRequest, out *ApplyUpdateResponse) error {
	return h.UpdateServiceHandler.ApplyUpdate(ctx, in, out)
}

// Api Endpoints for UpdateServerService service

func NewUpdateServerServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for UpdateServerService service

type UpdateServerService interface {
	// Ask the update server if there are any available updates
	CheckForUpdate(ctx context.Context, in *UpdateRequest, opts ...client.CallOption) (*UpdateResponse, error)
	PublishPackage(ctx context.Context, in *PublishPackageRequest, opts ...client.CallOption) (*PublishPackageResponse, error)
	ListPackages(ctx context.Context, in *ListPackagesRequest, opts ...client.CallOption) (*ListPackagesResponse, error)
	DeletePackage(ctx context.Context, in *DeletePackageRequest, opts ...client.CallOption) (*DeletePackageResponse, error)
}

type updateServerService struct {
	c    client.Client
	name string
}

func NewUpdateServerService(name string, c client.Client) UpdateServerService {
	return &updateServerService{
		c:    c,
		name: name,
	}
}

func (c *updateServerService) CheckForUpdate(ctx context.Context, in *UpdateRequest, opts ...client.CallOption) (*UpdateResponse, error) {
	req := c.c.NewRequest(c.name, "UpdateServerService.CheckForUpdate", in)
	out := new(UpdateResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *updateServerService) PublishPackage(ctx context.Context, in *PublishPackageRequest, opts ...client.CallOption) (*PublishPackageResponse, error) {
	req := c.c.NewRequest(c.name, "UpdateServerService.PublishPackage", in)
	out := new(PublishPackageResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *updateServerService) ListPackages(ctx context.Context, in *ListPackagesRequest, opts ...client.CallOption) (*ListPackagesResponse, error) {
	req := c.c.NewRequest(c.name, "UpdateServerService.ListPackages", in)
	out := new(ListPackagesResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *updateServerService) DeletePackage(ctx context.Context, in *DeletePackageRequest, opts ...client.CallOption) (*DeletePackageResponse, error) {
	req := c.c.NewRequest(c.name, "UpdateServerService.DeletePackage", in)
	out := new(DeletePackageResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for UpdateServerService service

type UpdateServerServiceHandler interface {
	// Ask the update server if there are any available updates
	CheckForUpdate(context.Context, *UpdateRequest, *UpdateResponse) error
	PublishPackage(context.Context, *PublishPackageRequest, *PublishPackageResponse) error
	ListPackages(context.Context, *ListPackagesRequest, *ListPackagesResponse) error
	DeletePackage(context.Context, *DeletePackageRequest, *DeletePackageResponse) error
}

func RegisterUpdateServerServiceHandler(s server.Server, hdlr UpdateServerServiceHandler, opts ...server.HandlerOption) error {
	type updateServerService interface {
		CheckForUpdate(ctx context.Context, in *UpdateRequest, out *UpdateResponse) error
		PublishPackage(ctx context.Context, in *PublishPackageRequest, out *PublishPackageResponse) error
		ListPackages(ctx context.Context, in *ListPackagesRequest, out *ListPackagesResponse) error
		DeletePackage(ctx context.Context, in *DeletePackageRequest, out *DeletePackageResponse) error
	}
	type UpdateServerService struct {
		updateServerService
	}
	h := &updateServerServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&UpdateServerService{h}, opts...))
}

type updateServerServiceHandler struct {
	UpdateServerServiceHandler
}

func (h *updateServerServiceHandler) CheckForUpdate(ctx context.Context, in *UpdateRequest, out *UpdateResponse) error {
	return h.UpdateServerServiceHandler.CheckForUpdate(ctx, in, out)
}

func (h *updateServerServiceHandler) PublishPackage(ctx context.Context, in *PublishPackageRequest, out *PublishPackageResponse) error {
	return h.UpdateServerServiceHandler.PublishPackage(ctx, in, out)
}

func (h *updateServerServiceHandler) ListPackages(ctx context.Context, in *ListPackagesRequest, out *ListPackagesResponse) error {
	return h.UpdateServerServiceHandler.ListPackages(ctx, in, out)
}

func (h *updateServerServiceHandler) DeletePackage(ctx context.Context, in *DeletePackageRequest, out *DeletePackageResponse) error {
	return h.UpdateServerServiceHandler.DeletePackage(ctx, in, out)
}
