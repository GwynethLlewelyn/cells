// Code generated by protoc-gen-go. DO NOT EDIT.
// source: update.proto

/*
Package update is a generated protocol buffer package.

It is generated from these files:
	update.proto

It has these top-level messages:
	Package
	ApplyUpdateRequest
	ApplyUpdateResponse
	UpdateRequest
	UpdateResponse
	PublishPackageRequest
	PublishPackageResponse
	ListPackagesRequest
	ListPackagesResponse
	DeletePackageRequest
	DeletePackageResponse
*/
package update

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import tree "github.com/pydio/cells/v4/common/proto/tree"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Package_PackageStatus int32

const (
	Package_Draft    Package_PackageStatus = 0
	Package_Pending  Package_PackageStatus = 1
	Package_Released Package_PackageStatus = 2
)

var Package_PackageStatus_name = map[int32]string{
	0: "Draft",
	1: "Pending",
	2: "Released",
}
var Package_PackageStatus_value = map[string]int32{
	"Draft":    0,
	"Pending":  1,
	"Released": 2,
}

func (x Package_PackageStatus) String() string {
	return proto.EnumName(Package_PackageStatus_name, int32(x))
}
func (Package_PackageStatus) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0, 0} }

type Package struct {
	// Name of the application
	PackageName string `protobuf:"bytes,1,opt,name=PackageName" json:"PackageName,omitempty"`
	// Version of this new binary
	Version string `protobuf:"bytes,2,opt,name=Version" json:"Version,omitempty"`
	// Release date of the binary
	ReleaseDate int32 `protobuf:"varint,3,opt,name=ReleaseDate" json:"ReleaseDate,omitempty"`
	// Short human-readable description
	Label string `protobuf:"bytes,4,opt,name=Label" json:"Label,omitempty"`
	// Long human-readable description (markdown)
	Description string `protobuf:"bytes,5,opt,name=Description" json:"Description,omitempty"`
	// List or public URL of change logs
	ChangeLog string `protobuf:"bytes,6,opt,name=ChangeLog" json:"ChangeLog,omitempty"`
	// License of this package
	License string `protobuf:"bytes,16,opt,name=License" json:"License,omitempty"`
	// Https URL where to download the binary
	BinaryURL string `protobuf:"bytes,7,opt,name=BinaryURL" json:"BinaryURL,omitempty"`
	// Checksum of the binary to verify its integrity
	BinaryChecksum string `protobuf:"bytes,8,opt,name=BinaryChecksum" json:"BinaryChecksum,omitempty"`
	// Signature of the binary
	BinarySignature string `protobuf:"bytes,9,opt,name=BinarySignature" json:"BinarySignature,omitempty"`
	// Hash type used for the signature
	BinaryHashType string `protobuf:"bytes,10,opt,name=BinaryHashType" json:"BinaryHashType,omitempty"`
	// Size of the binary to download
	BinarySize int64 `protobuf:"varint,15,opt,name=BinarySize" json:"BinarySize,omitempty"`
	// GOOS value used at build time
	BinaryOS string `protobuf:"bytes,17,opt,name=BinaryOS" json:"BinaryOS,omitempty"`
	// GOARCH value used at build time
	BinaryArch string `protobuf:"bytes,18,opt,name=BinaryArch" json:"BinaryArch,omitempty"`
	// Not used : if binary is a patch
	IsPatch bool `protobuf:"varint,11,opt,name=IsPatch" json:"IsPatch,omitempty"`
	// Not used : if a patch, how to patch (bsdiff support)
	PatchAlgorithm string `protobuf:"bytes,12,opt,name=PatchAlgorithm" json:"PatchAlgorithm,omitempty"`
	// Not used : at a point we may deliver services only updates
	ServiceName string                `protobuf:"bytes,13,opt,name=ServiceName" json:"ServiceName,omitempty"`
	Status      Package_PackageStatus `protobuf:"varint,14,opt,name=Status,enum=update.Package_PackageStatus" json:"Status,omitempty"`
}

func (m *Package) Reset()                    { *m = Package{} }
func (m *Package) String() string            { return proto.CompactTextString(m) }
func (*Package) ProtoMessage()               {}
func (*Package) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Package) GetPackageName() string {
	if m != nil {
		return m.PackageName
	}
	return ""
}

func (m *Package) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

func (m *Package) GetReleaseDate() int32 {
	if m != nil {
		return m.ReleaseDate
	}
	return 0
}

func (m *Package) GetLabel() string {
	if m != nil {
		return m.Label
	}
	return ""
}

func (m *Package) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *Package) GetChangeLog() string {
	if m != nil {
		return m.ChangeLog
	}
	return ""
}

func (m *Package) GetLicense() string {
	if m != nil {
		return m.License
	}
	return ""
}

func (m *Package) GetBinaryURL() string {
	if m != nil {
		return m.BinaryURL
	}
	return ""
}

func (m *Package) GetBinaryChecksum() string {
	if m != nil {
		return m.BinaryChecksum
	}
	return ""
}

func (m *Package) GetBinarySignature() string {
	if m != nil {
		return m.BinarySignature
	}
	return ""
}

func (m *Package) GetBinaryHashType() string {
	if m != nil {
		return m.BinaryHashType
	}
	return ""
}

func (m *Package) GetBinarySize() int64 {
	if m != nil {
		return m.BinarySize
	}
	return 0
}

func (m *Package) GetBinaryOS() string {
	if m != nil {
		return m.BinaryOS
	}
	return ""
}

func (m *Package) GetBinaryArch() string {
	if m != nil {
		return m.BinaryArch
	}
	return ""
}

func (m *Package) GetIsPatch() bool {
	if m != nil {
		return m.IsPatch
	}
	return false
}

func (m *Package) GetPatchAlgorithm() string {
	if m != nil {
		return m.PatchAlgorithm
	}
	return ""
}

func (m *Package) GetServiceName() string {
	if m != nil {
		return m.ServiceName
	}
	return ""
}

func (m *Package) GetStatus() Package_PackageStatus {
	if m != nil {
		return m.Status
	}
	return Package_Draft
}

type ApplyUpdateRequest struct {
	// Version of the target binary
	TargetVersion string `protobuf:"bytes,1,opt,name=TargetVersion" json:"TargetVersion,omitempty"`
	// Name of the package if it's not the same as the current binary
	PackageName string `protobuf:"bytes,2,opt,name=PackageName" json:"PackageName,omitempty"`
}

func (m *ApplyUpdateRequest) Reset()                    { *m = ApplyUpdateRequest{} }
func (m *ApplyUpdateRequest) String() string            { return proto.CompactTextString(m) }
func (*ApplyUpdateRequest) ProtoMessage()               {}
func (*ApplyUpdateRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *ApplyUpdateRequest) GetTargetVersion() string {
	if m != nil {
		return m.TargetVersion
	}
	return ""
}

func (m *ApplyUpdateRequest) GetPackageName() string {
	if m != nil {
		return m.PackageName
	}
	return ""
}

type ApplyUpdateResponse struct {
	Success bool   `protobuf:"varint,1,opt,name=Success" json:"Success,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=Message" json:"Message,omitempty"`
}

func (m *ApplyUpdateResponse) Reset()                    { *m = ApplyUpdateResponse{} }
func (m *ApplyUpdateResponse) String() string            { return proto.CompactTextString(m) }
func (*ApplyUpdateResponse) ProtoMessage()               {}
func (*ApplyUpdateResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *ApplyUpdateResponse) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

func (m *ApplyUpdateResponse) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type UpdateRequest struct {
	// Channel name
	Channel string `protobuf:"bytes,1,opt,name=Channel" json:"Channel,omitempty"`
	// Name of the currently running application
	PackageName string `protobuf:"bytes,2,opt,name=PackageName" json:"PackageName,omitempty"`
	// Current version of the application
	CurrentVersion string `protobuf:"bytes,3,opt,name=CurrentVersion" json:"CurrentVersion,omitempty"`
	// Current GOOS
	GOOS string `protobuf:"bytes,4,opt,name=GOOS" json:"GOOS,omitempty"`
	// Current GOARCH
	GOARCH string `protobuf:"bytes,5,opt,name=GOARCH" json:"GOARCH,omitempty"`
	// Not Used : specific service to get updates for
	ServiceName string `protobuf:"bytes,6,opt,name=ServiceName" json:"ServiceName,omitempty"`
	// For enterprise version, info about the current license
	LicenseInfo map[string]string `protobuf:"bytes,7,rep,name=LicenseInfo" json:"LicenseInfo,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *UpdateRequest) Reset()                    { *m = UpdateRequest{} }
func (m *UpdateRequest) String() string            { return proto.CompactTextString(m) }
func (*UpdateRequest) ProtoMessage()               {}
func (*UpdateRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *UpdateRequest) GetChannel() string {
	if m != nil {
		return m.Channel
	}
	return ""
}

func (m *UpdateRequest) GetPackageName() string {
	if m != nil {
		return m.PackageName
	}
	return ""
}

func (m *UpdateRequest) GetCurrentVersion() string {
	if m != nil {
		return m.CurrentVersion
	}
	return ""
}

func (m *UpdateRequest) GetGOOS() string {
	if m != nil {
		return m.GOOS
	}
	return ""
}

func (m *UpdateRequest) GetGOARCH() string {
	if m != nil {
		return m.GOARCH
	}
	return ""
}

func (m *UpdateRequest) GetServiceName() string {
	if m != nil {
		return m.ServiceName
	}
	return ""
}

func (m *UpdateRequest) GetLicenseInfo() map[string]string {
	if m != nil {
		return m.LicenseInfo
	}
	return nil
}

type UpdateResponse struct {
	Channel string `protobuf:"bytes,1,opt,name=Channel" json:"Channel,omitempty"`
	// List of available binaries
	AvailableBinaries []*Package `protobuf:"bytes,2,rep,name=AvailableBinaries" json:"AvailableBinaries,omitempty"`
}

func (m *UpdateResponse) Reset()                    { *m = UpdateResponse{} }
func (m *UpdateResponse) String() string            { return proto.CompactTextString(m) }
func (*UpdateResponse) ProtoMessage()               {}
func (*UpdateResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *UpdateResponse) GetChannel() string {
	if m != nil {
		return m.Channel
	}
	return ""
}

func (m *UpdateResponse) GetAvailableBinaries() []*Package {
	if m != nil {
		return m.AvailableBinaries
	}
	return nil
}

type PublishPackageRequest struct {
	Channel string   `protobuf:"bytes,1,opt,name=Channel" json:"Channel,omitempty"`
	Package *Package `protobuf:"bytes,2,opt,name=Package" json:"Package,omitempty"`
	// Used internally to map to an existing file
	Node *tree.Node `protobuf:"bytes,3,opt,name=Node" json:"Node,omitempty"`
}

func (m *PublishPackageRequest) Reset()                    { *m = PublishPackageRequest{} }
func (m *PublishPackageRequest) String() string            { return proto.CompactTextString(m) }
func (*PublishPackageRequest) ProtoMessage()               {}
func (*PublishPackageRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *PublishPackageRequest) GetChannel() string {
	if m != nil {
		return m.Channel
	}
	return ""
}

func (m *PublishPackageRequest) GetPackage() *Package {
	if m != nil {
		return m.Package
	}
	return nil
}

func (m *PublishPackageRequest) GetNode() *tree.Node {
	if m != nil {
		return m.Node
	}
	return nil
}

type PublishPackageResponse struct {
	Success bool     `protobuf:"varint,1,opt,name=Success" json:"Success,omitempty"`
	Package *Package `protobuf:"bytes,2,opt,name=Package" json:"Package,omitempty"`
}

func (m *PublishPackageResponse) Reset()                    { *m = PublishPackageResponse{} }
func (m *PublishPackageResponse) String() string            { return proto.CompactTextString(m) }
func (*PublishPackageResponse) ProtoMessage()               {}
func (*PublishPackageResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *PublishPackageResponse) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

func (m *PublishPackageResponse) GetPackage() *Package {
	if m != nil {
		return m.Package
	}
	return nil
}

type ListPackagesRequest struct {
	Channel     string `protobuf:"bytes,1,opt,name=Channel" json:"Channel,omitempty"`
	PackageName string `protobuf:"bytes,2,opt,name=PackageName" json:"PackageName,omitempty"`
}

func (m *ListPackagesRequest) Reset()                    { *m = ListPackagesRequest{} }
func (m *ListPackagesRequest) String() string            { return proto.CompactTextString(m) }
func (*ListPackagesRequest) ProtoMessage()               {}
func (*ListPackagesRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *ListPackagesRequest) GetChannel() string {
	if m != nil {
		return m.Channel
	}
	return ""
}

func (m *ListPackagesRequest) GetPackageName() string {
	if m != nil {
		return m.PackageName
	}
	return ""
}

type ListPackagesResponse struct {
	Packages []*Package `protobuf:"bytes,1,rep,name=Packages" json:"Packages,omitempty"`
}

func (m *ListPackagesResponse) Reset()                    { *m = ListPackagesResponse{} }
func (m *ListPackagesResponse) String() string            { return proto.CompactTextString(m) }
func (*ListPackagesResponse) ProtoMessage()               {}
func (*ListPackagesResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *ListPackagesResponse) GetPackages() []*Package {
	if m != nil {
		return m.Packages
	}
	return nil
}

type DeletePackageRequest struct {
	Channel     string `protobuf:"bytes,1,opt,name=Channel" json:"Channel,omitempty"`
	PackageName string `protobuf:"bytes,2,opt,name=PackageName" json:"PackageName,omitempty"`
	Version     string `protobuf:"bytes,3,opt,name=Version" json:"Version,omitempty"`
	BinaryOS    string `protobuf:"bytes,4,opt,name=BinaryOS" json:"BinaryOS,omitempty"`
	BinaryArch  string `protobuf:"bytes,5,opt,name=BinaryArch" json:"BinaryArch,omitempty"`
}

func (m *DeletePackageRequest) Reset()                    { *m = DeletePackageRequest{} }
func (m *DeletePackageRequest) String() string            { return proto.CompactTextString(m) }
func (*DeletePackageRequest) ProtoMessage()               {}
func (*DeletePackageRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *DeletePackageRequest) GetChannel() string {
	if m != nil {
		return m.Channel
	}
	return ""
}

func (m *DeletePackageRequest) GetPackageName() string {
	if m != nil {
		return m.PackageName
	}
	return ""
}

func (m *DeletePackageRequest) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

func (m *DeletePackageRequest) GetBinaryOS() string {
	if m != nil {
		return m.BinaryOS
	}
	return ""
}

func (m *DeletePackageRequest) GetBinaryArch() string {
	if m != nil {
		return m.BinaryArch
	}
	return ""
}

type DeletePackageResponse struct {
	Success bool `protobuf:"varint,2,opt,name=Success" json:"Success,omitempty"`
}

func (m *DeletePackageResponse) Reset()                    { *m = DeletePackageResponse{} }
func (m *DeletePackageResponse) String() string            { return proto.CompactTextString(m) }
func (*DeletePackageResponse) ProtoMessage()               {}
func (*DeletePackageResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *DeletePackageResponse) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

func init() {
	proto.RegisterType((*Package)(nil), "update.Package")
	proto.RegisterType((*ApplyUpdateRequest)(nil), "update.ApplyUpdateRequest")
	proto.RegisterType((*ApplyUpdateResponse)(nil), "update.ApplyUpdateResponse")
	proto.RegisterType((*UpdateRequest)(nil), "update.UpdateRequest")
	proto.RegisterType((*UpdateResponse)(nil), "update.UpdateResponse")
	proto.RegisterType((*PublishPackageRequest)(nil), "update.PublishPackageRequest")
	proto.RegisterType((*PublishPackageResponse)(nil), "update.PublishPackageResponse")
	proto.RegisterType((*ListPackagesRequest)(nil), "update.ListPackagesRequest")
	proto.RegisterType((*ListPackagesResponse)(nil), "update.ListPackagesResponse")
	proto.RegisterType((*DeletePackageRequest)(nil), "update.DeletePackageRequest")
	proto.RegisterType((*DeletePackageResponse)(nil), "update.DeletePackageResponse")
	proto.RegisterEnum("update.Package_PackageStatus", Package_PackageStatus_name, Package_PackageStatus_value)
}

func init() { proto.RegisterFile("update.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 898 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x56, 0xdd, 0x6e, 0xe3, 0x44,
	0x14, 0xc6, 0x49, 0xf3, 0xd3, 0x93, 0x26, 0xcd, 0x4e, 0x7f, 0x34, 0x32, 0xbb, 0x55, 0x64, 0xa1,
	0x55, 0x10, 0x22, 0x11, 0x41, 0x2b, 0x10, 0x12, 0xa0, 0x90, 0xb2, 0xdb, 0x4a, 0x61, 0x53, 0x9c,
	0x5d, 0xae, 0xe0, 0x62, 0xe2, 0x9c, 0x75, 0xac, 0x3a, 0x76, 0xd6, 0x33, 0x2e, 0x0a, 0xe2, 0x41,
	0xb8, 0xe1, 0x9e, 0xc7, 0xe0, 0x9e, 0x97, 0x42, 0x9e, 0x19, 0x27, 0xb6, 0x93, 0xd2, 0x45, 0xda,
	0x9b, 0x76, 0xce, 0x77, 0x7e, 0x3d, 0xe7, 0x3b, 0x67, 0x02, 0x47, 0xf1, 0x6a, 0xce, 0x04, 0xf6,
	0x56, 0x51, 0x28, 0x42, 0x52, 0x55, 0x92, 0xf9, 0x85, 0xeb, 0x89, 0x45, 0x3c, 0xeb, 0x39, 0xe1,
	0xb2, 0xbf, 0x5a, 0xcf, 0xbd, 0xb0, 0xef, 0xa0, 0xef, 0xf3, 0x4f, 0x03, 0xfc, 0xb5, 0xef, 0x84,
	0xcb, 0x65, 0x18, 0xf4, 0xa5, 0x43, 0x5f, 0x44, 0x88, 0xf2, 0x8f, 0x0a, 0x60, 0xfd, 0x59, 0x81,
	0xda, 0x0d, 0x73, 0x6e, 0x99, 0x8b, 0xa4, 0x03, 0x0d, 0x7d, 0x7c, 0xc9, 0x96, 0x48, 0x8d, 0x8e,
	0xd1, 0x3d, 0xb4, 0xb3, 0x10, 0xa1, 0x50, 0xfb, 0x09, 0x23, 0xee, 0x85, 0x01, 0x2d, 0x49, 0x6d,
	0x2a, 0x26, 0xbe, 0x36, 0xfa, 0xc8, 0x38, 0x5e, 0x32, 0x81, 0xb4, 0xdc, 0x31, 0xba, 0x15, 0x3b,
	0x0b, 0x91, 0x53, 0xa8, 0x8c, 0xd9, 0x0c, 0x7d, 0x7a, 0x20, 0x3d, 0x95, 0x90, 0xf8, 0x5d, 0x22,
	0x77, 0x22, 0x6f, 0x25, 0x92, 0xa8, 0x15, 0x95, 0x33, 0x03, 0x91, 0xc7, 0x70, 0x38, 0x5a, 0xb0,
	0xc0, 0xc5, 0x71, 0xe8, 0xd2, 0xaa, 0xd4, 0x6f, 0x81, 0xa4, 0xa2, 0xb1, 0xe7, 0x60, 0xc0, 0x91,
	0xb6, 0x55, 0x45, 0x5a, 0x4c, 0xfc, 0xbe, 0xf3, 0x02, 0x16, 0xad, 0x5f, 0xdb, 0x63, 0x5a, 0x53,
	0x7e, 0x1b, 0x80, 0x3c, 0x85, 0x96, 0x12, 0x46, 0x0b, 0x74, 0x6e, 0x79, 0xbc, 0xa4, 0x75, 0x69,
	0x52, 0x40, 0x49, 0x17, 0x8e, 0x15, 0x32, 0xf5, 0xdc, 0x80, 0x89, 0x38, 0x42, 0x7a, 0x28, 0x0d,
	0x8b, 0xf0, 0x36, 0xe2, 0x15, 0xe3, 0x8b, 0x57, 0xeb, 0x15, 0x52, 0xc8, 0x46, 0x4c, 0x51, 0x72,
	0x01, 0x90, 0xba, 0xfe, 0x86, 0xf4, 0xb8, 0x63, 0x74, 0xcb, 0x76, 0x06, 0x21, 0x26, 0xd4, 0x95,
	0x34, 0x99, 0xd2, 0x47, 0x32, 0xc2, 0x46, 0xde, 0xfa, 0x0e, 0x23, 0x67, 0x41, 0x89, 0xd4, 0x66,
	0x90, 0xe4, 0x36, 0xae, 0xf9, 0x0d, 0x13, 0xce, 0x82, 0x36, 0x3a, 0x46, 0xb7, 0x6e, 0xa7, 0x62,
	0x52, 0x9d, 0x3c, 0x0c, 0x7d, 0x37, 0x8c, 0x3c, 0xb1, 0x58, 0xd2, 0x23, 0x55, 0x5d, 0x1e, 0x4d,
	0xfa, 0x31, 0xc5, 0xe8, 0xce, 0x73, 0x14, 0x07, 0x9a, 0xaa, 0x1f, 0x19, 0x88, 0x3c, 0x83, 0xea,
	0x54, 0x30, 0x11, 0x73, 0xda, 0xea, 0x18, 0xdd, 0xd6, 0xe0, 0x49, 0x4f, 0x33, 0x52, 0x13, 0x25,
	0xfd, 0xaf, 0x8c, 0x6c, 0x6d, 0x6c, 0x3d, 0x83, 0x66, 0x4e, 0x41, 0x0e, 0xa1, 0x72, 0x19, 0xb1,
	0x37, 0xa2, 0xfd, 0x01, 0x69, 0x40, 0xed, 0x06, 0x83, 0xb9, 0x17, 0xb8, 0x6d, 0x83, 0x1c, 0x41,
	0x5d, 0xd3, 0x66, 0xde, 0x2e, 0x59, 0x3f, 0x03, 0x19, 0xae, 0x56, 0xfe, 0xfa, 0xb5, 0xcc, 0x61,
	0xe3, 0xdb, 0x18, 0xb9, 0x20, 0x1f, 0x41, 0xf3, 0x15, 0x8b, 0x5c, 0x14, 0x29, 0x1b, 0x15, 0x57,
	0xf3, 0x60, 0x91, 0xcf, 0xa5, 0x1d, 0x3e, 0x5b, 0xd7, 0x70, 0x92, 0x8b, 0xce, 0x57, 0x61, 0x42,
	0x1d, 0x0a, 0xb5, 0x69, 0xec, 0x38, 0xc8, 0xb9, 0x0c, 0x5c, 0xb7, 0x53, 0x31, 0xd1, 0xfc, 0x80,
	0x9c, 0x33, 0x37, 0x0d, 0x97, 0x8a, 0xd6, 0x3f, 0x25, 0x68, 0xe6, 0x8b, 0xa4, 0x50, 0x4b, 0x78,
	0x1a, 0xa0, 0xaf, 0xcb, 0x4b, 0xc5, 0x87, 0x0b, 0x4b, 0xda, 0x35, 0x8a, 0xa3, 0x08, 0x83, 0xcd,
	0x17, 0x96, 0x55, 0xbb, 0xf2, 0x28, 0x21, 0x70, 0xf0, 0x62, 0x32, 0x99, 0xea, 0x99, 0x92, 0x67,
	0x72, 0x0e, 0xd5, 0x17, 0x93, 0xa1, 0x3d, 0xba, 0xd2, 0xd3, 0xa4, 0xa5, 0x62, 0x6b, 0xab, 0xbb,
	0xad, 0xbd, 0x82, 0x86, 0x9e, 0x9e, 0xeb, 0xe0, 0x4d, 0x48, 0x6b, 0x9d, 0x72, 0xb7, 0x31, 0x78,
	0x9a, 0xf6, 0x37, 0xf7, 0x75, 0xbd, 0x8c, 0xe1, 0xf7, 0x81, 0x88, 0xd6, 0x76, 0xd6, 0xd5, 0xfc,
	0x06, 0xda, 0x45, 0x03, 0xd2, 0x86, 0xf2, 0x2d, 0xae, 0xf5, 0x5d, 0x24, 0xc7, 0x64, 0x25, 0xdc,
	0x31, 0x3f, 0x4e, 0x6f, 0x40, 0x09, 0x5f, 0x95, 0xbe, 0x34, 0x2c, 0x0f, 0x5a, 0xbb, 0x3d, 0xb9,
	0xe7, 0x36, 0xbf, 0x86, 0x47, 0xc3, 0x3b, 0xe6, 0xf9, 0x6c, 0xe6, 0xa3, 0x9c, 0x05, 0x0f, 0x39,
	0x2d, 0xc9, 0xda, 0x8f, 0x0b, 0xdc, 0xb4, 0x77, 0x2d, 0xad, 0xdf, 0xe1, 0xec, 0x26, 0x9e, 0xf9,
	0x1e, 0x5f, 0xa4, 0x46, 0x0f, 0xf6, 0xef, 0xe3, 0xcd, 0xce, 0x94, 0x95, 0xef, 0xc9, 0xb3, 0xd9,
	0xa9, 0x17, 0x70, 0xf0, 0x32, 0x9c, 0xab, 0x85, 0xd8, 0x18, 0x40, 0x4f, 0xae, 0xde, 0x04, 0xb1,
	0x25, 0x6e, 0xfd, 0x02, 0xe7, 0xc5, 0xec, 0x0f, 0x92, 0xf0, 0xdd, 0xd3, 0x5b, 0x3f, 0xc2, 0xc9,
	0xd8, 0xe3, 0x42, 0x8b, 0xfc, 0x3d, 0x50, 0xd3, 0x1a, 0xc1, 0x69, 0x3e, 0xa4, 0xae, 0xf7, 0x13,
	0xa8, 0xa7, 0x18, 0x35, 0xf6, 0xdf, 0xfe, 0xc6, 0xc0, 0xfa, 0xcb, 0x80, 0xd3, 0x4b, 0xf4, 0x51,
	0xe0, 0x3b, 0x5f, 0xfa, 0xc3, 0x43, 0x93, 0x79, 0x9d, 0xca, 0xf9, 0xd7, 0x29, 0xbb, 0x53, 0x0f,
	0xfe, 0x73, 0xa7, 0x56, 0x8a, 0x3b, 0xd5, 0xfa, 0x0c, 0xce, 0x0a, 0x95, 0xee, 0x36, 0xa8, 0x94,
	0x6b, 0xd0, 0xe0, 0x0f, 0x23, 0xdd, 0x05, 0x7a, 0xba, 0xc8, 0xb7, 0x5b, 0x3e, 0xbf, 0x8d, 0xbd,
	0x08, 0xe7, 0xe4, 0x6c, 0xef, 0x58, 0x99, 0xe7, 0x45, 0x58, 0x27, 0x7b, 0x0e, 0x8d, 0xcc, 0xa6,
	0x22, 0x66, 0x6a, 0xb6, 0xbb, 0x1c, 0xcd, 0x0f, 0xf7, 0xea, 0x54, 0x9c, 0xc1, 0xdf, 0x25, 0x38,
	0xd9, 0x96, 0x86, 0x51, 0xa6, 0x40, 0xf9, 0xe6, 0x3d, 0x0f, 0x23, 0x9d, 0xe2, 0x7f, 0x16, 0x38,
	0x81, 0x56, 0x9e, 0xc8, 0x64, 0xfb, 0x30, 0xec, 0x1b, 0x2f, 0xf3, 0xe2, 0x3e, 0xb5, 0x0e, 0x78,
	0x0d, 0x47, 0x59, 0x9e, 0x91, 0xcd, 0x67, 0xed, 0x21, 0xb4, 0xf9, 0x78, 0xbf, 0x52, 0x87, 0x1a,
	0x43, 0x33, 0xd7, 0x42, 0xb2, 0x31, 0xdf, 0xc7, 0x41, 0xf3, 0xc9, 0x3d, 0x5a, 0x15, 0x6d, 0x56,
	0x95, 0xbf, 0x9c, 0x3e, 0xff, 0x37, 0x00, 0x00, 0xff, 0xff, 0x88, 0xe8, 0xb5, 0x3f, 0x8a, 0x09,
	0x00, 0x00,
}
