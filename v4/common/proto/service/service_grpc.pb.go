// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package service

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// StarterClient is the client API for Starter service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type StarterClient interface {
	Start(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type starterClient struct {
	cc grpc.ClientConnInterface
}

func NewStarterClient(cc grpc.ClientConnInterface) StarterClient {
	return &starterClient{cc}
}

func (c *starterClient) Start(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/service.Starter/Start", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// StarterServer is the server API for Starter service.
// All implementations must embed UnimplementedStarterServer
// for forward compatibility
type StarterServer interface {
	Start(context.Context, *emptypb.Empty) (*emptypb.Empty, error)
	mustEmbedUnimplementedStarterServer()
}

// UnimplementedStarterServer must be embedded to have forward compatible implementations.
type UnimplementedStarterServer struct {
}

func (UnimplementedStarterServer) Start(context.Context, *emptypb.Empty) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Start not implemented")
}
func (UnimplementedStarterServer) mustEmbedUnimplementedStarterServer() {}

// UnsafeStarterServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StarterServer will
// result in compilation errors.
type UnsafeStarterServer interface {
	mustEmbedUnimplementedStarterServer()
}

func RegisterStarterServer(s grpc.ServiceRegistrar, srv StarterServer) {
	s.RegisterService(&Starter_ServiceDesc, srv)
}

func _Starter_Start_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StarterServer).Start(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.Starter/Start",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StarterServer).Start(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// Starter_ServiceDesc is the grpc.ServiceDesc for Starter service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Starter_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "service.Starter",
	HandlerType: (*StarterServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Start",
			Handler:    _Starter_Start_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service.proto",
}

// ServiceClient is the client API for Service service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ServiceClient interface {
	Status(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*StatusResponse, error)
}

type serviceClient struct {
	cc grpc.ClientConnInterface
}

func NewServiceClient(cc grpc.ClientConnInterface) ServiceClient {
	return &serviceClient{cc}
}

func (c *serviceClient) Status(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*StatusResponse, error) {
	out := new(StatusResponse)
	err := c.cc.Invoke(ctx, "/service.Service/Status", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ServiceServer is the server API for Service service.
// All implementations must embed UnimplementedServiceServer
// for forward compatibility
type ServiceServer interface {
	Status(context.Context, *emptypb.Empty) (*StatusResponse, error)
	mustEmbedUnimplementedServiceServer()
}

// UnimplementedServiceServer must be embedded to have forward compatible implementations.
type UnimplementedServiceServer struct {
}

func (UnimplementedServiceServer) Status(context.Context, *emptypb.Empty) (*StatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Status not implemented")
}
func (UnimplementedServiceServer) mustEmbedUnimplementedServiceServer() {}

// UnsafeServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ServiceServer will
// result in compilation errors.
type UnsafeServiceServer interface {
	mustEmbedUnimplementedServiceServer()
}

func RegisterServiceServer(s grpc.ServiceRegistrar, srv ServiceServer) {
	s.RegisterService(&Service_ServiceDesc, srv)
}

func _Service_Status_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).Status(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.Service/Status",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).Status(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// Service_ServiceDesc is the grpc.ServiceDesc for Service service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Service_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "service.Service",
	HandlerType: (*ServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Status",
			Handler:    _Service_Status_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service.proto",
}

// ArchiverClient is the client API for Archiver service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ArchiverClient interface {
	Archive(ctx context.Context, in *Query, opts ...grpc.CallOption) (*StatusResponse, error)
}

type archiverClient struct {
	cc grpc.ClientConnInterface
}

func NewArchiverClient(cc grpc.ClientConnInterface) ArchiverClient {
	return &archiverClient{cc}
}

func (c *archiverClient) Archive(ctx context.Context, in *Query, opts ...grpc.CallOption) (*StatusResponse, error) {
	out := new(StatusResponse)
	err := c.cc.Invoke(ctx, "/service.Archiver/Archive", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ArchiverServer is the server API for Archiver service.
// All implementations must embed UnimplementedArchiverServer
// for forward compatibility
type ArchiverServer interface {
	Archive(context.Context, *Query) (*StatusResponse, error)
	mustEmbedUnimplementedArchiverServer()
}

// UnimplementedArchiverServer must be embedded to have forward compatible implementations.
type UnimplementedArchiverServer struct {
}

func (UnimplementedArchiverServer) Archive(context.Context, *Query) (*StatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Archive not implemented")
}
func (UnimplementedArchiverServer) mustEmbedUnimplementedArchiverServer() {}

// UnsafeArchiverServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ArchiverServer will
// result in compilation errors.
type UnsafeArchiverServer interface {
	mustEmbedUnimplementedArchiverServer()
}

func RegisterArchiverServer(s grpc.ServiceRegistrar, srv ArchiverServer) {
	s.RegisterService(&Archiver_ServiceDesc, srv)
}

func _Archiver_Archive_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Query)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArchiverServer).Archive(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.Archiver/Archive",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArchiverServer).Archive(ctx, req.(*Query))
	}
	return interceptor(ctx, in, info, handler)
}

// Archiver_ServiceDesc is the grpc.ServiceDesc for Archiver service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Archiver_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "service.Archiver",
	HandlerType: (*ArchiverServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Archive",
			Handler:    _Archiver_Archive_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service.proto",
}
