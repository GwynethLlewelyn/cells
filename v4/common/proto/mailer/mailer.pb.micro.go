// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: mailer.proto

package mailer

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for MailerService service

type MailerService interface {
	SendMail(ctx context.Context, in *SendMailRequest, opts ...client.CallOption) (*SendMailResponse, error)
	ConsumeQueue(ctx context.Context, in *ConsumeQueueRequest, opts ...client.CallOption) (*ConsumeQueueResponse, error)
}

type mailerService struct {
	c    client.Client
	name string
}

func NewMailerService(name string, c client.Client) MailerService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "mailer"
	}
	return &mailerService{
		c:    c,
		name: name,
	}
}

func (c *mailerService) SendMail(ctx context.Context, in *SendMailRequest, opts ...client.CallOption) (*SendMailResponse, error) {
	req := c.c.NewRequest(c.name, "MailerService.SendMail", in)
	out := new(SendMailResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mailerService) ConsumeQueue(ctx context.Context, in *ConsumeQueueRequest, opts ...client.CallOption) (*ConsumeQueueResponse, error) {
	req := c.c.NewRequest(c.name, "MailerService.ConsumeQueue", in)
	out := new(ConsumeQueueResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for MailerService service

type MailerServiceHandler interface {
	SendMail(context.Context, *SendMailRequest, *SendMailResponse) error
	ConsumeQueue(context.Context, *ConsumeQueueRequest, *ConsumeQueueResponse) error
}

func RegisterMailerServiceHandler(s server.Server, hdlr MailerServiceHandler, opts ...server.HandlerOption) error {
	type mailerService interface {
		SendMail(ctx context.Context, in *SendMailRequest, out *SendMailResponse) error
		ConsumeQueue(ctx context.Context, in *ConsumeQueueRequest, out *ConsumeQueueResponse) error
	}
	type MailerService struct {
		mailerService
	}
	h := &mailerServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&MailerService{h}, opts...))
}

type mailerServiceHandler struct {
	MailerServiceHandler
}

func (h *mailerServiceHandler) SendMail(ctx context.Context, in *SendMailRequest, out *SendMailResponse) error {
	return h.MailerServiceHandler.SendMail(ctx, in, out)
}

func (h *mailerServiceHandler) ConsumeQueue(ctx context.Context, in *ConsumeQueueRequest, out *ConsumeQueueResponse) error {
	return h.MailerServiceHandler.ConsumeQueue(ctx, in, out)
}
