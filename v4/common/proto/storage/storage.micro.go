// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: storage.proto

/*
Package storage is a generated protocol buffer package.

It is generated from these files:
	storage.proto

It has these top-level messages:
	ProposeRequest
	ProposeResponse
	LookupRequest
	LookupResponse
*/
package storage

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
	context "context"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for StorageEndpoint service

type StorageEndpointClient interface {
	Propose(ctx context.Context, in *ProposeRequest, opts ...client.CallOption) (*ProposeResponse, error)
	Lookup(ctx context.Context, in *LookupRequest, opts ...client.CallOption) (*LookupResponse, error)
}

type storageEndpointClient struct {
	c           client.Client
	serviceName string
}

func NewStorageEndpointClient(serviceName string, c client.Client) StorageEndpointClient {
	if c == nil {
		c = client.NewClient()
	}
	if len(serviceName) == 0 {
		serviceName = "storage"
	}
	return &storageEndpointClient{
		c:           c,
		serviceName: serviceName,
	}
}

func (c *storageEndpointClient) Propose(ctx context.Context, in *ProposeRequest, opts ...client.CallOption) (*ProposeResponse, error) {
	req := c.c.NewRequest(c.serviceName, "StorageEndpoint.Propose", in)
	out := new(ProposeResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageEndpointClient) Lookup(ctx context.Context, in *LookupRequest, opts ...client.CallOption) (*LookupResponse, error) {
	req := c.c.NewRequest(c.serviceName, "StorageEndpoint.Lookup", in)
	out := new(LookupResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for StorageEndpoint service

type StorageEndpointHandler interface {
	Propose(context.Context, *ProposeRequest, *ProposeResponse) error
	Lookup(context.Context, *LookupRequest, *LookupResponse) error
}

func RegisterStorageEndpointHandler(s server.Server, hdlr StorageEndpointHandler, opts ...server.HandlerOption) {
	s.Handle(s.NewHandler(&StorageEndpoint{hdlr}, opts...))
}

type StorageEndpoint struct {
	StorageEndpointHandler
}

func (h *StorageEndpoint) Propose(ctx context.Context, in *ProposeRequest, out *ProposeResponse) error {
	return h.StorageEndpointHandler.Propose(ctx, in, out)
}

func (h *StorageEndpoint) Lookup(ctx context.Context, in *LookupRequest, out *LookupResponse) error {
	return h.StorageEndpointHandler.Lookup(ctx, in, out)
}
