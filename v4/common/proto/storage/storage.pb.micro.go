// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: storage.proto

package storage

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/micro/micro/v3/service/api"
	client "github.com/micro/micro/v3/service/client"
	server "github.com/micro/micro/v3/service/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for StorageEndpoint service

func NewStorageEndpointEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for StorageEndpoint service

type StorageEndpointService interface {
	Propose(ctx context.Context, in *ProposeRequest, opts ...client.CallOption) (*ProposeResponse, error)
	Lookup(ctx context.Context, in *LookupRequest, opts ...client.CallOption) (*LookupResponse, error)
}

type storageEndpointService struct {
	c    client.Client
	name string
}

func NewStorageEndpointService(name string, c client.Client) StorageEndpointService {
	return &storageEndpointService{
		c:    c,
		name: name,
	}
}

func (c *storageEndpointService) Propose(ctx context.Context, in *ProposeRequest, opts ...client.CallOption) (*ProposeResponse, error) {
	req := c.c.NewRequest(c.name, "StorageEndpoint.Propose", in)
	out := new(ProposeResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageEndpointService) Lookup(ctx context.Context, in *LookupRequest, opts ...client.CallOption) (*LookupResponse, error) {
	req := c.c.NewRequest(c.name, "StorageEndpoint.Lookup", in)
	out := new(LookupResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for StorageEndpoint service

type StorageEndpointHandler interface {
	Propose(context.Context, *ProposeRequest, *ProposeResponse) error
	Lookup(context.Context, *LookupRequest, *LookupResponse) error
}

func RegisterStorageEndpointHandler(s server.Server, hdlr StorageEndpointHandler, opts ...server.HandlerOption) error {
	type storageEndpoint interface {
		Propose(ctx context.Context, in *ProposeRequest, out *ProposeResponse) error
		Lookup(ctx context.Context, in *LookupRequest, out *LookupResponse) error
	}
	type StorageEndpoint struct {
		storageEndpoint
	}
	h := &storageEndpointHandler{hdlr}
	return s.Handle(s.NewHandler(&StorageEndpoint{h}, opts...))
}

type storageEndpointHandler struct {
	StorageEndpointHandler
}

func (h *storageEndpointHandler) Propose(ctx context.Context, in *ProposeRequest, out *ProposeResponse) error {
	return h.StorageEndpointHandler.Propose(ctx, in, out)
}

func (h *storageEndpointHandler) Lookup(ctx context.Context, in *LookupRequest, out *LookupResponse) error {
	return h.StorageEndpointHandler.Lookup(ctx, in, out)
}
