// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: jobs.proto

package jobs

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	_ "github.com/golang/protobuf/ptypes/any"
	_ "github.com/pydio/cells/v4/common/proto/activity"
	_ "github.com/pydio/cells/v4/common/proto/idm"
	_ "github.com/pydio/cells/v4/common/proto/object"
	_ "github.com/pydio/cells/v4/common/proto/service"
	_ "github.com/pydio/cells/v4/common/proto/tree"
	math "math"
)

import (
	context "context"
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for JobService service

type JobService interface {
	PutJob(ctx context.Context, in *PutJobRequest, opts ...client.CallOption) (*PutJobResponse, error)
	GetJob(ctx context.Context, in *GetJobRequest, opts ...client.CallOption) (*GetJobResponse, error)
	DeleteJob(ctx context.Context, in *DeleteJobRequest, opts ...client.CallOption) (*DeleteJobResponse, error)
	ListJobs(ctx context.Context, in *ListJobsRequest, opts ...client.CallOption) (JobService_ListJobsService, error)
	PutTask(ctx context.Context, in *PutTaskRequest, opts ...client.CallOption) (*PutTaskResponse, error)
	PutTaskStream(ctx context.Context, opts ...client.CallOption) (JobService_PutTaskStreamService, error)
	ListTasks(ctx context.Context, in *ListTasksRequest, opts ...client.CallOption) (JobService_ListTasksService, error)
	DeleteTasks(ctx context.Context, in *DeleteTasksRequest, opts ...client.CallOption) (*DeleteTasksResponse, error)
	DetectStuckTasks(ctx context.Context, in *DetectStuckTasksRequest, opts ...client.CallOption) (*DetectStuckTasksResponse, error)
}

type jobService struct {
	c    client.Client
	name string
}

func NewJobService(name string, c client.Client) JobService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "jobs"
	}
	return &jobService{
		c:    c,
		name: name,
	}
}

func (c *jobService) PutJob(ctx context.Context, in *PutJobRequest, opts ...client.CallOption) (*PutJobResponse, error) {
	req := c.c.NewRequest(c.name, "JobService.PutJob", in)
	out := new(PutJobResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jobService) GetJob(ctx context.Context, in *GetJobRequest, opts ...client.CallOption) (*GetJobResponse, error) {
	req := c.c.NewRequest(c.name, "JobService.GetJob", in)
	out := new(GetJobResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jobService) DeleteJob(ctx context.Context, in *DeleteJobRequest, opts ...client.CallOption) (*DeleteJobResponse, error) {
	req := c.c.NewRequest(c.name, "JobService.DeleteJob", in)
	out := new(DeleteJobResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jobService) ListJobs(ctx context.Context, in *ListJobsRequest, opts ...client.CallOption) (JobService_ListJobsService, error) {
	req := c.c.NewRequest(c.name, "JobService.ListJobs", &ListJobsRequest{})
	stream, err := c.c.Stream(ctx, req, opts...)
	if err != nil {
		return nil, err
	}
	if err := stream.Send(in); err != nil {
		return nil, err
	}
	return &jobServiceListJobs{stream}, nil
}

type JobService_ListJobsService interface {
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Recv() (*ListJobsResponse, error)
}

type jobServiceListJobs struct {
	stream client.Stream
}

func (x *jobServiceListJobs) Close() error {
	return x.stream.Close()
}

func (x *jobServiceListJobs) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *jobServiceListJobs) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *jobServiceListJobs) Recv() (*ListJobsResponse, error) {
	m := new(ListJobsResponse)
	err := x.stream.Recv(m)
	if err != nil {
		return nil, err
	}
	return m, nil
}

func (c *jobService) PutTask(ctx context.Context, in *PutTaskRequest, opts ...client.CallOption) (*PutTaskResponse, error) {
	req := c.c.NewRequest(c.name, "JobService.PutTask", in)
	out := new(PutTaskResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jobService) PutTaskStream(ctx context.Context, opts ...client.CallOption) (JobService_PutTaskStreamService, error) {
	req := c.c.NewRequest(c.name, "JobService.PutTaskStream", &PutTaskRequest{})
	stream, err := c.c.Stream(ctx, req, opts...)
	if err != nil {
		return nil, err
	}
	return &jobServicePutTaskStream{stream}, nil
}

type JobService_PutTaskStreamService interface {
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Send(*PutTaskRequest) error
	Recv() (*PutTaskResponse, error)
}

type jobServicePutTaskStream struct {
	stream client.Stream
}

func (x *jobServicePutTaskStream) Close() error {
	return x.stream.Close()
}

func (x *jobServicePutTaskStream) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *jobServicePutTaskStream) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *jobServicePutTaskStream) Send(m *PutTaskRequest) error {
	return x.stream.Send(m)
}

func (x *jobServicePutTaskStream) Recv() (*PutTaskResponse, error) {
	m := new(PutTaskResponse)
	err := x.stream.Recv(m)
	if err != nil {
		return nil, err
	}
	return m, nil
}

func (c *jobService) ListTasks(ctx context.Context, in *ListTasksRequest, opts ...client.CallOption) (JobService_ListTasksService, error) {
	req := c.c.NewRequest(c.name, "JobService.ListTasks", &ListTasksRequest{})
	stream, err := c.c.Stream(ctx, req, opts...)
	if err != nil {
		return nil, err
	}
	if err := stream.Send(in); err != nil {
		return nil, err
	}
	return &jobServiceListTasks{stream}, nil
}

type JobService_ListTasksService interface {
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Recv() (*ListTasksResponse, error)
}

type jobServiceListTasks struct {
	stream client.Stream
}

func (x *jobServiceListTasks) Close() error {
	return x.stream.Close()
}

func (x *jobServiceListTasks) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *jobServiceListTasks) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *jobServiceListTasks) Recv() (*ListTasksResponse, error) {
	m := new(ListTasksResponse)
	err := x.stream.Recv(m)
	if err != nil {
		return nil, err
	}
	return m, nil
}

func (c *jobService) DeleteTasks(ctx context.Context, in *DeleteTasksRequest, opts ...client.CallOption) (*DeleteTasksResponse, error) {
	req := c.c.NewRequest(c.name, "JobService.DeleteTasks", in)
	out := new(DeleteTasksResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jobService) DetectStuckTasks(ctx context.Context, in *DetectStuckTasksRequest, opts ...client.CallOption) (*DetectStuckTasksResponse, error) {
	req := c.c.NewRequest(c.name, "JobService.DetectStuckTasks", in)
	out := new(DetectStuckTasksResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for JobService service

type JobServiceHandler interface {
	PutJob(context.Context, *PutJobRequest, *PutJobResponse) error
	GetJob(context.Context, *GetJobRequest, *GetJobResponse) error
	DeleteJob(context.Context, *DeleteJobRequest, *DeleteJobResponse) error
	ListJobs(context.Context, *ListJobsRequest, JobService_ListJobsStream) error
	PutTask(context.Context, *PutTaskRequest, *PutTaskResponse) error
	PutTaskStream(context.Context, JobService_PutTaskStreamStream) error
	ListTasks(context.Context, *ListTasksRequest, JobService_ListTasksStream) error
	DeleteTasks(context.Context, *DeleteTasksRequest, *DeleteTasksResponse) error
	DetectStuckTasks(context.Context, *DetectStuckTasksRequest, *DetectStuckTasksResponse) error
}

func RegisterJobServiceHandler(s server.Server, hdlr JobServiceHandler, opts ...server.HandlerOption) error {
	type jobService interface {
		PutJob(ctx context.Context, in *PutJobRequest, out *PutJobResponse) error
		GetJob(ctx context.Context, in *GetJobRequest, out *GetJobResponse) error
		DeleteJob(ctx context.Context, in *DeleteJobRequest, out *DeleteJobResponse) error
		ListJobs(ctx context.Context, stream server.Stream) error
		PutTask(ctx context.Context, in *PutTaskRequest, out *PutTaskResponse) error
		PutTaskStream(ctx context.Context, stream server.Stream) error
		ListTasks(ctx context.Context, stream server.Stream) error
		DeleteTasks(ctx context.Context, in *DeleteTasksRequest, out *DeleteTasksResponse) error
		DetectStuckTasks(ctx context.Context, in *DetectStuckTasksRequest, out *DetectStuckTasksResponse) error
	}
	type JobService struct {
		jobService
	}
	h := &jobServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&JobService{h}, opts...))
}

type jobServiceHandler struct {
	JobServiceHandler
}

func (h *jobServiceHandler) PutJob(ctx context.Context, in *PutJobRequest, out *PutJobResponse) error {
	return h.JobServiceHandler.PutJob(ctx, in, out)
}

func (h *jobServiceHandler) GetJob(ctx context.Context, in *GetJobRequest, out *GetJobResponse) error {
	return h.JobServiceHandler.GetJob(ctx, in, out)
}

func (h *jobServiceHandler) DeleteJob(ctx context.Context, in *DeleteJobRequest, out *DeleteJobResponse) error {
	return h.JobServiceHandler.DeleteJob(ctx, in, out)
}

func (h *jobServiceHandler) ListJobs(ctx context.Context, stream server.Stream) error {
	m := new(ListJobsRequest)
	if err := stream.Recv(m); err != nil {
		return err
	}
	return h.JobServiceHandler.ListJobs(ctx, m, &jobServiceListJobsStream{stream})
}

type JobService_ListJobsStream interface {
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Send(*ListJobsResponse) error
}

type jobServiceListJobsStream struct {
	stream server.Stream
}

func (x *jobServiceListJobsStream) Close() error {
	return x.stream.Close()
}

func (x *jobServiceListJobsStream) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *jobServiceListJobsStream) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *jobServiceListJobsStream) Send(m *ListJobsResponse) error {
	return x.stream.Send(m)
}

func (h *jobServiceHandler) PutTask(ctx context.Context, in *PutTaskRequest, out *PutTaskResponse) error {
	return h.JobServiceHandler.PutTask(ctx, in, out)
}

func (h *jobServiceHandler) PutTaskStream(ctx context.Context, stream server.Stream) error {
	return h.JobServiceHandler.PutTaskStream(ctx, &jobServicePutTaskStreamStream{stream})
}

type JobService_PutTaskStreamStream interface {
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Send(*PutTaskResponse) error
	Recv() (*PutTaskRequest, error)
}

type jobServicePutTaskStreamStream struct {
	stream server.Stream
}

func (x *jobServicePutTaskStreamStream) Close() error {
	return x.stream.Close()
}

func (x *jobServicePutTaskStreamStream) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *jobServicePutTaskStreamStream) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *jobServicePutTaskStreamStream) Send(m *PutTaskResponse) error {
	return x.stream.Send(m)
}

func (x *jobServicePutTaskStreamStream) Recv() (*PutTaskRequest, error) {
	m := new(PutTaskRequest)
	if err := x.stream.Recv(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (h *jobServiceHandler) ListTasks(ctx context.Context, stream server.Stream) error {
	m := new(ListTasksRequest)
	if err := stream.Recv(m); err != nil {
		return err
	}
	return h.JobServiceHandler.ListTasks(ctx, m, &jobServiceListTasksStream{stream})
}

type JobService_ListTasksStream interface {
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Send(*ListTasksResponse) error
}

type jobServiceListTasksStream struct {
	stream server.Stream
}

func (x *jobServiceListTasksStream) Close() error {
	return x.stream.Close()
}

func (x *jobServiceListTasksStream) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *jobServiceListTasksStream) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *jobServiceListTasksStream) Send(m *ListTasksResponse) error {
	return x.stream.Send(m)
}

func (h *jobServiceHandler) DeleteTasks(ctx context.Context, in *DeleteTasksRequest, out *DeleteTasksResponse) error {
	return h.JobServiceHandler.DeleteTasks(ctx, in, out)
}

func (h *jobServiceHandler) DetectStuckTasks(ctx context.Context, in *DetectStuckTasksRequest, out *DetectStuckTasksResponse) error {
	return h.JobServiceHandler.DetectStuckTasks(ctx, in, out)
}

// Client API for TaskService service

type TaskService interface {
	Control(ctx context.Context, in *CtrlCommand, opts ...client.CallOption) (*CtrlCommandResponse, error)
}

type taskService struct {
	c    client.Client
	name string
}

func NewTaskService(name string, c client.Client) TaskService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "jobs"
	}
	return &taskService{
		c:    c,
		name: name,
	}
}

func (c *taskService) Control(ctx context.Context, in *CtrlCommand, opts ...client.CallOption) (*CtrlCommandResponse, error) {
	req := c.c.NewRequest(c.name, "TaskService.Control", in)
	out := new(CtrlCommandResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for TaskService service

type TaskServiceHandler interface {
	Control(context.Context, *CtrlCommand, *CtrlCommandResponse) error
}

func RegisterTaskServiceHandler(s server.Server, hdlr TaskServiceHandler, opts ...server.HandlerOption) error {
	type taskService interface {
		Control(ctx context.Context, in *CtrlCommand, out *CtrlCommandResponse) error
	}
	type TaskService struct {
		taskService
	}
	h := &taskServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&TaskService{h}, opts...))
}

type taskServiceHandler struct {
	TaskServiceHandler
}

func (h *taskServiceHandler) Control(ctx context.Context, in *CtrlCommand, out *CtrlCommandResponse) error {
	return h.TaskServiceHandler.Control(ctx, in, out)
}
