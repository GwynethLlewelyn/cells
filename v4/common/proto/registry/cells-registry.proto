syntax = "proto3";

package registry;

option go_package = "github.com/pydio/cells/v4/common/proto/registry";

service Registry {
  rpc StartService(StartServiceRequest) returns (EmptyResponse) {};
  rpc StopService(StopServiceRequest) returns (EmptyResponse) {};
  rpc GetService(GetServiceRequest) returns (GetServiceResponse) {};
  rpc RegisterService(Service) returns (EmptyResponse) {};
  rpc DeregisterService(Service) returns (EmptyResponse) {};
  rpc ListServices(ListServicesRequest) returns (ListServicesResponse) {};
  rpc WatchServices(WatchServicesRequest) returns (stream Result) {};
  rpc RegisterNode(Node) returns (EmptyResponse) {};
  rpc DeregisterNode(Node) returns (EmptyResponse) {};
  rpc GetNode(GetNodeRequest) returns (GetNodeResponse) {};
  rpc ListNodes(ListNodesRequest) returns (ListNodesResponse) {};
}

// Service represents a go-micro service
message Service {
  string name = 1;
  string version = 2;
  map<string,string> metadata = 3;
  repeated Node nodes = 4;
  Options options = 5;
}

// Node represents the node the service is on
message Node {
  string id = 1;
  string address = 2;
  int64 port = 3;
  map<string,string> metadata = 4;
  repeated string endpoints = 5;
}

// Endpoint is a endpoint provided by a service
message Endpoint {
  string name = 1;
  Value request = 2;
  Value response = 3;
  map<string, string> metadata = 4;
}

// Value is an opaque value for a request or response
message Value {
  string name = 1;
  string type = 2;
  repeated Value values = 3;
}

// Options are registry options
message Options {
  int64 ttl = 1;
  string domain = 2;
}

// Result is returns by the watcher
message Result {
  string action = 1; // create, update, delete
  Service service = 2;
  int64 timestamp = 3; // unix timestamp
}

message EmptyResponse {}

message StartServiceRequest {
  string service = 1;
}

message StopServiceRequest {
  string service = 1;
}

message GetServiceRequest {
  string service = 1;
  Options options = 2;
}

message GetServiceResponse {
  Service service = 1;
}

message ListServicesRequest {
  Options options = 1;
}

message ListServicesResponse {
  repeated Service services = 1;
}

message WatchServicesRequest {
  // service is optional
  string service = 1;
  Options options = 2;
}

message GetNodeRequest {
  string node = 1;
  Options options = 2;
}

message GetNodeResponse {
  Node node = 1;
}

message ListNodesRequest {
  Options options = 1;
}

message ListNodesResponse {
  repeated Node nodes = 1;
}

// EventType defines the type of event
enum EventType {
  Create = 0;
  Delete = 1;
  Update = 2;
}

// Event is registry event
message Event {
  // Event Id
  string id = 1;
  // type of event
  EventType type = 2;
  // unix timestamp of event
  int64 timestamp = 3;
  // service entry
  Service service = 4;
}