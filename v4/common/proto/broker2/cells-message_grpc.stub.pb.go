// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-client-stub v1.1.0
// - protoc             v3.19.1
// source: cells-message.proto

package broker

import (
	context "context"
	fmt "fmt"
	io "io"

	stubs "github.com/pydio/cells/v4/common/server/stubs"
	grpc "google.golang.org/grpc"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

type BrokerStub struct {
	BrokerServer
}

func (s *BrokerStub) Invoke(ctx context.Context, method string, args interface{}, reply interface{}, opts ...grpc.CallOption) error {
	fmt.Println("Serving", method, args, reply, opts)
	var e error
	switch method {
	default:
		e = fmt.Errorf(method + " not implemented")
	}
	return e
}
func (s *BrokerStub) NewStream(ctx context.Context, desc *grpc.StreamDesc, method string, opts ...grpc.CallOption) (grpc.ClientStream, error) {
	fmt.Println("Serving", method)
	switch method {
	case "/broker.Broker/Publish":
		st := &BrokerStub_PublishStreamer{}
		st.Init(ctx)
		go s.BrokerServer.Publish(st)
		return st, nil
	case "/broker.Broker/Subscribe":
		st := &BrokerStub_SubscribeStreamer{}
		st.Init(ctx, func(i interface{}) error {
			go s.BrokerServer.Subscribe(i.(*SubscribeRequest), st)
			return nil
		})
		return st, nil
	}
	return nil, fmt.Errorf(method + "  not implemented")
}

type BrokerStub_PublishStreamer struct {
	stubs.BidirServerStreamerCore
}

func (s *BrokerStub_PublishStreamer) Recv() (*PublishRequest, error) {
	if req, o := <-s.ReqChan; o {
		return req.(*PublishRequest), nil
	} else {
		return nil, io.EOF
	}
}
func (s *BrokerStub_PublishStreamer) Send(response *Empty) error {
	s.RespChan <- response
	return nil
}
func (s *BrokerStub_PublishStreamer) SendAndClose(response *Empty) error {
	s.RespChan <- response
	close(s.RespChan)
	return nil
}

type BrokerStub_SubscribeStreamer struct {
	stubs.ClientServerStreamerCore
}

func (s *BrokerStub_SubscribeStreamer) Send(response *Messages) error {
	s.RespChan <- response
	return nil
}
