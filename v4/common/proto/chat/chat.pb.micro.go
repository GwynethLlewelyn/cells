// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: chat.proto

package chat

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	_ "github.com/pydio/cells/v4/common/proto/activity"
	math "math"
)

import (
	context "context"
	api "github.com/micro/micro/v3/service/api"
	client "github.com/micro/micro/v3/service/client"
	server "github.com/micro/micro/v3/service/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for ChatService service

func NewChatServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for ChatService service

type ChatService interface {
	PutRoom(ctx context.Context, in *PutRoomRequest, opts ...client.CallOption) (*PutRoomResponse, error)
	DeleteRoom(ctx context.Context, in *DeleteRoomRequest, opts ...client.CallOption) (*DeleteRoomResponse, error)
	ListRooms(ctx context.Context, in *ListRoomsRequest, opts ...client.CallOption) (ChatService_ListRoomsService, error)
	ListMessages(ctx context.Context, in *ListMessagesRequest, opts ...client.CallOption) (ChatService_ListMessagesService, error)
	PostMessage(ctx context.Context, in *PostMessageRequest, opts ...client.CallOption) (*PostMessageResponse, error)
	DeleteMessage(ctx context.Context, in *DeleteMessageRequest, opts ...client.CallOption) (*DeleteMessageResponse, error)
}

type chatService struct {
	c    client.Client
	name string
}

func NewChatService(name string, c client.Client) ChatService {
	return &chatService{
		c:    c,
		name: name,
	}
}

func (c *chatService) PutRoom(ctx context.Context, in *PutRoomRequest, opts ...client.CallOption) (*PutRoomResponse, error) {
	req := c.c.NewRequest(c.name, "ChatService.PutRoom", in)
	out := new(PutRoomResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatService) DeleteRoom(ctx context.Context, in *DeleteRoomRequest, opts ...client.CallOption) (*DeleteRoomResponse, error) {
	req := c.c.NewRequest(c.name, "ChatService.DeleteRoom", in)
	out := new(DeleteRoomResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatService) ListRooms(ctx context.Context, in *ListRoomsRequest, opts ...client.CallOption) (ChatService_ListRoomsService, error) {
	req := c.c.NewRequest(c.name, "ChatService.ListRooms", &ListRoomsRequest{})
	stream, err := c.c.Stream(ctx, req, opts...)
	if err != nil {
		return nil, err
	}
	if err := stream.Send(in); err != nil {
		return nil, err
	}
	return &chatServiceListRooms{stream}, nil
}

type ChatService_ListRoomsService interface {
	Context() context.Context
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Recv() (*ListRoomsResponse, error)
}

type chatServiceListRooms struct {
	stream client.Stream
}

func (x *chatServiceListRooms) Close() error {
	return x.stream.Close()
}

func (x *chatServiceListRooms) Context() context.Context {
	return x.stream.Context()
}

func (x *chatServiceListRooms) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *chatServiceListRooms) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *chatServiceListRooms) Recv() (*ListRoomsResponse, error) {
	m := new(ListRoomsResponse)
	err := x.stream.Recv(m)
	if err != nil {
		return nil, err
	}
	return m, nil
}

func (c *chatService) ListMessages(ctx context.Context, in *ListMessagesRequest, opts ...client.CallOption) (ChatService_ListMessagesService, error) {
	req := c.c.NewRequest(c.name, "ChatService.ListMessages", &ListMessagesRequest{})
	stream, err := c.c.Stream(ctx, req, opts...)
	if err != nil {
		return nil, err
	}
	if err := stream.Send(in); err != nil {
		return nil, err
	}
	return &chatServiceListMessages{stream}, nil
}

type ChatService_ListMessagesService interface {
	Context() context.Context
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Recv() (*ListMessagesResponse, error)
}

type chatServiceListMessages struct {
	stream client.Stream
}

func (x *chatServiceListMessages) Close() error {
	return x.stream.Close()
}

func (x *chatServiceListMessages) Context() context.Context {
	return x.stream.Context()
}

func (x *chatServiceListMessages) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *chatServiceListMessages) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *chatServiceListMessages) Recv() (*ListMessagesResponse, error) {
	m := new(ListMessagesResponse)
	err := x.stream.Recv(m)
	if err != nil {
		return nil, err
	}
	return m, nil
}

func (c *chatService) PostMessage(ctx context.Context, in *PostMessageRequest, opts ...client.CallOption) (*PostMessageResponse, error) {
	req := c.c.NewRequest(c.name, "ChatService.PostMessage", in)
	out := new(PostMessageResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatService) DeleteMessage(ctx context.Context, in *DeleteMessageRequest, opts ...client.CallOption) (*DeleteMessageResponse, error) {
	req := c.c.NewRequest(c.name, "ChatService.DeleteMessage", in)
	out := new(DeleteMessageResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for ChatService service

type ChatServiceHandler interface {
	PutRoom(context.Context, *PutRoomRequest, *PutRoomResponse) error
	DeleteRoom(context.Context, *DeleteRoomRequest, *DeleteRoomResponse) error
	ListRooms(context.Context, *ListRoomsRequest, ChatService_ListRoomsStream) error
	ListMessages(context.Context, *ListMessagesRequest, ChatService_ListMessagesStream) error
	PostMessage(context.Context, *PostMessageRequest, *PostMessageResponse) error
	DeleteMessage(context.Context, *DeleteMessageRequest, *DeleteMessageResponse) error
}

func RegisterChatServiceHandler(s server.Server, hdlr ChatServiceHandler, opts ...server.HandlerOption) error {
	type chatService interface {
		PutRoom(ctx context.Context, in *PutRoomRequest, out *PutRoomResponse) error
		DeleteRoom(ctx context.Context, in *DeleteRoomRequest, out *DeleteRoomResponse) error
		ListRooms(ctx context.Context, stream server.Stream) error
		ListMessages(ctx context.Context, stream server.Stream) error
		PostMessage(ctx context.Context, in *PostMessageRequest, out *PostMessageResponse) error
		DeleteMessage(ctx context.Context, in *DeleteMessageRequest, out *DeleteMessageResponse) error
	}
	type ChatService struct {
		chatService
	}
	h := &chatServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&ChatService{h}, opts...))
}

type chatServiceHandler struct {
	ChatServiceHandler
}

func (h *chatServiceHandler) PutRoom(ctx context.Context, in *PutRoomRequest, out *PutRoomResponse) error {
	return h.ChatServiceHandler.PutRoom(ctx, in, out)
}

func (h *chatServiceHandler) DeleteRoom(ctx context.Context, in *DeleteRoomRequest, out *DeleteRoomResponse) error {
	return h.ChatServiceHandler.DeleteRoom(ctx, in, out)
}

func (h *chatServiceHandler) ListRooms(ctx context.Context, stream server.Stream) error {
	m := new(ListRoomsRequest)
	if err := stream.Recv(m); err != nil {
		return err
	}
	return h.ChatServiceHandler.ListRooms(ctx, m, &chatServiceListRoomsStream{stream})
}

type ChatService_ListRoomsStream interface {
	Context() context.Context
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Send(*ListRoomsResponse) error
}

type chatServiceListRoomsStream struct {
	stream server.Stream
}

func (x *chatServiceListRoomsStream) Close() error {
	return x.stream.Close()
}

func (x *chatServiceListRoomsStream) Context() context.Context {
	return x.stream.Context()
}

func (x *chatServiceListRoomsStream) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *chatServiceListRoomsStream) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *chatServiceListRoomsStream) Send(m *ListRoomsResponse) error {
	return x.stream.Send(m)
}

func (h *chatServiceHandler) ListMessages(ctx context.Context, stream server.Stream) error {
	m := new(ListMessagesRequest)
	if err := stream.Recv(m); err != nil {
		return err
	}
	return h.ChatServiceHandler.ListMessages(ctx, m, &chatServiceListMessagesStream{stream})
}

type ChatService_ListMessagesStream interface {
	Context() context.Context
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Send(*ListMessagesResponse) error
}

type chatServiceListMessagesStream struct {
	stream server.Stream
}

func (x *chatServiceListMessagesStream) Close() error {
	return x.stream.Close()
}

func (x *chatServiceListMessagesStream) Context() context.Context {
	return x.stream.Context()
}

func (x *chatServiceListMessagesStream) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *chatServiceListMessagesStream) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *chatServiceListMessagesStream) Send(m *ListMessagesResponse) error {
	return x.stream.Send(m)
}

func (h *chatServiceHandler) PostMessage(ctx context.Context, in *PostMessageRequest, out *PostMessageResponse) error {
	return h.ChatServiceHandler.PostMessage(ctx, in, out)
}

func (h *chatServiceHandler) DeleteMessage(ctx context.Context, in *DeleteMessageRequest, out *DeleteMessageResponse) error {
	return h.ChatServiceHandler.DeleteMessage(ctx, in, out)
}
