// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: activitystream.proto

package activity

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	_ "github.com/golang/protobuf/ptypes/timestamp"
	math "math"
)

import (
	context "context"
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for ActivityService service

type ActivityService interface {
	PostActivity(ctx context.Context, opts ...client.CallOption) (ActivityService_PostActivityService, error)
	StreamActivities(ctx context.Context, in *StreamActivitiesRequest, opts ...client.CallOption) (ActivityService_StreamActivitiesService, error)
	UnreadActivitiesNumber(ctx context.Context, in *UnreadActivitiesRequest, opts ...client.CallOption) (*UnreadActivitiesResponse, error)
	PurgeActivities(ctx context.Context, in *PurgeActivitiesRequest, opts ...client.CallOption) (*PurgeActivitiesResponse, error)
	SetUserLastActivity(ctx context.Context, in *UserLastActivityRequest, opts ...client.CallOption) (*UserLastActivityResponse, error)
	Subscribe(ctx context.Context, in *SubscribeRequest, opts ...client.CallOption) (*SubscribeResponse, error)
	SearchSubscriptions(ctx context.Context, in *SearchSubscriptionsRequest, opts ...client.CallOption) (ActivityService_SearchSubscriptionsService, error)
}

type activityService struct {
	c    client.Client
	name string
}

func NewActivityService(name string, c client.Client) ActivityService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "activity"
	}
	return &activityService{
		c:    c,
		name: name,
	}
}

func (c *activityService) PostActivity(ctx context.Context, opts ...client.CallOption) (ActivityService_PostActivityService, error) {
	req := c.c.NewRequest(c.name, "ActivityService.PostActivity", &PostActivityRequest{})
	stream, err := c.c.Stream(ctx, req, opts...)
	if err != nil {
		return nil, err
	}
	return &activityServicePostActivity{stream}, nil
}

type ActivityService_PostActivityService interface {
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Send(*PostActivityRequest) error
}

type activityServicePostActivity struct {
	stream client.Stream
}

func (x *activityServicePostActivity) Close() error {
	return x.stream.Close()
}

func (x *activityServicePostActivity) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *activityServicePostActivity) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *activityServicePostActivity) Send(m *PostActivityRequest) error {
	return x.stream.Send(m)
}

func (c *activityService) StreamActivities(ctx context.Context, in *StreamActivitiesRequest, opts ...client.CallOption) (ActivityService_StreamActivitiesService, error) {
	req := c.c.NewRequest(c.name, "ActivityService.StreamActivities", &StreamActivitiesRequest{})
	stream, err := c.c.Stream(ctx, req, opts...)
	if err != nil {
		return nil, err
	}
	if err := stream.Send(in); err != nil {
		return nil, err
	}
	return &activityServiceStreamActivities{stream}, nil
}

type ActivityService_StreamActivitiesService interface {
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Recv() (*StreamActivitiesResponse, error)
}

type activityServiceStreamActivities struct {
	stream client.Stream
}

func (x *activityServiceStreamActivities) Close() error {
	return x.stream.Close()
}

func (x *activityServiceStreamActivities) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *activityServiceStreamActivities) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *activityServiceStreamActivities) Recv() (*StreamActivitiesResponse, error) {
	m := new(StreamActivitiesResponse)
	err := x.stream.Recv(m)
	if err != nil {
		return nil, err
	}
	return m, nil
}

func (c *activityService) UnreadActivitiesNumber(ctx context.Context, in *UnreadActivitiesRequest, opts ...client.CallOption) (*UnreadActivitiesResponse, error) {
	req := c.c.NewRequest(c.name, "ActivityService.UnreadActivitiesNumber", in)
	out := new(UnreadActivitiesResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activityService) PurgeActivities(ctx context.Context, in *PurgeActivitiesRequest, opts ...client.CallOption) (*PurgeActivitiesResponse, error) {
	req := c.c.NewRequest(c.name, "ActivityService.PurgeActivities", in)
	out := new(PurgeActivitiesResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activityService) SetUserLastActivity(ctx context.Context, in *UserLastActivityRequest, opts ...client.CallOption) (*UserLastActivityResponse, error) {
	req := c.c.NewRequest(c.name, "ActivityService.SetUserLastActivity", in)
	out := new(UserLastActivityResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activityService) Subscribe(ctx context.Context, in *SubscribeRequest, opts ...client.CallOption) (*SubscribeResponse, error) {
	req := c.c.NewRequest(c.name, "ActivityService.Subscribe", in)
	out := new(SubscribeResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activityService) SearchSubscriptions(ctx context.Context, in *SearchSubscriptionsRequest, opts ...client.CallOption) (ActivityService_SearchSubscriptionsService, error) {
	req := c.c.NewRequest(c.name, "ActivityService.SearchSubscriptions", &SearchSubscriptionsRequest{})
	stream, err := c.c.Stream(ctx, req, opts...)
	if err != nil {
		return nil, err
	}
	if err := stream.Send(in); err != nil {
		return nil, err
	}
	return &activityServiceSearchSubscriptions{stream}, nil
}

type ActivityService_SearchSubscriptionsService interface {
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Recv() (*SearchSubscriptionsResponse, error)
}

type activityServiceSearchSubscriptions struct {
	stream client.Stream
}

func (x *activityServiceSearchSubscriptions) Close() error {
	return x.stream.Close()
}

func (x *activityServiceSearchSubscriptions) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *activityServiceSearchSubscriptions) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *activityServiceSearchSubscriptions) Recv() (*SearchSubscriptionsResponse, error) {
	m := new(SearchSubscriptionsResponse)
	err := x.stream.Recv(m)
	if err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for ActivityService service

type ActivityServiceHandler interface {
	PostActivity(context.Context, ActivityService_PostActivityStream) error
	StreamActivities(context.Context, *StreamActivitiesRequest, ActivityService_StreamActivitiesStream) error
	UnreadActivitiesNumber(context.Context, *UnreadActivitiesRequest, *UnreadActivitiesResponse) error
	PurgeActivities(context.Context, *PurgeActivitiesRequest, *PurgeActivitiesResponse) error
	SetUserLastActivity(context.Context, *UserLastActivityRequest, *UserLastActivityResponse) error
	Subscribe(context.Context, *SubscribeRequest, *SubscribeResponse) error
	SearchSubscriptions(context.Context, *SearchSubscriptionsRequest, ActivityService_SearchSubscriptionsStream) error
}

func RegisterActivityServiceHandler(s server.Server, hdlr ActivityServiceHandler, opts ...server.HandlerOption) error {
	type activityService interface {
		PostActivity(ctx context.Context, stream server.Stream) error
		StreamActivities(ctx context.Context, stream server.Stream) error
		UnreadActivitiesNumber(ctx context.Context, in *UnreadActivitiesRequest, out *UnreadActivitiesResponse) error
		PurgeActivities(ctx context.Context, in *PurgeActivitiesRequest, out *PurgeActivitiesResponse) error
		SetUserLastActivity(ctx context.Context, in *UserLastActivityRequest, out *UserLastActivityResponse) error
		Subscribe(ctx context.Context, in *SubscribeRequest, out *SubscribeResponse) error
		SearchSubscriptions(ctx context.Context, stream server.Stream) error
	}
	type ActivityService struct {
		activityService
	}
	h := &activityServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&ActivityService{h}, opts...))
}

type activityServiceHandler struct {
	ActivityServiceHandler
}

func (h *activityServiceHandler) PostActivity(ctx context.Context, stream server.Stream) error {
	return h.ActivityServiceHandler.PostActivity(ctx, &activityServicePostActivityStream{stream})
}

type ActivityService_PostActivityStream interface {
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Recv() (*PostActivityRequest, error)
}

type activityServicePostActivityStream struct {
	stream server.Stream
}

func (x *activityServicePostActivityStream) Close() error {
	return x.stream.Close()
}

func (x *activityServicePostActivityStream) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *activityServicePostActivityStream) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *activityServicePostActivityStream) Recv() (*PostActivityRequest, error) {
	m := new(PostActivityRequest)
	if err := x.stream.Recv(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (h *activityServiceHandler) StreamActivities(ctx context.Context, stream server.Stream) error {
	m := new(StreamActivitiesRequest)
	if err := stream.Recv(m); err != nil {
		return err
	}
	return h.ActivityServiceHandler.StreamActivities(ctx, m, &activityServiceStreamActivitiesStream{stream})
}

type ActivityService_StreamActivitiesStream interface {
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Send(*StreamActivitiesResponse) error
}

type activityServiceStreamActivitiesStream struct {
	stream server.Stream
}

func (x *activityServiceStreamActivitiesStream) Close() error {
	return x.stream.Close()
}

func (x *activityServiceStreamActivitiesStream) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *activityServiceStreamActivitiesStream) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *activityServiceStreamActivitiesStream) Send(m *StreamActivitiesResponse) error {
	return x.stream.Send(m)
}

func (h *activityServiceHandler) UnreadActivitiesNumber(ctx context.Context, in *UnreadActivitiesRequest, out *UnreadActivitiesResponse) error {
	return h.ActivityServiceHandler.UnreadActivitiesNumber(ctx, in, out)
}

func (h *activityServiceHandler) PurgeActivities(ctx context.Context, in *PurgeActivitiesRequest, out *PurgeActivitiesResponse) error {
	return h.ActivityServiceHandler.PurgeActivities(ctx, in, out)
}

func (h *activityServiceHandler) SetUserLastActivity(ctx context.Context, in *UserLastActivityRequest, out *UserLastActivityResponse) error {
	return h.ActivityServiceHandler.SetUserLastActivity(ctx, in, out)
}

func (h *activityServiceHandler) Subscribe(ctx context.Context, in *SubscribeRequest, out *SubscribeResponse) error {
	return h.ActivityServiceHandler.Subscribe(ctx, in, out)
}

func (h *activityServiceHandler) SearchSubscriptions(ctx context.Context, stream server.Stream) error {
	m := new(SearchSubscriptionsRequest)
	if err := stream.Recv(m); err != nil {
		return err
	}
	return h.ActivityServiceHandler.SearchSubscriptions(ctx, m, &activityServiceSearchSubscriptionsStream{stream})
}

type ActivityService_SearchSubscriptionsStream interface {
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Send(*SearchSubscriptionsResponse) error
}

type activityServiceSearchSubscriptionsStream struct {
	stream server.Stream
}

func (x *activityServiceSearchSubscriptionsStream) Close() error {
	return x.stream.Close()
}

func (x *activityServiceSearchSubscriptionsStream) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *activityServiceSearchSubscriptionsStream) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *activityServiceSearchSubscriptionsStream) Send(m *SearchSubscriptionsResponse) error {
	return x.stream.Send(m)
}
