// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: github.com/pydio/cells/v4/common/proto/idm/idm.proto

package idm

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	_ "github.com/mwitkow/go-proto-validators"
	_ "github.com/pydio/cells/v4/common/proto/service"
	_ "github.com/pydio/cells/v4/common/proto/tree"
	math "math"
)

import (
	context "context"
	api "github.com/micro/micro/v3/service/api"
	client "github.com/micro/micro/v3/service/client"
	server "github.com/micro/micro/v3/service/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for RoleService service

func NewRoleServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for RoleService service

type RoleService interface {
	CreateRole(ctx context.Context, in *CreateRoleRequest, opts ...client.CallOption) (*CreateRoleResponse, error)
	DeleteRole(ctx context.Context, in *DeleteRoleRequest, opts ...client.CallOption) (*DeleteRoleResponse, error)
	SearchRole(ctx context.Context, in *SearchRoleRequest, opts ...client.CallOption) (RoleService_SearchRoleService, error)
	StreamRole(ctx context.Context, opts ...client.CallOption) (RoleService_StreamRoleService, error)
	CountRole(ctx context.Context, in *SearchRoleRequest, opts ...client.CallOption) (*CountRoleResponse, error)
}

type roleService struct {
	c    client.Client
	name string
}

func NewRoleService(name string, c client.Client) RoleService {
	return &roleService{
		c:    c,
		name: name,
	}
}

func (c *roleService) CreateRole(ctx context.Context, in *CreateRoleRequest, opts ...client.CallOption) (*CreateRoleResponse, error) {
	req := c.c.NewRequest(c.name, "RoleService.CreateRole", in)
	out := new(CreateRoleResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roleService) DeleteRole(ctx context.Context, in *DeleteRoleRequest, opts ...client.CallOption) (*DeleteRoleResponse, error) {
	req := c.c.NewRequest(c.name, "RoleService.DeleteRole", in)
	out := new(DeleteRoleResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roleService) SearchRole(ctx context.Context, in *SearchRoleRequest, opts ...client.CallOption) (RoleService_SearchRoleService, error) {
	req := c.c.NewRequest(c.name, "RoleService.SearchRole", &SearchRoleRequest{})
	stream, err := c.c.Stream(ctx, req, opts...)
	if err != nil {
		return nil, err
	}
	if err := stream.Send(in); err != nil {
		return nil, err
	}
	return &roleServiceSearchRole{stream}, nil
}

type RoleService_SearchRoleService interface {
	Context() context.Context
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Recv() (*SearchRoleResponse, error)
}

type roleServiceSearchRole struct {
	stream client.Stream
}

func (x *roleServiceSearchRole) Close() error {
	return x.stream.Close()
}

func (x *roleServiceSearchRole) Context() context.Context {
	return x.stream.Context()
}

func (x *roleServiceSearchRole) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *roleServiceSearchRole) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *roleServiceSearchRole) Recv() (*SearchRoleResponse, error) {
	m := new(SearchRoleResponse)
	err := x.stream.Recv(m)
	if err != nil {
		return nil, err
	}
	return m, nil
}

func (c *roleService) StreamRole(ctx context.Context, opts ...client.CallOption) (RoleService_StreamRoleService, error) {
	req := c.c.NewRequest(c.name, "RoleService.StreamRole", &SearchRoleRequest{})
	stream, err := c.c.Stream(ctx, req, opts...)
	if err != nil {
		return nil, err
	}
	return &roleServiceStreamRole{stream}, nil
}

type RoleService_StreamRoleService interface {
	Context() context.Context
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Send(*SearchRoleRequest) error
	Recv() (*SearchRoleResponse, error)
}

type roleServiceStreamRole struct {
	stream client.Stream
}

func (x *roleServiceStreamRole) Close() error {
	return x.stream.Close()
}

func (x *roleServiceStreamRole) Context() context.Context {
	return x.stream.Context()
}

func (x *roleServiceStreamRole) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *roleServiceStreamRole) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *roleServiceStreamRole) Send(m *SearchRoleRequest) error {
	return x.stream.Send(m)
}

func (x *roleServiceStreamRole) Recv() (*SearchRoleResponse, error) {
	m := new(SearchRoleResponse)
	err := x.stream.Recv(m)
	if err != nil {
		return nil, err
	}
	return m, nil
}

func (c *roleService) CountRole(ctx context.Context, in *SearchRoleRequest, opts ...client.CallOption) (*CountRoleResponse, error) {
	req := c.c.NewRequest(c.name, "RoleService.CountRole", in)
	out := new(CountRoleResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for RoleService service

type RoleServiceHandler interface {
	CreateRole(context.Context, *CreateRoleRequest, *CreateRoleResponse) error
	DeleteRole(context.Context, *DeleteRoleRequest, *DeleteRoleResponse) error
	SearchRole(context.Context, *SearchRoleRequest, RoleService_SearchRoleStream) error
	StreamRole(context.Context, RoleService_StreamRoleStream) error
	CountRole(context.Context, *SearchRoleRequest, *CountRoleResponse) error
}

func RegisterRoleServiceHandler(s server.Server, hdlr RoleServiceHandler, opts ...server.HandlerOption) error {
	type roleService interface {
		CreateRole(ctx context.Context, in *CreateRoleRequest, out *CreateRoleResponse) error
		DeleteRole(ctx context.Context, in *DeleteRoleRequest, out *DeleteRoleResponse) error
		SearchRole(ctx context.Context, stream server.Stream) error
		StreamRole(ctx context.Context, stream server.Stream) error
		CountRole(ctx context.Context, in *SearchRoleRequest, out *CountRoleResponse) error
	}
	type RoleService struct {
		roleService
	}
	h := &roleServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&RoleService{h}, opts...))
}

type roleServiceHandler struct {
	RoleServiceHandler
}

func (h *roleServiceHandler) CreateRole(ctx context.Context, in *CreateRoleRequest, out *CreateRoleResponse) error {
	return h.RoleServiceHandler.CreateRole(ctx, in, out)
}

func (h *roleServiceHandler) DeleteRole(ctx context.Context, in *DeleteRoleRequest, out *DeleteRoleResponse) error {
	return h.RoleServiceHandler.DeleteRole(ctx, in, out)
}

func (h *roleServiceHandler) SearchRole(ctx context.Context, stream server.Stream) error {
	m := new(SearchRoleRequest)
	if err := stream.Recv(m); err != nil {
		return err
	}
	return h.RoleServiceHandler.SearchRole(ctx, m, &roleServiceSearchRoleStream{stream})
}

type RoleService_SearchRoleStream interface {
	Context() context.Context
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Send(*SearchRoleResponse) error
}

type roleServiceSearchRoleStream struct {
	stream server.Stream
}

func (x *roleServiceSearchRoleStream) Close() error {
	return x.stream.Close()
}

func (x *roleServiceSearchRoleStream) Context() context.Context {
	return x.stream.Context()
}

func (x *roleServiceSearchRoleStream) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *roleServiceSearchRoleStream) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *roleServiceSearchRoleStream) Send(m *SearchRoleResponse) error {
	return x.stream.Send(m)
}

func (h *roleServiceHandler) StreamRole(ctx context.Context, stream server.Stream) error {
	return h.RoleServiceHandler.StreamRole(ctx, &roleServiceStreamRoleStream{stream})
}

type RoleService_StreamRoleStream interface {
	Context() context.Context
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Send(*SearchRoleResponse) error
	Recv() (*SearchRoleRequest, error)
}

type roleServiceStreamRoleStream struct {
	stream server.Stream
}

func (x *roleServiceStreamRoleStream) Close() error {
	return x.stream.Close()
}

func (x *roleServiceStreamRoleStream) Context() context.Context {
	return x.stream.Context()
}

func (x *roleServiceStreamRoleStream) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *roleServiceStreamRoleStream) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *roleServiceStreamRoleStream) Send(m *SearchRoleResponse) error {
	return x.stream.Send(m)
}

func (x *roleServiceStreamRoleStream) Recv() (*SearchRoleRequest, error) {
	m := new(SearchRoleRequest)
	if err := x.stream.Recv(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (h *roleServiceHandler) CountRole(ctx context.Context, in *SearchRoleRequest, out *CountRoleResponse) error {
	return h.RoleServiceHandler.CountRole(ctx, in, out)
}

// Api Endpoints for UserService service

func NewUserServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for UserService service

type UserService interface {
	CreateUser(ctx context.Context, in *CreateUserRequest, opts ...client.CallOption) (*CreateUserResponse, error)
	DeleteUser(ctx context.Context, in *DeleteUserRequest, opts ...client.CallOption) (*DeleteUserResponse, error)
	BindUser(ctx context.Context, in *BindUserRequest, opts ...client.CallOption) (*BindUserResponse, error)
	CountUser(ctx context.Context, in *SearchUserRequest, opts ...client.CallOption) (*CountUserResponse, error)
	SearchUser(ctx context.Context, in *SearchUserRequest, opts ...client.CallOption) (UserService_SearchUserService, error)
	StreamUser(ctx context.Context, opts ...client.CallOption) (UserService_StreamUserService, error)
}

type userService struct {
	c    client.Client
	name string
}

func NewUserService(name string, c client.Client) UserService {
	return &userService{
		c:    c,
		name: name,
	}
}

func (c *userService) CreateUser(ctx context.Context, in *CreateUserRequest, opts ...client.CallOption) (*CreateUserResponse, error) {
	req := c.c.NewRequest(c.name, "UserService.CreateUser", in)
	out := new(CreateUserResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userService) DeleteUser(ctx context.Context, in *DeleteUserRequest, opts ...client.CallOption) (*DeleteUserResponse, error) {
	req := c.c.NewRequest(c.name, "UserService.DeleteUser", in)
	out := new(DeleteUserResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userService) BindUser(ctx context.Context, in *BindUserRequest, opts ...client.CallOption) (*BindUserResponse, error) {
	req := c.c.NewRequest(c.name, "UserService.BindUser", in)
	out := new(BindUserResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userService) CountUser(ctx context.Context, in *SearchUserRequest, opts ...client.CallOption) (*CountUserResponse, error) {
	req := c.c.NewRequest(c.name, "UserService.CountUser", in)
	out := new(CountUserResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userService) SearchUser(ctx context.Context, in *SearchUserRequest, opts ...client.CallOption) (UserService_SearchUserService, error) {
	req := c.c.NewRequest(c.name, "UserService.SearchUser", &SearchUserRequest{})
	stream, err := c.c.Stream(ctx, req, opts...)
	if err != nil {
		return nil, err
	}
	if err := stream.Send(in); err != nil {
		return nil, err
	}
	return &userServiceSearchUser{stream}, nil
}

type UserService_SearchUserService interface {
	Context() context.Context
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Recv() (*SearchUserResponse, error)
}

type userServiceSearchUser struct {
	stream client.Stream
}

func (x *userServiceSearchUser) Close() error {
	return x.stream.Close()
}

func (x *userServiceSearchUser) Context() context.Context {
	return x.stream.Context()
}

func (x *userServiceSearchUser) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *userServiceSearchUser) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *userServiceSearchUser) Recv() (*SearchUserResponse, error) {
	m := new(SearchUserResponse)
	err := x.stream.Recv(m)
	if err != nil {
		return nil, err
	}
	return m, nil
}

func (c *userService) StreamUser(ctx context.Context, opts ...client.CallOption) (UserService_StreamUserService, error) {
	req := c.c.NewRequest(c.name, "UserService.StreamUser", &SearchUserRequest{})
	stream, err := c.c.Stream(ctx, req, opts...)
	if err != nil {
		return nil, err
	}
	return &userServiceStreamUser{stream}, nil
}

type UserService_StreamUserService interface {
	Context() context.Context
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Send(*SearchUserRequest) error
	Recv() (*SearchUserResponse, error)
}

type userServiceStreamUser struct {
	stream client.Stream
}

func (x *userServiceStreamUser) Close() error {
	return x.stream.Close()
}

func (x *userServiceStreamUser) Context() context.Context {
	return x.stream.Context()
}

func (x *userServiceStreamUser) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *userServiceStreamUser) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *userServiceStreamUser) Send(m *SearchUserRequest) error {
	return x.stream.Send(m)
}

func (x *userServiceStreamUser) Recv() (*SearchUserResponse, error) {
	m := new(SearchUserResponse)
	err := x.stream.Recv(m)
	if err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for UserService service

type UserServiceHandler interface {
	CreateUser(context.Context, *CreateUserRequest, *CreateUserResponse) error
	DeleteUser(context.Context, *DeleteUserRequest, *DeleteUserResponse) error
	BindUser(context.Context, *BindUserRequest, *BindUserResponse) error
	CountUser(context.Context, *SearchUserRequest, *CountUserResponse) error
	SearchUser(context.Context, *SearchUserRequest, UserService_SearchUserStream) error
	StreamUser(context.Context, UserService_StreamUserStream) error
}

func RegisterUserServiceHandler(s server.Server, hdlr UserServiceHandler, opts ...server.HandlerOption) error {
	type userService interface {
		CreateUser(ctx context.Context, in *CreateUserRequest, out *CreateUserResponse) error
		DeleteUser(ctx context.Context, in *DeleteUserRequest, out *DeleteUserResponse) error
		BindUser(ctx context.Context, in *BindUserRequest, out *BindUserResponse) error
		CountUser(ctx context.Context, in *SearchUserRequest, out *CountUserResponse) error
		SearchUser(ctx context.Context, stream server.Stream) error
		StreamUser(ctx context.Context, stream server.Stream) error
	}
	type UserService struct {
		userService
	}
	h := &userServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&UserService{h}, opts...))
}

type userServiceHandler struct {
	UserServiceHandler
}

func (h *userServiceHandler) CreateUser(ctx context.Context, in *CreateUserRequest, out *CreateUserResponse) error {
	return h.UserServiceHandler.CreateUser(ctx, in, out)
}

func (h *userServiceHandler) DeleteUser(ctx context.Context, in *DeleteUserRequest, out *DeleteUserResponse) error {
	return h.UserServiceHandler.DeleteUser(ctx, in, out)
}

func (h *userServiceHandler) BindUser(ctx context.Context, in *BindUserRequest, out *BindUserResponse) error {
	return h.UserServiceHandler.BindUser(ctx, in, out)
}

func (h *userServiceHandler) CountUser(ctx context.Context, in *SearchUserRequest, out *CountUserResponse) error {
	return h.UserServiceHandler.CountUser(ctx, in, out)
}

func (h *userServiceHandler) SearchUser(ctx context.Context, stream server.Stream) error {
	m := new(SearchUserRequest)
	if err := stream.Recv(m); err != nil {
		return err
	}
	return h.UserServiceHandler.SearchUser(ctx, m, &userServiceSearchUserStream{stream})
}

type UserService_SearchUserStream interface {
	Context() context.Context
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Send(*SearchUserResponse) error
}

type userServiceSearchUserStream struct {
	stream server.Stream
}

func (x *userServiceSearchUserStream) Close() error {
	return x.stream.Close()
}

func (x *userServiceSearchUserStream) Context() context.Context {
	return x.stream.Context()
}

func (x *userServiceSearchUserStream) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *userServiceSearchUserStream) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *userServiceSearchUserStream) Send(m *SearchUserResponse) error {
	return x.stream.Send(m)
}

func (h *userServiceHandler) StreamUser(ctx context.Context, stream server.Stream) error {
	return h.UserServiceHandler.StreamUser(ctx, &userServiceStreamUserStream{stream})
}

type UserService_StreamUserStream interface {
	Context() context.Context
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Send(*SearchUserResponse) error
	Recv() (*SearchUserRequest, error)
}

type userServiceStreamUserStream struct {
	stream server.Stream
}

func (x *userServiceStreamUserStream) Close() error {
	return x.stream.Close()
}

func (x *userServiceStreamUserStream) Context() context.Context {
	return x.stream.Context()
}

func (x *userServiceStreamUserStream) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *userServiceStreamUserStream) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *userServiceStreamUserStream) Send(m *SearchUserResponse) error {
	return x.stream.Send(m)
}

func (x *userServiceStreamUserStream) Recv() (*SearchUserRequest, error) {
	m := new(SearchUserRequest)
	if err := x.stream.Recv(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Api Endpoints for WorkspaceService service

func NewWorkspaceServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for WorkspaceService service

type WorkspaceService interface {
	CreateWorkspace(ctx context.Context, in *CreateWorkspaceRequest, opts ...client.CallOption) (*CreateWorkspaceResponse, error)
	DeleteWorkspace(ctx context.Context, in *DeleteWorkspaceRequest, opts ...client.CallOption) (*DeleteWorkspaceResponse, error)
	SearchWorkspace(ctx context.Context, in *SearchWorkspaceRequest, opts ...client.CallOption) (WorkspaceService_SearchWorkspaceService, error)
	StreamWorkspace(ctx context.Context, opts ...client.CallOption) (WorkspaceService_StreamWorkspaceService, error)
}

type workspaceService struct {
	c    client.Client
	name string
}

func NewWorkspaceService(name string, c client.Client) WorkspaceService {
	return &workspaceService{
		c:    c,
		name: name,
	}
}

func (c *workspaceService) CreateWorkspace(ctx context.Context, in *CreateWorkspaceRequest, opts ...client.CallOption) (*CreateWorkspaceResponse, error) {
	req := c.c.NewRequest(c.name, "WorkspaceService.CreateWorkspace", in)
	out := new(CreateWorkspaceResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workspaceService) DeleteWorkspace(ctx context.Context, in *DeleteWorkspaceRequest, opts ...client.CallOption) (*DeleteWorkspaceResponse, error) {
	req := c.c.NewRequest(c.name, "WorkspaceService.DeleteWorkspace", in)
	out := new(DeleteWorkspaceResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workspaceService) SearchWorkspace(ctx context.Context, in *SearchWorkspaceRequest, opts ...client.CallOption) (WorkspaceService_SearchWorkspaceService, error) {
	req := c.c.NewRequest(c.name, "WorkspaceService.SearchWorkspace", &SearchWorkspaceRequest{})
	stream, err := c.c.Stream(ctx, req, opts...)
	if err != nil {
		return nil, err
	}
	if err := stream.Send(in); err != nil {
		return nil, err
	}
	return &workspaceServiceSearchWorkspace{stream}, nil
}

type WorkspaceService_SearchWorkspaceService interface {
	Context() context.Context
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Recv() (*SearchWorkspaceResponse, error)
}

type workspaceServiceSearchWorkspace struct {
	stream client.Stream
}

func (x *workspaceServiceSearchWorkspace) Close() error {
	return x.stream.Close()
}

func (x *workspaceServiceSearchWorkspace) Context() context.Context {
	return x.stream.Context()
}

func (x *workspaceServiceSearchWorkspace) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *workspaceServiceSearchWorkspace) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *workspaceServiceSearchWorkspace) Recv() (*SearchWorkspaceResponse, error) {
	m := new(SearchWorkspaceResponse)
	err := x.stream.Recv(m)
	if err != nil {
		return nil, err
	}
	return m, nil
}

func (c *workspaceService) StreamWorkspace(ctx context.Context, opts ...client.CallOption) (WorkspaceService_StreamWorkspaceService, error) {
	req := c.c.NewRequest(c.name, "WorkspaceService.StreamWorkspace", &SearchWorkspaceRequest{})
	stream, err := c.c.Stream(ctx, req, opts...)
	if err != nil {
		return nil, err
	}
	return &workspaceServiceStreamWorkspace{stream}, nil
}

type WorkspaceService_StreamWorkspaceService interface {
	Context() context.Context
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Send(*SearchWorkspaceRequest) error
	Recv() (*SearchWorkspaceResponse, error)
}

type workspaceServiceStreamWorkspace struct {
	stream client.Stream
}

func (x *workspaceServiceStreamWorkspace) Close() error {
	return x.stream.Close()
}

func (x *workspaceServiceStreamWorkspace) Context() context.Context {
	return x.stream.Context()
}

func (x *workspaceServiceStreamWorkspace) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *workspaceServiceStreamWorkspace) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *workspaceServiceStreamWorkspace) Send(m *SearchWorkspaceRequest) error {
	return x.stream.Send(m)
}

func (x *workspaceServiceStreamWorkspace) Recv() (*SearchWorkspaceResponse, error) {
	m := new(SearchWorkspaceResponse)
	err := x.stream.Recv(m)
	if err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for WorkspaceService service

type WorkspaceServiceHandler interface {
	CreateWorkspace(context.Context, *CreateWorkspaceRequest, *CreateWorkspaceResponse) error
	DeleteWorkspace(context.Context, *DeleteWorkspaceRequest, *DeleteWorkspaceResponse) error
	SearchWorkspace(context.Context, *SearchWorkspaceRequest, WorkspaceService_SearchWorkspaceStream) error
	StreamWorkspace(context.Context, WorkspaceService_StreamWorkspaceStream) error
}

func RegisterWorkspaceServiceHandler(s server.Server, hdlr WorkspaceServiceHandler, opts ...server.HandlerOption) error {
	type workspaceService interface {
		CreateWorkspace(ctx context.Context, in *CreateWorkspaceRequest, out *CreateWorkspaceResponse) error
		DeleteWorkspace(ctx context.Context, in *DeleteWorkspaceRequest, out *DeleteWorkspaceResponse) error
		SearchWorkspace(ctx context.Context, stream server.Stream) error
		StreamWorkspace(ctx context.Context, stream server.Stream) error
	}
	type WorkspaceService struct {
		workspaceService
	}
	h := &workspaceServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&WorkspaceService{h}, opts...))
}

type workspaceServiceHandler struct {
	WorkspaceServiceHandler
}

func (h *workspaceServiceHandler) CreateWorkspace(ctx context.Context, in *CreateWorkspaceRequest, out *CreateWorkspaceResponse) error {
	return h.WorkspaceServiceHandler.CreateWorkspace(ctx, in, out)
}

func (h *workspaceServiceHandler) DeleteWorkspace(ctx context.Context, in *DeleteWorkspaceRequest, out *DeleteWorkspaceResponse) error {
	return h.WorkspaceServiceHandler.DeleteWorkspace(ctx, in, out)
}

func (h *workspaceServiceHandler) SearchWorkspace(ctx context.Context, stream server.Stream) error {
	m := new(SearchWorkspaceRequest)
	if err := stream.Recv(m); err != nil {
		return err
	}
	return h.WorkspaceServiceHandler.SearchWorkspace(ctx, m, &workspaceServiceSearchWorkspaceStream{stream})
}

type WorkspaceService_SearchWorkspaceStream interface {
	Context() context.Context
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Send(*SearchWorkspaceResponse) error
}

type workspaceServiceSearchWorkspaceStream struct {
	stream server.Stream
}

func (x *workspaceServiceSearchWorkspaceStream) Close() error {
	return x.stream.Close()
}

func (x *workspaceServiceSearchWorkspaceStream) Context() context.Context {
	return x.stream.Context()
}

func (x *workspaceServiceSearchWorkspaceStream) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *workspaceServiceSearchWorkspaceStream) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *workspaceServiceSearchWorkspaceStream) Send(m *SearchWorkspaceResponse) error {
	return x.stream.Send(m)
}

func (h *workspaceServiceHandler) StreamWorkspace(ctx context.Context, stream server.Stream) error {
	return h.WorkspaceServiceHandler.StreamWorkspace(ctx, &workspaceServiceStreamWorkspaceStream{stream})
}

type WorkspaceService_StreamWorkspaceStream interface {
	Context() context.Context
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Send(*SearchWorkspaceResponse) error
	Recv() (*SearchWorkspaceRequest, error)
}

type workspaceServiceStreamWorkspaceStream struct {
	stream server.Stream
}

func (x *workspaceServiceStreamWorkspaceStream) Close() error {
	return x.stream.Close()
}

func (x *workspaceServiceStreamWorkspaceStream) Context() context.Context {
	return x.stream.Context()
}

func (x *workspaceServiceStreamWorkspaceStream) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *workspaceServiceStreamWorkspaceStream) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *workspaceServiceStreamWorkspaceStream) Send(m *SearchWorkspaceResponse) error {
	return x.stream.Send(m)
}

func (x *workspaceServiceStreamWorkspaceStream) Recv() (*SearchWorkspaceRequest, error) {
	m := new(SearchWorkspaceRequest)
	if err := x.stream.Recv(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Api Endpoints for ACLService service

func NewACLServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for ACLService service

type ACLService interface {
	CreateACL(ctx context.Context, in *CreateACLRequest, opts ...client.CallOption) (*CreateACLResponse, error)
	ExpireACL(ctx context.Context, in *ExpireACLRequest, opts ...client.CallOption) (*ExpireACLResponse, error)
	DeleteACL(ctx context.Context, in *DeleteACLRequest, opts ...client.CallOption) (*DeleteACLResponse, error)
	SearchACL(ctx context.Context, in *SearchACLRequest, opts ...client.CallOption) (ACLService_SearchACLService, error)
	StreamACL(ctx context.Context, opts ...client.CallOption) (ACLService_StreamACLService, error)
}

type aCLService struct {
	c    client.Client
	name string
}

func NewACLService(name string, c client.Client) ACLService {
	return &aCLService{
		c:    c,
		name: name,
	}
}

func (c *aCLService) CreateACL(ctx context.Context, in *CreateACLRequest, opts ...client.CallOption) (*CreateACLResponse, error) {
	req := c.c.NewRequest(c.name, "ACLService.CreateACL", in)
	out := new(CreateACLResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aCLService) ExpireACL(ctx context.Context, in *ExpireACLRequest, opts ...client.CallOption) (*ExpireACLResponse, error) {
	req := c.c.NewRequest(c.name, "ACLService.ExpireACL", in)
	out := new(ExpireACLResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aCLService) DeleteACL(ctx context.Context, in *DeleteACLRequest, opts ...client.CallOption) (*DeleteACLResponse, error) {
	req := c.c.NewRequest(c.name, "ACLService.DeleteACL", in)
	out := new(DeleteACLResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aCLService) SearchACL(ctx context.Context, in *SearchACLRequest, opts ...client.CallOption) (ACLService_SearchACLService, error) {
	req := c.c.NewRequest(c.name, "ACLService.SearchACL", &SearchACLRequest{})
	stream, err := c.c.Stream(ctx, req, opts...)
	if err != nil {
		return nil, err
	}
	if err := stream.Send(in); err != nil {
		return nil, err
	}
	return &aCLServiceSearchACL{stream}, nil
}

type ACLService_SearchACLService interface {
	Context() context.Context
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Recv() (*SearchACLResponse, error)
}

type aCLServiceSearchACL struct {
	stream client.Stream
}

func (x *aCLServiceSearchACL) Close() error {
	return x.stream.Close()
}

func (x *aCLServiceSearchACL) Context() context.Context {
	return x.stream.Context()
}

func (x *aCLServiceSearchACL) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *aCLServiceSearchACL) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *aCLServiceSearchACL) Recv() (*SearchACLResponse, error) {
	m := new(SearchACLResponse)
	err := x.stream.Recv(m)
	if err != nil {
		return nil, err
	}
	return m, nil
}

func (c *aCLService) StreamACL(ctx context.Context, opts ...client.CallOption) (ACLService_StreamACLService, error) {
	req := c.c.NewRequest(c.name, "ACLService.StreamACL", &SearchACLRequest{})
	stream, err := c.c.Stream(ctx, req, opts...)
	if err != nil {
		return nil, err
	}
	return &aCLServiceStreamACL{stream}, nil
}

type ACLService_StreamACLService interface {
	Context() context.Context
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Send(*SearchACLRequest) error
	Recv() (*SearchACLResponse, error)
}

type aCLServiceStreamACL struct {
	stream client.Stream
}

func (x *aCLServiceStreamACL) Close() error {
	return x.stream.Close()
}

func (x *aCLServiceStreamACL) Context() context.Context {
	return x.stream.Context()
}

func (x *aCLServiceStreamACL) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *aCLServiceStreamACL) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *aCLServiceStreamACL) Send(m *SearchACLRequest) error {
	return x.stream.Send(m)
}

func (x *aCLServiceStreamACL) Recv() (*SearchACLResponse, error) {
	m := new(SearchACLResponse)
	err := x.stream.Recv(m)
	if err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for ACLService service

type ACLServiceHandler interface {
	CreateACL(context.Context, *CreateACLRequest, *CreateACLResponse) error
	ExpireACL(context.Context, *ExpireACLRequest, *ExpireACLResponse) error
	DeleteACL(context.Context, *DeleteACLRequest, *DeleteACLResponse) error
	SearchACL(context.Context, *SearchACLRequest, ACLService_SearchACLStream) error
	StreamACL(context.Context, ACLService_StreamACLStream) error
}

func RegisterACLServiceHandler(s server.Server, hdlr ACLServiceHandler, opts ...server.HandlerOption) error {
	type aCLService interface {
		CreateACL(ctx context.Context, in *CreateACLRequest, out *CreateACLResponse) error
		ExpireACL(ctx context.Context, in *ExpireACLRequest, out *ExpireACLResponse) error
		DeleteACL(ctx context.Context, in *DeleteACLRequest, out *DeleteACLResponse) error
		SearchACL(ctx context.Context, stream server.Stream) error
		StreamACL(ctx context.Context, stream server.Stream) error
	}
	type ACLService struct {
		aCLService
	}
	h := &aCLServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&ACLService{h}, opts...))
}

type aCLServiceHandler struct {
	ACLServiceHandler
}

func (h *aCLServiceHandler) CreateACL(ctx context.Context, in *CreateACLRequest, out *CreateACLResponse) error {
	return h.ACLServiceHandler.CreateACL(ctx, in, out)
}

func (h *aCLServiceHandler) ExpireACL(ctx context.Context, in *ExpireACLRequest, out *ExpireACLResponse) error {
	return h.ACLServiceHandler.ExpireACL(ctx, in, out)
}

func (h *aCLServiceHandler) DeleteACL(ctx context.Context, in *DeleteACLRequest, out *DeleteACLResponse) error {
	return h.ACLServiceHandler.DeleteACL(ctx, in, out)
}

func (h *aCLServiceHandler) SearchACL(ctx context.Context, stream server.Stream) error {
	m := new(SearchACLRequest)
	if err := stream.Recv(m); err != nil {
		return err
	}
	return h.ACLServiceHandler.SearchACL(ctx, m, &aCLServiceSearchACLStream{stream})
}

type ACLService_SearchACLStream interface {
	Context() context.Context
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Send(*SearchACLResponse) error
}

type aCLServiceSearchACLStream struct {
	stream server.Stream
}

func (x *aCLServiceSearchACLStream) Close() error {
	return x.stream.Close()
}

func (x *aCLServiceSearchACLStream) Context() context.Context {
	return x.stream.Context()
}

func (x *aCLServiceSearchACLStream) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *aCLServiceSearchACLStream) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *aCLServiceSearchACLStream) Send(m *SearchACLResponse) error {
	return x.stream.Send(m)
}

func (h *aCLServiceHandler) StreamACL(ctx context.Context, stream server.Stream) error {
	return h.ACLServiceHandler.StreamACL(ctx, &aCLServiceStreamACLStream{stream})
}

type ACLService_StreamACLStream interface {
	Context() context.Context
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Send(*SearchACLResponse) error
	Recv() (*SearchACLRequest, error)
}

type aCLServiceStreamACLStream struct {
	stream server.Stream
}

func (x *aCLServiceStreamACLStream) Close() error {
	return x.stream.Close()
}

func (x *aCLServiceStreamACLStream) Context() context.Context {
	return x.stream.Context()
}

func (x *aCLServiceStreamACLStream) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *aCLServiceStreamACLStream) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *aCLServiceStreamACLStream) Send(m *SearchACLResponse) error {
	return x.stream.Send(m)
}

func (x *aCLServiceStreamACLStream) Recv() (*SearchACLRequest, error) {
	m := new(SearchACLRequest)
	if err := x.stream.Recv(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Api Endpoints for UserMetaService service

func NewUserMetaServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for UserMetaService service

type UserMetaService interface {
	UpdateUserMeta(ctx context.Context, in *UpdateUserMetaRequest, opts ...client.CallOption) (*UpdateUserMetaResponse, error)
	SearchUserMeta(ctx context.Context, in *SearchUserMetaRequest, opts ...client.CallOption) (UserMetaService_SearchUserMetaService, error)
	UpdateUserMetaNamespace(ctx context.Context, in *UpdateUserMetaNamespaceRequest, opts ...client.CallOption) (*UpdateUserMetaNamespaceResponse, error)
	ListUserMetaNamespace(ctx context.Context, in *ListUserMetaNamespaceRequest, opts ...client.CallOption) (UserMetaService_ListUserMetaNamespaceService, error)
}

type userMetaService struct {
	c    client.Client
	name string
}

func NewUserMetaService(name string, c client.Client) UserMetaService {
	return &userMetaService{
		c:    c,
		name: name,
	}
}

func (c *userMetaService) UpdateUserMeta(ctx context.Context, in *UpdateUserMetaRequest, opts ...client.CallOption) (*UpdateUserMetaResponse, error) {
	req := c.c.NewRequest(c.name, "UserMetaService.UpdateUserMeta", in)
	out := new(UpdateUserMetaResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userMetaService) SearchUserMeta(ctx context.Context, in *SearchUserMetaRequest, opts ...client.CallOption) (UserMetaService_SearchUserMetaService, error) {
	req := c.c.NewRequest(c.name, "UserMetaService.SearchUserMeta", &SearchUserMetaRequest{})
	stream, err := c.c.Stream(ctx, req, opts...)
	if err != nil {
		return nil, err
	}
	if err := stream.Send(in); err != nil {
		return nil, err
	}
	return &userMetaServiceSearchUserMeta{stream}, nil
}

type UserMetaService_SearchUserMetaService interface {
	Context() context.Context
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Recv() (*SearchUserMetaResponse, error)
}

type userMetaServiceSearchUserMeta struct {
	stream client.Stream
}

func (x *userMetaServiceSearchUserMeta) Close() error {
	return x.stream.Close()
}

func (x *userMetaServiceSearchUserMeta) Context() context.Context {
	return x.stream.Context()
}

func (x *userMetaServiceSearchUserMeta) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *userMetaServiceSearchUserMeta) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *userMetaServiceSearchUserMeta) Recv() (*SearchUserMetaResponse, error) {
	m := new(SearchUserMetaResponse)
	err := x.stream.Recv(m)
	if err != nil {
		return nil, err
	}
	return m, nil
}

func (c *userMetaService) UpdateUserMetaNamespace(ctx context.Context, in *UpdateUserMetaNamespaceRequest, opts ...client.CallOption) (*UpdateUserMetaNamespaceResponse, error) {
	req := c.c.NewRequest(c.name, "UserMetaService.UpdateUserMetaNamespace", in)
	out := new(UpdateUserMetaNamespaceResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userMetaService) ListUserMetaNamespace(ctx context.Context, in *ListUserMetaNamespaceRequest, opts ...client.CallOption) (UserMetaService_ListUserMetaNamespaceService, error) {
	req := c.c.NewRequest(c.name, "UserMetaService.ListUserMetaNamespace", &ListUserMetaNamespaceRequest{})
	stream, err := c.c.Stream(ctx, req, opts...)
	if err != nil {
		return nil, err
	}
	if err := stream.Send(in); err != nil {
		return nil, err
	}
	return &userMetaServiceListUserMetaNamespace{stream}, nil
}

type UserMetaService_ListUserMetaNamespaceService interface {
	Context() context.Context
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Recv() (*ListUserMetaNamespaceResponse, error)
}

type userMetaServiceListUserMetaNamespace struct {
	stream client.Stream
}

func (x *userMetaServiceListUserMetaNamespace) Close() error {
	return x.stream.Close()
}

func (x *userMetaServiceListUserMetaNamespace) Context() context.Context {
	return x.stream.Context()
}

func (x *userMetaServiceListUserMetaNamespace) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *userMetaServiceListUserMetaNamespace) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *userMetaServiceListUserMetaNamespace) Recv() (*ListUserMetaNamespaceResponse, error) {
	m := new(ListUserMetaNamespaceResponse)
	err := x.stream.Recv(m)
	if err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for UserMetaService service

type UserMetaServiceHandler interface {
	UpdateUserMeta(context.Context, *UpdateUserMetaRequest, *UpdateUserMetaResponse) error
	SearchUserMeta(context.Context, *SearchUserMetaRequest, UserMetaService_SearchUserMetaStream) error
	UpdateUserMetaNamespace(context.Context, *UpdateUserMetaNamespaceRequest, *UpdateUserMetaNamespaceResponse) error
	ListUserMetaNamespace(context.Context, *ListUserMetaNamespaceRequest, UserMetaService_ListUserMetaNamespaceStream) error
}

func RegisterUserMetaServiceHandler(s server.Server, hdlr UserMetaServiceHandler, opts ...server.HandlerOption) error {
	type userMetaService interface {
		UpdateUserMeta(ctx context.Context, in *UpdateUserMetaRequest, out *UpdateUserMetaResponse) error
		SearchUserMeta(ctx context.Context, stream server.Stream) error
		UpdateUserMetaNamespace(ctx context.Context, in *UpdateUserMetaNamespaceRequest, out *UpdateUserMetaNamespaceResponse) error
		ListUserMetaNamespace(ctx context.Context, stream server.Stream) error
	}
	type UserMetaService struct {
		userMetaService
	}
	h := &userMetaServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&UserMetaService{h}, opts...))
}

type userMetaServiceHandler struct {
	UserMetaServiceHandler
}

func (h *userMetaServiceHandler) UpdateUserMeta(ctx context.Context, in *UpdateUserMetaRequest, out *UpdateUserMetaResponse) error {
	return h.UserMetaServiceHandler.UpdateUserMeta(ctx, in, out)
}

func (h *userMetaServiceHandler) SearchUserMeta(ctx context.Context, stream server.Stream) error {
	m := new(SearchUserMetaRequest)
	if err := stream.Recv(m); err != nil {
		return err
	}
	return h.UserMetaServiceHandler.SearchUserMeta(ctx, m, &userMetaServiceSearchUserMetaStream{stream})
}

type UserMetaService_SearchUserMetaStream interface {
	Context() context.Context
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Send(*SearchUserMetaResponse) error
}

type userMetaServiceSearchUserMetaStream struct {
	stream server.Stream
}

func (x *userMetaServiceSearchUserMetaStream) Close() error {
	return x.stream.Close()
}

func (x *userMetaServiceSearchUserMetaStream) Context() context.Context {
	return x.stream.Context()
}

func (x *userMetaServiceSearchUserMetaStream) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *userMetaServiceSearchUserMetaStream) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *userMetaServiceSearchUserMetaStream) Send(m *SearchUserMetaResponse) error {
	return x.stream.Send(m)
}

func (h *userMetaServiceHandler) UpdateUserMetaNamespace(ctx context.Context, in *UpdateUserMetaNamespaceRequest, out *UpdateUserMetaNamespaceResponse) error {
	return h.UserMetaServiceHandler.UpdateUserMetaNamespace(ctx, in, out)
}

func (h *userMetaServiceHandler) ListUserMetaNamespace(ctx context.Context, stream server.Stream) error {
	m := new(ListUserMetaNamespaceRequest)
	if err := stream.Recv(m); err != nil {
		return err
	}
	return h.UserMetaServiceHandler.ListUserMetaNamespace(ctx, m, &userMetaServiceListUserMetaNamespaceStream{stream})
}

type UserMetaService_ListUserMetaNamespaceStream interface {
	Context() context.Context
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Send(*ListUserMetaNamespaceResponse) error
}

type userMetaServiceListUserMetaNamespaceStream struct {
	stream server.Stream
}

func (x *userMetaServiceListUserMetaNamespaceStream) Close() error {
	return x.stream.Close()
}

func (x *userMetaServiceListUserMetaNamespaceStream) Context() context.Context {
	return x.stream.Context()
}

func (x *userMetaServiceListUserMetaNamespaceStream) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *userMetaServiceListUserMetaNamespaceStream) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *userMetaServiceListUserMetaNamespaceStream) Send(m *ListUserMetaNamespaceResponse) error {
	return x.stream.Send(m)
}

// Api Endpoints for PolicyEngineService service

func NewPolicyEngineServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for PolicyEngineService service

type PolicyEngineService interface {
	IsAllowed(ctx context.Context, in *PolicyEngineRequest, opts ...client.CallOption) (*PolicyEngineResponse, error)
	StorePolicyGroup(ctx context.Context, in *StorePolicyGroupRequest, opts ...client.CallOption) (*StorePolicyGroupResponse, error)
	ListPolicyGroups(ctx context.Context, in *ListPolicyGroupsRequest, opts ...client.CallOption) (*ListPolicyGroupsResponse, error)
	DeletePolicyGroup(ctx context.Context, in *DeletePolicyGroupRequest, opts ...client.CallOption) (*DeletePolicyGroupResponse, error)
}

type policyEngineService struct {
	c    client.Client
	name string
}

func NewPolicyEngineService(name string, c client.Client) PolicyEngineService {
	return &policyEngineService{
		c:    c,
		name: name,
	}
}

func (c *policyEngineService) IsAllowed(ctx context.Context, in *PolicyEngineRequest, opts ...client.CallOption) (*PolicyEngineResponse, error) {
	req := c.c.NewRequest(c.name, "PolicyEngineService.IsAllowed", in)
	out := new(PolicyEngineResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *policyEngineService) StorePolicyGroup(ctx context.Context, in *StorePolicyGroupRequest, opts ...client.CallOption) (*StorePolicyGroupResponse, error) {
	req := c.c.NewRequest(c.name, "PolicyEngineService.StorePolicyGroup", in)
	out := new(StorePolicyGroupResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *policyEngineService) ListPolicyGroups(ctx context.Context, in *ListPolicyGroupsRequest, opts ...client.CallOption) (*ListPolicyGroupsResponse, error) {
	req := c.c.NewRequest(c.name, "PolicyEngineService.ListPolicyGroups", in)
	out := new(ListPolicyGroupsResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *policyEngineService) DeletePolicyGroup(ctx context.Context, in *DeletePolicyGroupRequest, opts ...client.CallOption) (*DeletePolicyGroupResponse, error) {
	req := c.c.NewRequest(c.name, "PolicyEngineService.DeletePolicyGroup", in)
	out := new(DeletePolicyGroupResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for PolicyEngineService service

type PolicyEngineServiceHandler interface {
	IsAllowed(context.Context, *PolicyEngineRequest, *PolicyEngineResponse) error
	StorePolicyGroup(context.Context, *StorePolicyGroupRequest, *StorePolicyGroupResponse) error
	ListPolicyGroups(context.Context, *ListPolicyGroupsRequest, *ListPolicyGroupsResponse) error
	DeletePolicyGroup(context.Context, *DeletePolicyGroupRequest, *DeletePolicyGroupResponse) error
}

func RegisterPolicyEngineServiceHandler(s server.Server, hdlr PolicyEngineServiceHandler, opts ...server.HandlerOption) error {
	type policyEngineService interface {
		IsAllowed(ctx context.Context, in *PolicyEngineRequest, out *PolicyEngineResponse) error
		StorePolicyGroup(ctx context.Context, in *StorePolicyGroupRequest, out *StorePolicyGroupResponse) error
		ListPolicyGroups(ctx context.Context, in *ListPolicyGroupsRequest, out *ListPolicyGroupsResponse) error
		DeletePolicyGroup(ctx context.Context, in *DeletePolicyGroupRequest, out *DeletePolicyGroupResponse) error
	}
	type PolicyEngineService struct {
		policyEngineService
	}
	h := &policyEngineServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&PolicyEngineService{h}, opts...))
}

type policyEngineServiceHandler struct {
	PolicyEngineServiceHandler
}

func (h *policyEngineServiceHandler) IsAllowed(ctx context.Context, in *PolicyEngineRequest, out *PolicyEngineResponse) error {
	return h.PolicyEngineServiceHandler.IsAllowed(ctx, in, out)
}

func (h *policyEngineServiceHandler) StorePolicyGroup(ctx context.Context, in *StorePolicyGroupRequest, out *StorePolicyGroupResponse) error {
	return h.PolicyEngineServiceHandler.StorePolicyGroup(ctx, in, out)
}

func (h *policyEngineServiceHandler) ListPolicyGroups(ctx context.Context, in *ListPolicyGroupsRequest, out *ListPolicyGroupsResponse) error {
	return h.PolicyEngineServiceHandler.ListPolicyGroups(ctx, in, out)
}

func (h *policyEngineServiceHandler) DeletePolicyGroup(ctx context.Context, in *DeletePolicyGroupRequest, out *DeletePolicyGroupResponse) error {
	return h.PolicyEngineServiceHandler.DeletePolicyGroup(ctx, in, out)
}
