package main

import (
	"fmt"
	"google.golang.org/grpc"
	"google.golang.org/protobuf/compiler/protogen"
	"strings"
)

const (
	fmtPackage     = protogen.GoImportPath("fmt")
	contextPackage = protogen.GoImportPath("context")
	grpcPackage    = protogen.GoImportPath("google.golang.org/grpc")
	statusPackage  = protogen.GoImportPath("google.golang.org/grpc/status")
	codesPackage   = protogen.GoImportPath("google.golang.org/grpc/codes")
	serviceContextPackage = protogen.GoImportPath("github.com/pydio/cells/v4/common/service/context")
)

// generateFile generates a _grpc.pb.go file containing gRPC service definitions.
func generateFile(gen *protogen.Plugin, file *protogen.File) *protogen.GeneratedFile {
	if len(file.Services) == 0 {
		return nil
	}
	filename := file.GeneratedFilenamePrefix + "_grpc.multi.pb.go"
	g := gen.NewGeneratedFile(filename, file.GoImportPath)
	g.P("// Code generated by protoc-gen-go-grpc. DO NOT EDIT.")
	g.P("// versions:")
	g.P("// - protoc-gen-go-grpc v", version)
	g.P("// - protoc             ", protocVersion(gen))
	if file.Proto.GetOptions().GetDeprecated() {
		g.P("// ", file.Desc.Path(), " is a deprecated file.")
	} else {
		g.P("// source: ", file.Desc.Path())
	}
	g.P()
	g.P("package ", file.GoPackageName)
	g.P()
	generateFileContent(gen, file, g)
	return g
}

func protocVersion(gen *protogen.Plugin) string {
	v := gen.Request.GetCompilerVersion()
	if v == nil {
		return "(unknown)"
	}
	var suffix string
	if s := v.GetSuffix(); s != "" {
		suffix = "-" + s
	}
	return fmt.Sprintf("v%d.%d.%d%s", v.GetMajor(), v.GetMinor(), v.GetPatch(), suffix)
}

// generateFileContent generates the gRPC service definitions, excluding the package statement.
func generateFileContent(gen *protogen.Plugin, file *protogen.File, g *protogen.GeneratedFile) {
	if len(file.Services) == 0 {
		return
	}

	g.P("// This is a compile-time assertion to ensure that this generated file")
	g.P("// is compatible with the grpc package it is being compiled against.")
	g.P("// Requires gRPC-Go v1.32.0 or later.")
	g.P("const _ = ", grpcPackage.Ident("SupportPackageIsVersion7")) // When changing, update version number above.
	g.P()
	for _, service := range file.Services {
		genService(gen, file, g, service)
	}
}

func genService(gen *protogen.Plugin, file *protogen.File, g *protogen.GeneratedFile, service *protogen.Service) {
	server := service.GoName + "Server"
	namedServer := "Named" + server
	multiServer := "Multi" + server

	g.P("var (")
	g.P("multi", server, "s = make(map[string]", multiServer,")")
	g.P(")")

	g.Annotate(namedServer, service.Location)
	g.P("type " + namedServer + " interface {")
	g.P(server)
	g.P("Name() string")
	g.P("}")


	g.Annotate(multiServer, service.Location)
	g.P("type " + multiServer + " []" + namedServer)

	for _, method := range service.Methods {
		g.Annotate(multiServer+"."+method.GoName, method.Location)

		g.P(method.Comments.Leading)
		g.P("func (m ", multiServer, ") ",  serverSignature(g, method), " {")
		if !method.Desc.IsStreamingClient() && !method.Desc.IsStreamingServer() {
			g.P("for _, mm := range m {")
			g.P("if mm.Name() == ", serviceContextPackage.Ident("GetServiceName"), "(ctx) {")
			g.P("return mm.", method.GoName,"(ctx, r)")
			g.P("}")
			g.P("}")
			g.P("return nil, ", statusPackage.Ident("Errorf"), "(", codesPackage.Ident("Unimplemented"),", \"method ", method.GoName, " not implemented\")")

		} else if !method.Desc.IsStreamingClient() {
			g.P("for _, mm := range m {")
			g.P("if mm.Name() == ", serviceContextPackage.Ident("GetServiceName"), "(s.Context()) {")
			g.P("return mm.", method.GoName,"(r, s)")
			g.P("}")
			g.P("}")
			g.P("return ", statusPackage.Ident("Errorf"), "(", codesPackage.Ident("Unimplemented"),", \"method ", method.GoName, " not implemented\")")
		} else {
			g.P("for _, mm := range m {")
			g.P("if mm.Name() == ", serviceContextPackage.Ident("GetServiceName"), "(s.Context()) {")
			g.P("return mm.", method.GoName,"(s)")
			g.P("}")
			g.P("}")
			g.P("return ", statusPackage.Ident("Errorf"), "(", codesPackage.Ident("Unimplemented"),", \"method ", method.GoName, " not implemented\")")
		}
		g.P("}")
	}

	g.P("func (m ", multiServer, ") mustEmbedUnimplemented", server, "() {}")

	g.P("func Register", multiServer, "(s grpc.ServiceRegistrar, srv ", namedServer,") {")
	g.P("addr := ", fmtPackage.Ident("Sprintf"), "(\"%p\", s)")
	g.P("m, ok := multi", server, "s[addr]")
	g.P("if !ok {")
	g.P("m = ", multiServer, "{}")
	g.P("multi", server, "s[addr] = m")
	g.P("Register", server, "(s, m)")
	g.P("}")
	g.P("m = append(m, srv)")
	g.P("}")

	g.P("func Deregister", multiServer, "(s grpc.ServiceRegistrar, name string) {")
	g.P("addr := ", fmtPackage.Ident("Sprintf"), "(\"%p\", s)")
	g.P("m, ok := multi", server, "s[addr]")
	g.P("if !ok {")
	g.P("return")
	g.P("}")
	g.P("delete(m, name)")
	g.P("}")
}

func serverSignature(g *protogen.GeneratedFile, method *protogen.Method) string {
	var reqArgs []string
	ret := "error"
	if !method.Desc.IsStreamingClient() && !method.Desc.IsStreamingServer() {
		reqArgs = append(reqArgs, "ctx " + g.QualifiedGoIdent(contextPackage.Ident("Context")))
		ret = "(*" + g.QualifiedGoIdent(method.Output.GoIdent) + ", error)"
	}
	if !method.Desc.IsStreamingClient() {
		reqArgs = append(reqArgs, "r *"+g.QualifiedGoIdent(method.Input.GoIdent))
	}
	if method.Desc.IsStreamingClient() || method.Desc.IsStreamingServer() {
		reqArgs = append(reqArgs, "s " + method.Parent.GoName+"_"+method.GoName+"Server")
	}
	return method.GoName + "(" + strings.Join(reqArgs, ", ") + ") " + ret
}